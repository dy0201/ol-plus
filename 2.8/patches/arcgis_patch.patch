Index: lib/OpenLayers.js
===================================================================
--- lib/OpenLayers.js	(revision 9484)
+++ lib/OpenLayers.js	(working copy)
@@ -118,8 +118,11 @@
             "OpenLayers/Layer/Boxes.js",
             "OpenLayers/Layer/XYZ.js",
             "OpenLayers/Layer/TMS.js",
-            "OpenLayers/Layer/TileCache.js",
-            "OpenLayers/Popup/Anchored.js",
+            "OpenLayers/Layer/TileCache.js",			
+			"OpenLayers/Layer/ArcGIS/AgsTiled.js",
+			"OpenLayers/Layer/ArcGIS/AgsDynamic.js",
+            "OpenLayers/Layer/ArcGIS/AgsImageService.js",            
+			"OpenLayers/Popup/Anchored.js",
             "OpenLayers/Popup/AnchoredBubble.js",
             "OpenLayers/Popup/Framed.js",
             "OpenLayers/Popup/FramedCloud.js",
@@ -132,6 +135,8 @@
             "OpenLayers/Handler/Point.js",
             "OpenLayers/Handler/Path.js",
             "OpenLayers/Handler/Polygon.js",
+			"OpenLayers/Handler/MultiPath.js",
+            "OpenLayers/Handler/MultiPolygon.js",
             "OpenLayers/Handler/Feature.js",
             "OpenLayers/Handler/Drag.js",
             "OpenLayers/Handler/RegularPolygon.js",
@@ -150,6 +155,7 @@
             "OpenLayers/Control/OverviewMap.js",
             "OpenLayers/Control/KeyboardDefaults.js",
             "OpenLayers/Control/PanZoom.js",
+			"OpenLayers/Control/PanZoom2.js",
             "OpenLayers/Control/PanZoomBar.js",
             "OpenLayers/Control/ArgParser.js",
             "OpenLayers/Control/Permalink.js",
@@ -158,6 +164,7 @@
             "OpenLayers/Control/Snapping.js",
             "OpenLayers/Control/Split.js",
             "OpenLayers/Control/LayerSwitcher.js",
+			"OpenLayers/Control/LayerSwitcher2.js",
             "OpenLayers/Control/DrawFeature.js",
             "OpenLayers/Control/DragFeature.js",
             "OpenLayers/Control/ModifyFeature.js",
@@ -165,7 +172,15 @@
             "OpenLayers/Control/SelectFeature.js",
             "OpenLayers/Control/NavigationHistory.js",
             "OpenLayers/Control/Measure.js",
-            "OpenLayers/Control/WMSGetFeatureInfo.js",
+            "OpenLayers/Control/WMSGetFeatureInfo.js",	
+			"OpenLayers/Util/AgsUtil.js", 	
+			"OpenLayers/Control/ArcGIS/AgsControl.js",                  
+            "OpenLayers/Control/ArcGIS/AgsGeometryService.js",
+            "OpenLayers/Control/ArcGIS/AgsGeoprocessor.js",                       
+            "OpenLayers/Control/ArcGIS/AgsIdentifyTask.js",         
+            "OpenLayers/Control/ArcGIS/AgsFindTask.js",           
+            "OpenLayers/Control/ArcGIS/AgsQueryTask.js",
+            "OpenLayers/Control/ArcGIS/AgsLocator.js",              	
             "OpenLayers/Geometry.js",
             "OpenLayers/Geometry/Rectangle.js",
             "OpenLayers/Geometry/Collection.js",
@@ -254,6 +269,7 @@
             "OpenLayers/Format/WMSCapabilities/v1_1_0.js",
             "OpenLayers/Format/WMSCapabilities/v1_1_1.js",
             "OpenLayers/Format/WMSGetFeatureInfo.js",
+			"OpenLayers/Format/AgsJsAdapter.js",
             "OpenLayers/Layer/WFS.js",
             "OpenLayers/Control/GetFeature.js",
             "OpenLayers/Control/MouseToolbar.js",
Index: lib/OpenLayers/Control/ArcGIS/AgsControl.js
===================================================================
--- lib/OpenLayers/Control/ArcGIS/AgsControl.js	(revision 0)
+++ lib/OpenLayers/Control/ArcGIS/AgsControl.js	(revision 0)
@@ -0,0 +1,666 @@
+/**
+ * @requires OpenLayers/Control.js
+ * @requires OpenLayers/Handler/Polygon.js
+ */
+
+/**
+ * Class: OpenLayers.Control.AgsControl
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control>
+ */
+OpenLayers.Control.AgsControl = OpenLayers.Class(OpenLayers.Control, {
+	
+	/**
+     * Property: url - {string}
+     *
+     * URL to the ArcGIS Server REST resource that represents a map service or a task
+     *   Default is ""
+     */
+	url: "",
+	
+	
+	/**
+     * Property: layer - {OpenLayers.Layer.Vector}
+     * 
+     * A vector layer where control receive its input geometry/feature from and output result 
+     *   geometry/features to
+     */
+	layer: null,
+	
+	/**
+     * Property: mode - {String}
+     *
+     * Whether to work with hand draw geometry or selected features on map
+     *   Default is false, to receive hand draw geometry as input
+     */
+	mode: "select",
+	  
+	/**
+	  * Property: asynchronous
+      *   {Boolean} whether to deal with synchronous gp task or asynchronous gp job
+      *   Default is false 
+	  */
+	asynchronous: false,
+	
+	/**
+	 * Property: adapter - {OpenLayers.Format.AgsJsAdapter}
+	 * 
+	 * adapter to converting OpenLayers model and AgsJs model back and forth
+	 */
+	adapter: null,
+	
+	/**
+     * Property: handlers - {Object}
+     *
+     */
+    handlers: null,
+	
+	/**
+     * Property: displayResults - {boolean}
+     *  
+     * Whether to add/draw result features of task on map 
+     *   Default is true
+     */
+	displayResults: true,
+	
+	/**
+     * Property: taskParameters - {object}
+     * 
+     * Parameters to define the current task  
+     *   to be overwritten by individual task    
+     */
+	taskParameters: {},
+	
+    /**
+     * Property: taskCallbacks - {Object} array of function
+     * 
+     * User can pass in callback method when initialize the control or execute the task, 
+     *   functions in 'taskCallbacks' will be called after every task is executed
+     */
+    taskCallbacks: null,
+	
+	/**
+     * Property: _resultFeatures - {OpenLayers.Feature.Vector Array}
+     *  
+     * Reference to the result features of current task
+     *   keep the feature reference so they can be added to or removed from this.layer
+     *   executeCallback() will remove 'resultFeatures[]' of previous operation from this.layer
+     *   executeCallback() will add 'resultFeatures[]' of current operation to this.layer    
+     */
+    _resultFeatures: null,
+	
+	/**
+     * Property: resultStyles - {object}
+     * 
+     * Styles used to draw result features on vector layer
+     */
+	resultFeatureStyles: {},
+	
+	/**
+     * Property: _resultImages - {OpenLayers.Layer.Image Array}
+     * 
+     * Reference to the result image layers of current task
+     */
+	_resultImages: null,
+	
+	/**
+     * Property: resultImageOptions - {object}
+     * 
+     * Options used to control result image layers
+     */
+	resultImageOptions: {},
+	
+	/**
+	 * Property: _resultsParser - {object literal}
+	 *   _resultsParser.parser - {function} function to parse results from task like identify, find or query
+	 *   _resultsParser.context - {object} instance where the parser belongs to
+	 */
+	_resultsParser: null,
+	
+	/*********************************************************************************************
+	 * properties related to selectControl
+	 *********************************************************************************************/
+	
+	/**
+	 * Property: selectControl - {OpenLayers.Control.SelectControl}
+	 * 
+	 * Select control used to select a feature as input geometry/feature for the ags control
+	 */
+	selectControl: null,
+	
+	/**
+     * Property: geometryTypes - {String}
+     * 
+     * Array(String) To restrict selection to a limited set of geometry types, 
+     *   send a list of strings corresponding to the geometry class names.
+     */
+    geometryTypes: null,
+
+    /**
+     * Property: clickout - {boolean}
+     * 
+	 * Unselect features when clicking outside any feature, default is false.
+     */
+    clickout: false,
+
+    /**
+     * Property: toggle - {boolean} 
+     * 
+     * Unselect a selected feature on click, default is true.
+     */
+    toggle: true, 
+	
+	/**
+     * Property: multiple - {boolean}
+     * 
+     * Restrict multiple selection, default is false.
+     */
+    multiple: false, 
+	
+	/*********************************************************************************************
+	 * properties related to drawControl
+	 *********************************************************************************************/
+	/**
+	 * Property: drawControl - {OpenLayers.Control.DrawFeature}
+	 * 
+	 * DrawFeature control used to hand draw feature as input geometry/feature to ags control
+	 */
+	drawControl: null,
+	
+	/**
+	 * Property: drawCtrlHandler - (OpenLayers.Handler.*)
+	 * 
+	 * Handler for DrawControl to control which type of geometry to draw
+	 */
+	drawCtrlHandler: OpenLayers.Handler.Polygon,
+	
+	/**
+	 * Property: drawCtrlHandlerOptions 	 
+	 * 
+	 * Handler options for the DrawControl, e.g. 'multi'
+	 */
+	drawCtrlHandlerOptions: {},
+	
+	/**
+     * Constructor: <OpenLayers.Control.AgsControl2>
+     *
+     * Parameters:
+     *   url - {String} URL to the ArcGIS Server REST resource that represents a task
+     *   layer - {OpenLayers.Layer.Vector} 
+     *   callback - {function}
+     *   options - {Object} 
+     */
+	initialize: function(url, layer, callbacks, options) {	
+		OpenLayers.Control.prototype.initialize.apply(this, [options]);
+		
+		this.url = url;
+		if(layer && layer instanceof OpenLayers.Layer.Vector) { // user provide a vector layer, and add it to map in setMap()     					
+     		this.layer = layer;     		     		
+     	} else {			
+			// create an internal vector layer, and add it to map in this.setMap()
+     		this.layer = new OpenLayers.Layer.Vector( 
+				"__internal__",
+				{
+					displayInLayerSwitcher: false, // won't show up in layer switcher
+					isBaseLayer: false
+				}
+			);				     		
+     	}
+		if(callbacks) {
+			this.taskCallbacks = callbacks;
+		}						
+		// initialize selectControl
+        var selectOptions = {
+            geometryTypes: this.geometryTypes,
+            clickout: this.clickout,
+            toggle: this.toggle,
+			multiple: this.multiple,
+			callbacks: {
+				// double-click existing feature to execute control task or submit job
+				dblclick: dojo.hitch(this, this._execute)
+			}
+        };
+        this.selectControl = new OpenLayers.Control.SelectFeature(
+            this.layer, 
+			selectOptions
+        );
+		
+		// initialize drawControl		
+		var drawOptions = OpenLayers.Util.extend(
+			{
+				callbacks:{ done:dojo.hitch(this, this._execute) } // when finish drawing a feature, execute control task or submit job
+			},
+			this.drawCtrlHandlerOptions
+		);
+		this.drawControl = new OpenLayers.Control.DrawFeature(
+			this.layer,
+			this.drawCtrlHandler,
+			drawOptions
+		);
+		
+		// other handlers
+		this.handlers = {
+        	// TODO: add more if necessary
+        };
+		
+		// initialize adapter (OpenLayers.Format.AgsJsAdapter)
+		//   for converting ags features/geometry to OpenLayers geometry/feature back and forth
+     	//   ''defaultEncodeWkid' config parameter will be set in this.setMap()
+		this.adapter = new OpenLayers.Format.AgsJsAdapter();
+		
+		// initialize this._resultFeatures and this._resultImages 
+		this._resultFeatures = [];
+		this._resultImages = [];
+		
+		// apply defaults to this.resultImageOptions
+		OpenLayers.Util.applyDefaults(
+		    this.resultImageOptions,
+		    {
+				opacity: 0.72,
+			}
+		);
+		
+		// Utility methods from OpenLayers.Util.AgsUtil
+		this._isDefined = OpenLayers.Util.AgsUtil.isDefined;
+	    this._isAgsGeometry = OpenLayers.Util.AgsUtil.isAgsGeometry;
+		this._isOLGeometry = OpenLayers.Util.AgsUtil.isOLGeometry;
+		
+		// add utility function bindFunction() from AgsUtil
+		this._bindFunction = OpenLayers.Util.AgsUtil.bindFunction;
+	},
+	
+	/**
+     * APIMethod: destroy
+     */
+    destroy: function() {        
+        this.layer = null;
+        this.selectControl.destroy();
+        this.drawControl.destroy();
+        OpenLayers.Control.prototype.destroy.apply(this, []);
+    },
+	
+	/**
+     * APIMethod: activate
+     *   Activate the control.
+     * 
+     * Returns:
+     *   {Boolean} Successfully activated the control.
+     */
+    activate: function() {
+		/* 
+		 * there is no need to move this.layer to the top when activating the control 
+		 *   because the handlers in selectControl or drawControl will do so    
+		 */        
+		if(this.mode == "select") {
+			// TODO: activate other optional handlers in this.handlers if there is any
+			return (this.selectControl.activate() && 
+					OpenLayers.Control.prototype.activate.apply(this, arguments));	
+		} else if(this.mode == "draw") {
+			// TODO: activate other optional handlers in this.handlers if there is any
+			return (this.drawControl.activate() && 
+					OpenLayers.Control.prototype.activate.apply(this, arguments));
+		} else {
+			return false;
+		}		
+    },
+
+    /**
+     * APIMethod: deactivate
+     *   Deactivate the control.
+     *
+     * Returns: 
+     *   {Boolean} Successfully deactivated the control.
+     */
+    deactivate: function() {
+        var deactivated = false;        
+        if(OpenLayers.Control.prototype.deactivate.apply(this, arguments)) {            
+            this.drawControl.deactivate();
+            this.selectControl.deactivate();
+            // TODO: deactivate other optional handlers in this.handlers
+            deactivated = true;
+        }
+        return deactivated;
+    },
+	
+	/**
+	 * InternalMethod: _execute
+	 *   _execute() is called when done drawing a geometry on map, dbl-click feature/features on map,
+	 *     and it always creates array of OpenLayers.Feature.Vector as inputs and calls this.execute() to execute a task or submit a job
+	 *   
+	 * Parameters:
+	 *   data - OpenLayers.Geometry or OpenLayers.Feature.Vector or an array of them
+	 *   
+	 */
+	_execute: function(data) {
+		var olFeatures = null;
+		if(this._isOLGeometry(data)) { // triggered by 'done' drawing a geometry on map
+			OpenLayers.Console.log("..._execute triggered by 'done' drawing a geometry on map...");
+			olFeatures = [new OpenLayers.Feature.Vector(data)];
+		} else if(data instanceof OpenLayers.Feature.Vector) { // triggered by 'dblclick' a feature on map
+			OpenLayers.Console.log("..._execute triggered by 'dblclick' a feature on map...");
+			olFeatures = [data];
+		} else if(data instanceof Array) { // triggered by using all selected features on the map
+			OpenLayers.Console.log("..._execute triggered by using all selected features on the map...");
+			olFeatures = data;
+		} else {
+			OpenLayers.Console.error("...input geometry or feature is missing or invalid...");
+   			throw "...input geometry or feature is missing or invalid...";
+		}
+		this.execute(olFeatures, {}, []);
+	},
+	
+	/**
+     * APIMethod: execute 
+     *   Execute a task or submit a job on an ArcGIS Server REST task/job resource
+     *   never call AgsControl2.execute() directly because it meant to be overwritten by individual task 
+     *  
+     * Parameters:
+     *   {OpenLayers.Feature.Vector Array} - olFeatures
+     *   {Object} - taskParameters
+     *   {Object} - callbacks
+     */
+	execute: function(olFeatures, taskParameters, callbacks) {		
+		// what a subclass usually do in execute()		
+		/*
+		// assemble parameters to execute task/job
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+	    OpenLayers.Util.applyDefaults(
+		    _taskParameters,
+		    this.taskParameters
+		);
+		// merge additional callbacks
+		var _taskCallbacks = [];
+		_taskCallbacks = _taskCallbacks.concat(this.taskCallbacks);
+		_taskCallbacks = _taskCallbacks.concat(callbacks);
+		var _singleTaskCallback = this._createCallbacks(
+			this,
+			_taskCallbacks,
+			{}				 	    	
+		);
+		// _resultsParser
+		this._resultsParser = {
+		    'parser': this.adapter.parseAgsResults['identifyResults'], // e.g identify task 
+		    'context': this.adapter 
+		}; 
+		// create a single callback function
+		var _onExecuteComplete = this._createCallbacks(
+		    this,
+			[this.onExecuteComplete],
+			{
+				callback: _singleTaskCallback
+			}				 	    	
+		);	 
+		// TODO: specific impelemtation	 
+		*/
+		OpenLayers.Console.error("...execute of OpenLayers.Control.AgsControl is not implemented...");
+     	throw "...execute of OpenLayers.Control.AgsControl is not implemented...";
+	},
+	
+	/**
+	 * Private Method: onExecuteComplete
+	 *   internal callback function when a synchronized task/job is done  
+	 *
+	 * Parameters:
+	 *   agsResults - array of {object}
+	 */
+	onExecuteComplete: function(agsResults, options) {	
+		var olResults = null;
+		try {
+			if(this._resultsParser.context && typeof this._resultsParser.parser === "function") {
+				olResults = this._resultsParser.parser.apply(this._resultsParser.context, [agsResults]);
+			} else {
+				OpenLayers.Console.error("..._resultsParser is missing or invalid...");
+     			throw "..._resultsParser is missing or invalid...";
+			}				
+		} catch(e) {
+			throw e;
+		}
+		// olResults could be just an instance of OpenLayers.Feature.Vector e.g. from locationToAddress operation
+		//   convert it to array [olResults]		
+		if(olResults instanceof OpenLayers.Feature.Vector) {
+			olResults = [olResults];		
+		}						
+		this.cleanupResults();				
+		this.addResults(olResults);
+		if(this.displayResults === true) {		
+			this.showResults();
+		}		
+		// a single callback			
+		options.callback.apply(this, [olResults]);												
+	},
+	
+	/**
+	 * Private Method: onExecuteComplete
+	 *   internal callback function when an asynchronized job is finished  
+	 *
+	 * Parameters:
+	 *   agsResults - array of {object}
+	 *   options - {} object
+	 */
+	onExecuteAsynComplete: function(agsResults, options) {
+		//OpenLayers.Console.log("...asynchronized job succeeded...onExecuteAsynComplete gets called...");
+		var _options = OpenLayers.Util.extend(
+			{
+				'resultFeatures': this._resultFeatures,
+				'resultImages': this._resultImages
+			},
+			options
+		);
+		try {
+			if(this._resultsParser.context && typeof this._resultsParser.parser === "function") {
+				this._resultsParser.parser.apply(this._resultsParser.context, [agsResults, options]);
+			} else {
+				OpenLayers.Console.error("..._resultsParser is missing or invalid...");
+     			throw "..._resultsParser is missing or invalid...";
+			}				
+		} catch(e) {
+			throw e;
+		}
+	},
+	
+	/**
+	 * APIMethod: setTasksParameters
+	 *   set task parameters for this control
+	 * 
+	 * Parameters:
+	 *   taskParameters - {object}
+	 */
+	setTaskParameters: function(taskParameters) {
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+	    OpenLayers.Util.applyDefaults(
+		    _taskParameters,
+		    this.taskParameters
+		);
+		OpenLayers.Util.extend(this.taskParameters, _taskParameters); 
+	},
+	
+	/**
+     * APIMethod: addResults
+     *   add results to map
+     * 
+     * Parameters:
+     *   olResults - {Array of OpenLayers.Feature.Vector or OpenLayers.Layer.Image} array
+     */
+	addResults: function(olResults) {		
+		//OpenLayers.Console.debug("...addResults start...");
+		for(var i=0; i<olResults.length; i++) {
+			var olResult = olResults[i];
+			if(olResult instanceof OpenLayers.Feature.Vector) {
+				this._resultFeatures.push(olResult);
+			} else if(olResult instanceof OpenLayers.Layer.Image) {
+				olResult.setVisibility(false);
+				olResult.setOpacity(this.resultImageOptions.opacity);
+				this.map.addLayer(olResult);
+				this.map.setLayerIndex(olResult, this.map.getLayerIndex(this.layer)+1);
+				this._resultImages.push(olResult);
+			} else {
+				OpenLayers.Console.log("...skip adding because it's not OpenLayers.Feature.Vector or OpenLayers.Layer.Image...");
+			}
+		}
+		//OpenLayers.Console.debug("...addResults end...");
+	},
+	
+	/**
+     * APIMethod: cleanupResults
+     *   remove results from map and destroy them
+     */
+	cleanupResults: function() {		
+		this.hideResults();				
+		//OpenLayers.Console.debug("...cleanupResults start...");
+		// cleanup feature results
+		if(this._resultFeatures && this._resultFeatures.length > 0) {
+			for(var i=0; i<this._resultFeatures.length; i++) {
+				this._resultFeatures[i].destroy();
+			}
+		}
+		this._resultFeatures.length = 0;
+		// cleanup image 
+		if(this._resultImages && this._resultImages.length > 0) {
+			for(var i=0; i<this._resultImages.length; i++) {			
+				this.map.removeLayer(this._resultImages[i]);
+				//this._resultImages[i].destroy();
+			}
+		}
+		this._resultImages.length = 0;
+		//OpenLayers.Console.debug("...cleanupResults end...");
+	},
+	
+	/**
+     * APIMethod: hideResults 
+     *   remove results from map
+     * 
+     */
+	hideResults: function() {		
+		//OpenLayers.Console.debug("...hideResults...");
+		// hide feature results
+		if(this._resultFeatures && this._resultFeatures.length > 0) {
+			this.layer.removeFeatures(this._resultFeatures);
+		}
+		// hide image results
+		if(this._resultImages && this._resultImages.length > 0) {
+			for(var i=0; i<this._resultImages.length; i++) {
+				this._resultImages[i].setVisibility(false);
+			}
+		}
+	},
+	
+	/**
+     * APIMethod: showResults
+     *   draw results on map
+     * 
+     */
+	showResults: function() {
+		//OpenLayers.Console.debug("...showResults...");		
+		// show feature results
+		if(this._resultFeatures && this._resultFeatures.length > 0) {
+			this.layer.addFeatures(this._resultFeatures);
+		}
+		// show image results
+		if(this._resultImages && this._resultImages.length > 0) {
+			for(var i=0; i<this._resultImages.length; i++) {				
+				this._resultImages[i].setVisibility(true);
+			}
+		}
+	},
+
+	/**
+     * APIMethod: switchMode 
+     *   To switch mode between 'select' and 'draw'
+     *   
+     * Parameters: 
+     *   {boolean} - mode
+     */
+    switchMode: function(mode) {
+    	var wasActive = this.active; 
+    	if(this.active === true) {
+    		this.deactivate();
+    	}    	
+    	if(this.mode === "select") {
+    		this.selectControl.unselectAll();
+    	}
+    	if(mode === "select" || mode === "draw") { // user can only set mode to 'select' or 'draw'
+    		this.mode = mode;
+    	}  	    	    
+    	if(wasActive === true) {
+    		this.activate();
+    	}    
+		OpenLayers.Console.log("...control mode switched...current control mode: " + this.mode + "...");	
+    },
+	
+	/**
+     * APIMethod: switchDrawCtrlHandler 
+     *   To switch between geometry handler of this.drawControl
+     *   
+     * Parameters: 
+     *   (OpenLayer.Handler.*) - object
+     */
+	switchDrawCtrlHandler: function(handler) {
+		var wasActive = this.active; 
+		if(this.active === true) {
+    		this.deactivate();
+    	}
+		if(this.mode === "select") {
+    		this.selectControl.unselectAll();
+    	} 
+		this.drawControl.handler = new handler(this.drawControl, this.drawControl.callbacks, this.drawControl.handlerOptions);		
+		this.drawCtrlHandler = this.drawControl.handler; 
+		if(wasActive === true) {
+    		this.activate();
+    	}
+		OpenLayers.Console.log("...DrawCtrlHandler switched...current DrawCtrlHandler: " + this.drawCtrlHandler.CLASS_NAME + "...");
+	},
+	
+	/**
+     * Method: setMap
+     *   Set the map property for the control and all handlers.
+     *
+     * Parameters:
+     *   map - {OpenLayers.Map} The control's map.
+     */
+    setMap: function(map) {
+		// hook layer to map
+		if(!this.layer.map || !(this.layer.map instanceof OpenLayers.Map)) {
+			map.addLayer(this.layer);
+		}
+		// hook selectControl to map		
+        this.selectControl.setMap(map);
+		// hook drawControl to map
+        this.drawControl.setMap(map);
+		// set 'defaultEncodeWkid' to map's projection, so that OpenLayers.Format.AgsJsAdapter can encode/parse
+		//   OpenLayers features and ESRI features back and forth correctly
+		OpenLayers.Util.extend(
+			this.adapter.config, 
+			{'defaultEncodeWkid': this.layer.map['projection']}
+		);		
+        OpenLayers.Control.prototype.setMap.apply(this, arguments);
+		OpenLayers.Console.debug("...current control mode: " + this.mode + "...");
+		OpenLayers.Console.debug("...current DrawCtrlHandler: " + this.drawCtrlHandler.prototype.CLASS_NAME + "...");
+		OpenLayers.Console.log("...adapter defaultEncodeWkid: " + this.adapter.config.defaultEncodeWkid + "...");
+    },
+	
+	/**
+	 * InternalAPI: _createCallbacks
+	 * 
+	 * Parameters:
+	 *   context - {Object} object
+	 *   methods - {Array of functions} array
+	 *   options - {Object} object
+	 */
+	_createCallbacks: function(context, methods, options) {        
+		return dojo.hitch(
+			this,
+			function(response) {
+				var method = null;
+				for(var i=0; i<methods.length; i++) {
+					method = methods[i];
+					if(typeof method == "function") {
+						method.apply(context, [response, options]);	
+					}						
+				}				
+			}
+		);				
+    },
+
+	CLASS_NAME: "OpenLayers.Control.AgsControl"
+});
\ No newline at end of file
Index: lib/OpenLayers/Control/ArcGIS/AgsFindTask.js
===================================================================
--- lib/OpenLayers/Control/ArcGIS/AgsFindTask.js	(revision 0)
+++ lib/OpenLayers/Control/ArcGIS/AgsFindTask.js	(revision 0)
@@ -0,0 +1,118 @@
+/**
+ * @requires OpenLayers/Control/ArcGIS/AgsControl.js
+ *
+ * Class: OpenLayers.Control.AgsFindTask
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control.AgsControl>
+ */
+
+OpenLayers.Control.AgsFindTask = OpenLayers.Class(OpenLayers.Control.AgsControl, {
+     
+     /**
+      * Property: multiple
+      *   {Boolean} restrict multiple selection.
+      *   should always be false because AgsFindTask2 doesn't need any geometry input
+      */
+      multiple: false, 
+	  
+	 /**
+	   * Property: asynchronous
+       *   {Boolean} whether to deal with synchronous gp task or asynchronous gp job
+       *   should always be false because AgsFindTask2 is always synchronous
+	   */
+	  asynchronous: false,
+	 
+	 /**
+      * Constructor: <OpenLayers.Control.ArcGIS.AgsFindTask>
+      *
+      * Parameters:
+      *   url - {String} URL to the ArcGIS Server REST resource
+      *   layer - {OpenLayers.Layer.Vector} 
+      *   callbacks - {Array of functions}
+      *   options - {Object} 
+      */
+	 initialize: function(url, layer, callbacks, options) {	 	  
+		 // call parent initializer
+		 OpenLayers.Control.AgsControl.prototype.initialize.apply(this, [url, layer, callbacks, options]);	 			 			 
+		 
+		 // default task parameters for a esri.tasks.FindTask control
+		 this.taskParameters = {
+			 "contains":			false,
+			 "outSpatialReference":	null,	
+			 "returnGeometry":		true,
+			 "layerIds":			[],
+			 "searchFields":		[],
+		 	 "searchText":			""
+		 };
+		 // set default parser for AgsFindTask results
+		 this._resultsParser = {
+			 'parser': this.adapter.parseAgsResults['findResults'],
+			 'context': this.adapter
+		 };	
+		 		 		 		 
+		 // use dojo if defined
+		 this.execute = this._bindFunction(this.execute, this);
+		 // hitch execute, use dojo anyway		 
+		 //this.execute = dojo.hitch(this, this.execute);
+		 
+		 // since FindTask doesn't need any geometry input, so disable the map interaction
+		 //   disabling map interaction makes it possible for FindTask coexist with other ags controls 
+		 this.active = false;
+		 this.activate = function() {return false;};
+		 this.deactivate = function() {return false;};	 
+	 },
+	 
+	 /**
+     * API Method: execute 
+     *   Execute esri.tasks.FindTask
+     *   
+     * Parameters:
+     *   {object} - taskParameters
+     *   {object} - callbacks
+     */
+	execute: function(/*olFeatures,*/ taskParameters, callbacks) {
+		// assemble parameters to execute FindTask
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+		OpenLayers.Util.applyDefaults(
+			_taskParameters,
+			this.taskParameters
+		);
+		// merge additional callbacks
+		var _taskCallbacks = [];
+		_taskCallbacks = _taskCallbacks.concat(this.taskCallbacks);
+		_taskCallbacks = _taskCallbacks.concat(callbacks);
+		var _singleTaskCallback = this._createCallbacks(
+			this,
+			_taskCallbacks,
+			{}				 	    	
+		);					
+		// callbacks for synchronous find tasks
+		if(this.asynchronous == false) {
+			//OpenLayers.Console.log("...execute esri.tasks.FindTask...");
+			var agsFindTask = new esri.tasks.FindTask(this.url);
+			// make a single callback for esri.tasks.FindTask
+			var _onExecuteComplete = this._createCallbacks(
+				this,
+				[this.onExecuteComplete],
+				{
+					callback: _singleTaskCallback
+				}				 	    	
+			);
+			// error callback for esri.tasks.FindTask
+			var _onCompleteError = this.errback || null;
+			// encode esri.tasks.FindParameters
+			try {			
+				var agsFindParameters = this.adapter.encodeAgsFindParameters(_taskParameters);		     	
+	     	} catch(e) {
+	     		throw e;
+	     	}	
+			agsFindTask.execute(agsFindParameters, _onExecuteComplete, _onCompleteError);				
+		} else { 
+			OpenLayers.Console.error("...'asynchronous' should always be set to 'false' for AgsFindTask ...");
+			throw "...'asynchronous' should always be set to 'false' for AgsFindTask ...";
+		}
+	},	
+              
+    CLASS_NAME: "OpenLayers.Control.AgsFindTask"
+});
\ No newline at end of file
Index: lib/OpenLayers/Control/ArcGIS/AgsGeometryService.js
===================================================================
--- lib/OpenLayers/Control/ArcGIS/AgsGeometryService.js	(revision 0)
+++ lib/OpenLayers/Control/ArcGIS/AgsGeometryService.js	(revision 0)
@@ -0,0 +1,188 @@
+/**
+ * @requires OpenLayers/Control/ArcGIS/AgsControl.js 
+ *
+ * Class: OpenLayers.Control.AgsGeometryService
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control.AgsControl>
+ */
+
+OpenLayers.Control.AgsGeometryService = OpenLayers.Class(OpenLayers.Control.AgsControl, {
+	/**
+  	 * Property: multiple
+  	 *   {Boolean} restrict multiple selection.
+  	 *   Default is true, for AgsGeometryService to allow mulitple feature selection
+  	 */
+  	multiple: true, 
+  
+	/**
+   	 * Property: asynchronous
+   	 *   {Boolean} whether to deal with synchronous gp task or asynchronous gp job
+   	 *   Default is false 
+   	 */
+    asynchronous: false,
+
+    /**
+     * Property: geometryServiceType
+     *   {String} which geometry service operation to execute, buffer, project or simplify
+	 *   default is "buffer"
+	 *   applicable geometryServiceType values are "buffer", "areasAndLengths", "labelPoints", "lengths", "project", "relation", and "simplify" 
+     */
+    geometryServiceType: "buffer",	
+	
+	/**
+     * Constructor: <OpenLayers.Control.ArcGIS.AgsGeometryService>
+     *
+     * Parameters:
+     *   url - {String} URL to the ArcGIS Server REST resource that represents a geometry service
+     *   layer - {OpenLayers.Layer.Vector} 
+     *   callbacks - {Array of function}
+     *   options - {Object} 
+     */
+	initialize: function(url, layer, callbacks, options) {
+		// call parent initializer
+		OpenLayers.Control.AgsControl.prototype.initialize.apply(this, [url, layer, callbacks, options]);
+		// overwrite this.taskParameters for AgsGeometryService control
+		this.taskParameters = {
+			'bufferSpatialReference':   null,
+			'distances':				[1],
+			'features':					null,	
+			'outSpatialReference':		null,
+			'unionResults':				false,
+			'unit':						"UNIT_KILOMETER",
+			'spatialRelationship': 		"INTERSECTION",
+			// non ESRI parameters
+			'inSpatialReference':		"EPSG:4326",	
+			'comparisonString':			null
+		};
+		// set task results parser for AgsGeometryService control
+		this._resultsParser = {
+			'parser': this.adapter.parseAgsGraphics,
+			'context': this.adapter
+		};	
+		// use dojo if defined
+		this.execute = this._bindFunction(this.execute, this);
+		// hitch execute, use dojo anyway		 
+		//this.execute = dojo.hitch(this, this.execute);
+	},
+    
+    /**
+     * API Method: execute 
+     *   Execute geometry service operation against an ArcGIS Server Rest Geometry service
+     *   
+     * Parameters:
+     *   olFeatures - {Array of OpenLayers.Feature.Vector} 
+     *   taskParameters -{object}
+     *   callbacks - {object} 
+     */
+	execute: function(olFeatures, taskParameters, callbacks) {	
+		// assemble parameters to execute Task
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+		OpenLayers.Util.applyDefaults(
+			_taskParameters,
+			this.taskParameters
+		);	
+		// merge additional callbacks
+		var _taskCallbacks = [];
+		_taskCallbacks = _taskCallbacks.concat(this.taskCallbacks);
+		_taskCallbacks = _taskCallbacks.concat(callbacks);
+		var _singleTaskCallback = this._createCallbacks(
+			this,
+			_taskCallbacks,
+			{}				 	    	
+		);	
+		if (this.asynchronous == false) {
+			var agsGeometryService = new esri.tasks.GeometryService(this.url);
+			// make a single callback for esri.tasks.GeometryService
+			var _onExecuteComplete = this._createCallbacks(this, [this.onExecuteComplete], {
+				callback: _singleTaskCallback
+			});
+			// error callback for esri.tasks.GeometryService
+			var _onCompleteError = this.errback || null;
+			try {
+				switch (this.geometryServiceType) {
+					case "buffer":
+						_taskParameters['bufferSpatialReference'] = this.layer.map['projection'] ? this.layer.map['projection'] : _taskParameters['bufferSpatialReference'];
+						_taskParameters['features'] = olFeatures ? olFeatures : _taskParameters['features'];
+						var agsBufferParameters = this.adapter.encodeAgsBufferParameters(_taskParameters);
+						agsGeometryService.buffer(agsBufferParameters, _onExecuteComplete, _onCompleteError);
+						break;					
+					case "project":
+						_taskParameters['inSpatialReference'] = this.layer.map['projection'] ? this.layer.map['projection'] : _taskParameters['inSpatialReference'];
+						_taskParameters['outSpatialReference'] = _taskParameters['outSpatialReference'] || _taskParameters['inSpatialReference'];
+						var agsGraphics = this.adapter.encodeAgsGraphics(olFeatures, _taskParameters['inSpatialReference']);						
+						var agsSpatialReference = this.adapter.encodeAgsSpatialReference(_taskParameters['outSpatialReference']);
+						agsGeometryService.project(agsGraphics, agsSpatialReference, _onExecuteComplete, _onCompleteError);						
+						break;
+					/*
+					 * only supports relation between two single feature instead of two array of features
+					 *   no ESRI Shape Comparison Language support
+					 */
+					case "relation":
+						// to do relation on map, you must set this.mode to 'select' instead of 'draw'
+						_taskParameters['inSpatialReference'] = this.layer.map['projection'] ? this.layer.map['projection'] : _taskParameters['inSpatialReference'];
+						// do relation operation between olFeature[0] and olFeature[1]
+						var agsGraphics1 = this.adapter.encodeAgsGraphics([olFeatures[0]], _taskParameters['inSpatialReference']);
+						var agsGraphics2 = this.adapter.encodeAgsGraphics([olFeatures[1]], _taskParameters['inSpatialReference']);
+						var agsGeometryRelationship = this.adapter.encodeAgsGeometrySpatialRelationship(_taskParameters['spatialRelationship']);
+						var agsComparisonString = _taskParameters['comparisonString'];
+						agsGeometryService.relation(agsGraphics1, agsGraphics2, agsGeometryRelationship, agsComparisonString, _onExecuteComplete, _onCompleteError);	
+						break;
+					case "areasAndLengths":
+					case "lengths":
+					case "simplify":	
+					case "labelPoints":
+						_taskParameters['inSpatialReference'] = this.layer.map['projection'] ? this.layer.map['projection'] : _taskParameters['inSpatialReference'];
+						var agsGraphics = this.adapter.encodeAgsGraphics(olFeatures, _taskParameters['inSpatialReference']);
+						agsGeometryService[this.geometryServiceType].apply(agsGeometryService, [agsGraphics, _onExecuteComplete, _onCompleteError]);
+						break;
+					default:
+						OpenLayers.Console.error("...invalid geometryServiceType...please call setGeometryServiceType() with valid geometryServiceType...");
+						return;				
+				}
+			} catch(e) {
+				throw e;
+			}
+		} else {
+			OpenLayers.Console.error("...'asynchronous' should always be set to 'false' for AgsGeometryService...");
+			throw "...'asynchronous' should always be set to 'false' for AgsGeometryService...";
+		}			
+	},
+	
+	/**
+	 * APIMethod: setGeometryServiceType
+	 *   Toggle between different types of geometry service operations
+	 *
+	 * Parameters: 
+	 *   geometryServiceType - {String}
+	 *     "buffer", 
+	 *     "areasAndLengths", 
+	 *     "labelPoints", 
+	 *     "lengths", 
+	 *     "project", 
+	 *     "relation",
+	 *     "simplify" 
+	 */
+	setGeometryServiceType: function(geometryServiceType) {
+		this.geometryServiceType = geometryServiceType || this.geometryServiceType;
+		switch (this.geometryServiceType) {
+			case "buffer":
+			case "labelPoints":
+			case "project":						
+			case "simplify":			
+				this._resultsParser['parser'] = this.adapter.parseAgsGraphics;					
+				break;
+			case "relation":
+				this._resultsParser['parser'] = this.adapter.parseAgsResults.relations;
+				break;
+			case "areasAndLengths":						
+			case "lengths":
+				this._resultsParser['parser'] = this.adapter.parseAgsResults.areasAndLengths;
+				break;
+			default:
+				OpenLayers.Console.error("...invalid geometryServiceType...please call setGeometryServiceType() with valid geometryServiceType...");
+				return;		
+		}					
+	},	
+	CLASS_NAME: "OpenLayers.Control.AgsGeometryService"
+});
\ No newline at end of file
Index: lib/OpenLayers/Control/ArcGIS/AgsGeoprocessor.js
===================================================================
--- lib/OpenLayers/Control/ArcGIS/AgsGeoprocessor.js	(revision 0)
+++ lib/OpenLayers/Control/ArcGIS/AgsGeoprocessor.js	(revision 0)
@@ -0,0 +1,197 @@
+/**
+ * @requires OpenLayers/Control/ArcGIS/AgsControl.js
+ *
+ * Class: OpenLayers.Control.AgsGeoprocessor
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control.AgsControl>
+ */
+
+OpenLayers.Control.AgsGeoprocessor = OpenLayers.Class(OpenLayers.Control.AgsControl, {
+     
+     /**
+      * Property: multiple
+      *   {Boolean} restrict multiple selection.
+      *   Default is true, for AgsGeoprocessor to allow mulitple feature selection
+      */
+     multiple: true, 
+	  
+	 /**
+	   * Property: asynchronous
+       *   {Boolean} whether to deal with synchronous gp task or asynchronous gp job
+       *   Default is false 
+	   */
+	 asynchronous: false,
+	 
+	 /**
+	  * 
+	  */
+	 asynJobCompleteCallback: null,
+	 
+	 /**
+      * Constructor: <OpenLayers.Control.ArcGIS.AgsGeoprocessor>
+      *
+      * Parameters:
+      *   url - {String} URL to the ArcGIS Server REST resource
+      *   layer - {OpenLayers.Layer.Vector} 
+      *   callbacks - {function}
+      *   options - {Object} 
+      */
+	 initialize: function(url, layer, callbacks, options) {	 	  
+		 // call parent initializer
+		 OpenLayers.Control.AgsControl.prototype.initialize.apply(this, [url, layer, callbacks, options]);	 			 			 
+		 // add a new event to the control to indicate the complete of a asyn gp job
+		 this.events.addEventType("asynjobcomplete");
+		 
+		 // add utility function bindFunction() from AgsUtil
+		 this._bindFunction = OpenLayers.Util.AgsUtil.bindFunction;
+		 
+		 
+		 // create callback for new event 'asynjobcomplete', which add and show results and the gp job
+		 // use dojo if defined
+		 var addAndShowResults = this._bindFunction(		 	
+			function(evt) {
+				this.cleanupResults();
+				this.addResults(evt.results);
+				this.showResults();
+			},
+			this
+		 );		 
+		 // use dojo anyway
+		 /*
+		 var addAndShowResults = dojo.hitch(
+		 	this,
+			function(evt) {
+				this.cleanupResults();
+				this.addResults(evt.results);
+				this.showResults();
+			}
+		 );
+		 */		 
+		 var _asynTaskCallbacks = [];
+		 _asynTaskCallbacks = _asynTaskCallbacks.concat(this.taskCallbacks);
+		 _asynTaskCallbacks = _asynTaskCallbacks.concat([addAndShowResults]);
+		 this.asynJobCompleteCallback = this._createCallbacks(
+			this,
+			_asynTaskCallbacks,
+			{}				 	    	
+		 );			 				
+		 // register the listener callback to event 'asynjobcomplete'
+		 this.events.on({
+		 	"asynjobcomplete": this.asynJobCompleteCallback,
+			scope:this
+		 });		 		 
+		 
+		 // use dojo if defined
+		 this.execute = this._bindFunction(this.execute, this);
+		 // hitch execute, use dojo anyway		 
+		 //this.execute = dojo.hitch(this, this.execute);	 
+	 },
+	 
+	 /**
+	  * API Method: destroy
+	  */
+     destroy: function() {        
+         // unregister the listener callback to event 'asynjobcomplete'
+		 this.events.un({
+		 	"asynjobcomplete": this.asynJobCompleteCallback,
+			scope:this
+		 });
+         OpenLayers.Control.AgsControl.prototype.destroy.apply(this, []);
+     },
+	 
+	 /**
+      * API Method: execute 
+      *   Execute gp task 
+      *   
+      * Parameters:
+      *   {OpenLayers.Feature.Vector Array} - olFeatures
+      *   {object} - taskParameters
+      *   {object} - callbacks
+      */
+	execute: function(olFeatures, taskParameters, callbacks) {
+		// assemble parameters to execute task/job
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+		OpenLayers.Util.applyDefaults(
+			_taskParameters,
+			this.taskParameters
+		);
+		// merge additional callbacks
+		var _taskCallbacks = [];
+		_taskCallbacks = _taskCallbacks.concat(this.taskCallbacks);
+		_taskCallbacks = _taskCallbacks.concat(callbacks);
+		var _singleTaskCallback = this._createCallbacks(
+			this,
+			_taskCallbacks,
+			{}				 	    	
+		);			
+		// _resultsParser
+		this._resultsParser = {
+			'parser': this.geoprocessingResultsParser,
+			'context': this
+		};
+		
+		// geometry input of an arcgis geoprocessing service is usually esri.tasks.FeatureSet
+		//   so create esri.tasks.FeatureSet as input for geoprocessingParamsEnocoder				
+		var agsFeatureSet = this.adapter.encodeAgsFeatureSet(olFeatures, this.layer.map['projection'], {});
+		//OpenLayers.Console.log("...execute geoprocessing task...");
+		var agsGeoprocessor = new esri.tasks.Geoprocessor(this.url);
+		var geoprocessingParams = this.geoprocessingParamsEnocoder(agsFeatureSet, _taskParameters);
+		
+		// callbacks for synchronous gp tasks
+		if(this.asynchronous == false) {
+			var _onExecuteComplete = this._createCallbacks(
+				this,
+				[this.onExecuteComplete],
+				{
+					callback: _singleTaskCallback
+				}				 	    	
+			);	
+			agsGeoprocessor.execute(geoprocessingParams, _onExecuteComplete);
+		} else { // callbacks for asynchronous gp tasks
+			var _onExecuteAsynComplete = this._createCallbacks(
+				this,
+				[this.onExecuteAsynComplete],
+				{
+					agsGeoprocessor: agsGeoprocessor,
+					//callback: _singleTaskCallback					
+				}				 	    	
+			);							
+			// does not support statusCallback now
+			agsGeoprocessor.submitJob(geoprocessingParams, _onExecuteAsynComplete, null);
+		}
+	},	
+      
+    /**
+     * API Method: geoprocessingParamsEnocoder
+     *   overwrite 'geoprocessingParamsEnocoder' to encode geoprocessing parameters  
+     * 
+     * Parameters:
+     *   agsFeatureSet - {esri.task.FeatureSet}
+     *   taskParameters - {Object}
+     *                                          
+     */
+    geoprocessingParamsEnocoder: function(agsFeatureSet, tasksParameters) {     	   
+    	//OpenLayers.Console.log("...encode geoprocessing parameters...");
+		var geoprocessingParams = tasksParameters;
+    	return geoprocessingParams;
+    },
+    
+    /**
+     * API Method: geoprocessingResultsParser
+     *   overwrite 'geoprocessingResultsParser' to parse geoprocessing results 
+     * 
+     * Parameters:
+     *   agsResults - {Object}: results from geoprocessing task or job, can be anything
+     *                            
+     * Returns:
+     *   olResults - {Object}
+     */    
+    geoprocessingResultsParser: function(agsResults, options) {     	   
+    	//OpenLayers.Console.log("...parse geoprocessing results...");
+		var olResults = {};    	
+    	return olResults;
+    },
+              
+    CLASS_NAME: "OpenLayers.Control.AgsGeoprocessor"
+});
\ No newline at end of file
Index: lib/OpenLayers/Control/ArcGIS/AgsIdentifyTask.js
===================================================================
--- lib/OpenLayers/Control/ArcGIS/AgsIdentifyTask.js	(revision 0)
+++ lib/OpenLayers/Control/ArcGIS/AgsIdentifyTask.js	(revision 0)
@@ -0,0 +1,139 @@
+/**
+ * @requires OpenLayers/Control/ArcGIS/AgsControl.js
+ *
+ * Class: OpenLayers.Control.AgsIdentifyTask
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control.AgsControl>
+ */
+
+OpenLayers.Control.AgsIdentifyTask = OpenLayers.Class(OpenLayers.Control.AgsControl, {
+     
+     /**
+      * Property: multiple
+      *   {Boolean} restrict multiple selection.
+      *   should always be false because AgsIdentifyTask can only have one or zero geometry input
+      */
+      multiple: false, 
+	  
+	 /**
+	   * Property: asynchronous
+       *   {Boolean} whether to deal with synchronous gp task or asynchronous gp job
+       *   should always be false because AgsIdentifyTask is always synchronous
+	   */
+	  asynchronous: false,
+	 
+	 /**
+      * Constructor: <OpenLayers.Control.AgsIdentifyTask>
+      *
+      * Parameters:
+      *   url - {String} URL to the ArcGIS Server REST resource
+      *   layer - {OpenLayers.Layer.Vector} 
+      *   callbacks - {Array of function}
+      *   options - {Object} 
+      */
+	 initialize: function(url, layer, callbacks, options) {	 	  
+		 // call parent initializer
+		 OpenLayers.Control.AgsControl.prototype.initialize.apply(this, [url, layer, callbacks, options]);	 			 			 
+		 
+		 // default task parameters for a esri.tasks.IdentifyTask control
+		 this.taskParameters = {
+			 'dpi':					96,
+			 'geometry':			null,	
+			 'height':				0,
+			 'layerIds':			[0],
+			 'layerOption':			"all",
+			 'mapExtent':			null,
+			 'returnGeometry':		true,
+			 'spatialReference':	null,
+			 'tolerance':			1,
+			 'width':				0
+		 };
+		 
+		 // set default parser for AgsIdentifyTask results
+		 this._resultsParser = {
+			 'parser': this.adapter.parseAgsResults['identifyResults'],
+			 'context': this.adapter
+		 };	
+		 		 		 		 
+		 // use dojo if defined
+		 this.execute = this._bindFunction(this.execute, this);
+		 // hitch execute, use dojo anyway		 
+		 //this.execute = dojo.hitch(this, this.execute);		 
+	 },
+	 
+	 /**
+     * API Method: execute 
+     *   Execute esri.tasks.IdentifyTask
+     *   
+     * Parameters:
+     * 	 olFeatures - {Array of OpenLayers.Feature.Vector}	
+     *   taskParameters - {object}
+     *   callbacks - {Array of functions}
+     */
+	execute: function(olFeatures, taskParameters, callbacks) {		
+		// assemble parameters to execute Task
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+		OpenLayers.Util.applyDefaults(
+			_taskParameters,
+			this.taskParameters
+		);		
+		// set width, height, mapExtent and spatialReference
+		if(this._isDefined(this.layer.map)) {
+			_taskParameters['width'] = this.layer.map.getSize().w ? this.layer.map.getSize().w : _taskParameters['width'];
+   			_taskParameters['height'] = this.layer.map.getSize().h ? this.layer.map.getSize().h : _taskParameters['height'];
+   			// always overwrite 'mapExtent' when current map has valid extent
+   			_taskParameters['mapExtent'] = this.layer.map.getExtent() ? this.layer.map.getExtent() : _taskParameters['mapExtent'];			
+   			_taskParameters['spatialReference'] = this.layer.map['projection'] ? this.layer.map['projection'] : _taskParameters['spatialReference'];   				   				
+   		} else {
+   			OpenLayers.Console.error("...can not execute identify task...this.layer.map is not valid...");
+   			throw "...can not execute identify task...this.layer.map is not valid...";
+   		} 		
+		// set 'geometry' identify parameter
+		// multiple feature selection should always be disabled from AgsIdentifyTask control
+		//   in case there is more than features/geometries in olFeatures array. always take first one
+		if(olFeatures[0] instanceof OpenLayers.Feature.Vector) {
+			_taskParameters['geometry'] = olFeatures[0].geometry;
+		} else {
+			OpenLayers.Console.error("...can not execute identify task...input geometry is not valid...");
+   			throw "...can not execute identify task...input geometry is not valid...";
+		}
+		
+		// merge additional callbacks
+		var _taskCallbacks = [];
+		_taskCallbacks = _taskCallbacks.concat(this.taskCallbacks);
+		_taskCallbacks = _taskCallbacks.concat(callbacks);
+		var _singleTaskCallback = this._createCallbacks(
+			this,
+			_taskCallbacks,
+			{}				 	    	
+		);					
+		// callbacks for synchronous identify tasks
+		if(this.asynchronous == false) {
+			//OpenLayers.Console.log("...execute esri.tasks.IdentifyTask...");
+			var agsIdentifyTask = new esri.tasks.IdentifyTask(this.url);
+			// make a single callback for esri.tasks.IdentifyTask
+			var _onExecuteComplete = this._createCallbacks(
+				this,
+				[this.onExecuteComplete],
+				{
+					callback: _singleTaskCallback
+				}				 	    	
+			);
+			// error callback for esri.tasks.IdentifyTask
+			var _onCompleteError = this.errback || null;
+			// encode esri.tasks.IdentifyParameters
+			try {			
+				var agsIdentifyParameters = this.adapter.encodeAgsIdentifyParameters(_taskParameters);			     	
+	     	} catch(e) {
+	     		throw e;
+	     	}	
+			agsIdentifyTask.execute(agsIdentifyParameters, _onExecuteComplete, _onCompleteError);				
+		} else { 
+			OpenLayers.Console.error("...'asynchronous' should always be set to 'false' for AgsIdentifyTask ...");
+			throw "...'asynchronous' should always be set to 'false' for AgsIdentifyTask ...";
+		}
+	},	
+              
+    CLASS_NAME: "OpenLayers.Control.AgsIdentifyTask"
+});
\ No newline at end of file
Index: lib/OpenLayers/Control/ArcGIS/AgsLocator.js
===================================================================
--- lib/OpenLayers/Control/ArcGIS/AgsLocator.js	(revision 0)
+++ lib/OpenLayers/Control/ArcGIS/AgsLocator.js	(revision 0)
@@ -0,0 +1,158 @@
+/**
+ * @requires OpenLayers/Control/ArcGIS/AgsControl.js 
+ *
+ * Class: OpenLayers.Control.AgsLocator
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control.AgsControl>
+ */
+OpenLayers.Control.AgsLocator = OpenLayers.Class(OpenLayers.Control.AgsControl, {
+	/**
+  	 * Property: multiple
+  	 *   {Boolean} restrict multiple selection.
+  	 *   should always be false because AgsLocator can only have one or zero geometry input
+  	 */
+  	multiple: false, 
+	  
+	/**
+	 * Property: asynchronous
+     *   {Boolean} whether to deal with synchronous gp task or asynchronous gp job
+     *   should always be false because AgsLocator is always synchronous
+	 */
+	asynchronous: false,
+	 
+	/**
+     * Property: reverseGeocoding
+     *   {boolean}  
+     *   default is false for geocoding otherwise 'true' for reverse geocoding 
+     */
+    reverseGeocoding: false,
+
+	/**
+     * Constructor: <OpenLayers.Control.ArcGIS.AgsLocator>
+     *
+     * Parameters:
+     *   url - {String} URL to the ArcGIS Server REST resource that represents a geocode service
+     *   layer - {OpenLayers.Layer.Vector} 
+     *   callbacks - {Array of functions}
+     *   options - {Object} 
+     */
+	initialize: function(url, layer, callbacks, options) {
+		// call parent initializer
+		OpenLayers.Control.AgsControl.prototype.initialize.apply(this, [url, layer, callbacks, options]);	 			 			 		 	
+		// overwrite this.taskParameters for AgsLocator control
+		this.taskParameters = {
+			'address': 		{},
+			'distance':		50, // in 'meters'
+			'outFields':	[],	
+			'location':		null			
+		};						
+		// set parser for AgsLocator results		
+		if(this.reverseGeocoding == true) { // reverse geocoding only returns one address candidate
+			this._resultsParser = {
+				'parser': this.adapter.parseAgsResults['addressCandidate'],
+				'context': this.adapter
+			};
+		} else {
+			this._resultsParser = { // geocoding may return multiple locations matching given address
+				'parser': this.adapter.parseAgsResults['addressCandidates'],
+				'context': this.adapter
+			};
+		}
+		// use dojo if defined
+		this.execute = this._bindFunction(this.execute, this);
+		// hitch execute, use dojo anyway		 
+		//this.execute = dojo.hitch(this, this.execute);
+	},
+	
+	/**
+     * API Method: execute 
+     *   Find location or address from an ArcGIS Server Rest Geocode service
+     *   
+     * Parameters:
+     *   olFeatures - {Array of OpenLayers.Feature.Vector}
+     *   taskParameters - {object}
+     *   callbacks - {Array of function} 
+     */
+	execute: function(olFeatures, taskParameters, callbacks) {						
+		// assemble parameters to execute Task
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+		OpenLayers.Util.applyDefaults(
+			_taskParameters,
+			this.taskParameters
+		);			
+		// merge additional callbacks
+		var _taskCallbacks = [];
+		_taskCallbacks = _taskCallbacks.concat(this.taskCallbacks);
+		_taskCallbacks = _taskCallbacks.concat(callbacks);
+		var _singleTaskCallback = this._createCallbacks(
+			this,
+			_taskCallbacks,
+			{}				 	    	
+		);	
+		
+		// callbacks for synchronous locator tasks
+		if (this.asynchronous == false) {
+			var agsLocator = new esri.tasks.Locator(this.url);
+			// make a single callback for esri.tasks.QueryTask
+			var _onExecuteComplete = this._createCallbacks(this, [this.onExecuteComplete], {
+				callback: _singleTaskCallback
+			});
+			// error callback for esri.tasks.QueryTask
+			var _onCompleteError = this.errback || null;
+			
+			if(this.reverseGeocoding == true) {
+				// set 'location' parameter
+				if(olFeatures[0] instanceof OpenLayers.Feature.Vector && olFeatures[0].geometry instanceof OpenLayers.Geometry.Point) {
+					_taskParameters['location'] = olFeatures[0].geometry;
+				}
+				if(!_taskParameters['location']) {
+            		OpenLayers.Console.error("...'location' missing or invalid...");
+ 					throw "...'location' missing or invalid...";
+            	}                	                            	
+            	if(!_taskParameters['distance']) {                        		
+            		OpenLayers.Console.error("...'distance' missing or invalid...");
+ 					throw "...'distance' missing or invalid...";
+            	}
+            	var agsLocation = null;                	
+            	agsLocation = this.adapter.encodeAgsLocation(_taskParameters['location']);                	
+				agsLocator.locationToAddress(agsLocation, _taskParameters['distance'], _onExecuteComplete, _onCompleteError);
+			} else {               	
+				if(!_taskParameters['address']) {
+            		OpenLayers.Console.error("...'address' missing or invalid...");
+ 					throw "...'address' missing or invalid...";
+            	}
+            	if(!_taskParameters['outFields']) {                        		
+            		OpenLayers.Console.error("...'outFields' missing or invalid...");
+ 					throw "...'outFields' missing or invalid...";
+            	}
+				agsLocator.addressToLocations(_taskParameters['address'], _taskParameters['outFields'], _onExecuteComplete, _onCompleteError);            	                         	 	                					
+			}
+		} else {
+			OpenLayers.Console.error("...'asynchronous' should always be set to 'false' for AgsLocator...");
+			throw "...'asynchronous' should always be set to 'false' for AgsLocator...";
+		} 					
+	},
+	
+	/**
+	 * APIMethod: setReverseGeocoding
+	 *   Toggle between geocode service and reverse geocoding
+	 *
+	 * Parameters: 
+	 *   reverseGeocoding - {boolean}
+	 *   'true' - reverse geocoding
+	 *   'false' - geocoding
+	 */
+	setReverseGeocoding: function(reverseGeocoding) {
+		if(reverseGeocoding == true) {
+			this.reverseGeocoding = true;						
+			this._resultsParser.parser = this.adapter.parseAgsResults['addressCandidate'];
+			//this.activate();
+		} else {
+			this.reverseGeocoding = false;							
+			this._resultsParser.parser = this.adapter.parseAgsResults['addressCandidates'];			
+		}
+	},
+
+	CLASS_NAME: "OpenLayers.Control.AgsLocator"
+});
\ No newline at end of file
Index: lib/OpenLayers/Control/ArcGIS/AgsQueryTask.js
===================================================================
--- lib/OpenLayers/Control/ArcGIS/AgsQueryTask.js	(revision 0)
+++ lib/OpenLayers/Control/ArcGIS/AgsQueryTask.js	(revision 0)
@@ -0,0 +1,122 @@
+/**
+ * @requires OpenLayers/Control/ArcGIS/AgsControl.js 
+ *
+ * Class: OpenLayers.Control.AgsQueryTask
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control.AgsControl>
+ */
+ 
+OpenLayers.Control.AgsQueryTask = OpenLayers.Class(OpenLayers.Control.AgsControl, {	
+	/**
+  	 * Property: multiple
+  	 *   {Boolean} restrict multiple selection.
+  	 *   should always be false because AgsQueryTask can only have one or zero geometry input
+  	 */
+  	 multiple: false, 
+	  
+	/**
+	 * Property: asynchronous
+     *   {Boolean} whether to deal with synchronous gp task or asynchronous gp job
+     *   should always be false because AgsQueryTask is always synchronous
+	 */
+	 asynchronous: false,
+	
+	/**
+     * Constructor: <OpenLayers.Control.ArcGIS.AgsQueryTask>
+     *
+     * Parameters:
+     *   url - {String} URL to the ArcGIS Server REST resource that represents a map service
+     *   layer - {OpenLayers.Layer.Vector} 
+     *   callbacks - {Array of functions}
+     *   options - {Object} 
+     */
+	initialize: function(url, layer, callbacks, options) {
+		// call parent initializer
+		OpenLayers.Control.AgsControl.prototype.initialize.apply(this, [url, layer, callbacks, options]);	 			 			 
+		 
+		// overwrite this.taskParameters for AgsQueryTask control
+		this.taskParameters = {
+			'geometry':				null,				
+			'outFields':			[0],
+			'returnGeometry':		true,
+			'outSpatialReference':	null,
+			'spatialRelationship':	null,
+			'text':					"",
+			'where':				""
+		};				
+		// set parser for AgsQueryTask results
+		this._resultsParser = {
+			'parser': this.adapter.parseAgsResults['featureSet'],
+			'context': this.adapter
+		};				
+		// use dojo if defined
+		this.execute = this._bindFunction(this.execute, this);
+		// hitch execute, use dojo anyway		 
+		//this.execute = dojo.hitch(this, this.execute);	
+	},
+	
+	/**
+     * API Method: execute 
+     *   Execute identify operation 
+     *   
+     * Parameters:
+     * 	 olFeatures - {Array of OpenLayers.Feature.Vector}	
+     *   taskParameters - {object}
+     *   callbacks - {Array of functions}
+     */
+	execute: function(olFeatures, taskParameters, callbacks) {			     	
+		// assemble parameters to execute Task
+		var _taskParameters = OpenLayers.Util.extend({}, taskParameters); 
+		OpenLayers.Util.applyDefaults(
+			_taskParameters,
+			this.taskParameters
+		);		
+		// set 'outSpatialReference' query parameter
+		if(this._isDefined(this.layer.map)) {
+			_taskParameters['outSpatialReference'] = this.layer.map['projection'] ? this.layer.map['projection'] : _taskParameters['outSpatialReference']; 
+		}		
+		// set 'geometry' query parameter
+		// multiple feature selection should always be disabled from AgsQueryTask control
+		//   in case there is more than features/geometries in olFeatures array. always take first one
+		if(olFeatures[0] instanceof OpenLayers.Feature.Vector) {
+			_taskParameters['geometry'] = olFeatures[0].geometry ? olFeatures[0].geometry : _taskParameters['geometry'];
+		} else {
+			OpenLayers.Console.error("...can not execute query task...input geometry is not valid...");
+   			throw "...can not execute query task...input geometry is not valid...";
+		}
+		 				
+		// merge additional callbacks
+		var _taskCallbacks = [];
+		_taskCallbacks = _taskCallbacks.concat(this.taskCallbacks);
+		_taskCallbacks = _taskCallbacks.concat(callbacks);
+		var _singleTaskCallback = this._createCallbacks(
+			this,
+			_taskCallbacks,
+			{}				 	    	
+		);	
+		
+		// callbacks for synchronous query tasks
+		if (this.asynchronous == false) {
+			var agsQueryTask = new esri.tasks.QueryTask(this.url);
+			// make a single callback for esri.tasks.QueryTask
+			var _onExecuteComplete = this._createCallbacks(this, [this.onExecuteComplete], {
+				callback: _singleTaskCallback
+			});
+			// error callback for esri.tasks.QueryTask
+			var _onCompleteError = this.errback || null;
+			try {
+				var agsQuery = this.adapter.encodeAgsQuery(_taskParameters);
+			} 
+			catch (e) {
+				throw e;
+			}
+			agsQueryTask.execute(agsQuery, _onExecuteComplete, _onCompleteError);
+		} else {
+			OpenLayers.Console.error("...'asynchronous' should always be set to 'false' for AgsQueryTask ...");
+			throw "...'asynchronous' should always be set to 'false' for AgsQueryTask ...";
+		} 				
+	},
+
+	CLASS_NAME: "OpenLayers.Control.AgsQueryTask"
+});
\ No newline at end of file
Index: lib/OpenLayers/Control/LayerSwitcher2.js
===================================================================
--- lib/OpenLayers/Control/LayerSwitcher2.js	(revision 0)
+++ lib/OpenLayers/Control/LayerSwitcher2.js	(revision 0)
@@ -0,0 +1,642 @@
+/* Copyright (c) 2006-2008 MetaCarta, Inc., published under the Clear BSD
+ * license.  See http://svn.openlayers.org/trunk/openlayers/license.txt for the
+ * full text of the license. */
+
+/** 
+ * @requires OpenLayers/Control.js
+ */
+
+/**
+ * Class: OpenLayers.Control.LayerSwitcher2
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control>
+ */
+OpenLayers.Control.LayerSwitcher2 = 
+  OpenLayers.Class(OpenLayers.Control, {
+
+    /**  
+     * Property: activeColor
+     * {String}
+     */
+    //activeColor: "darkblue",
+    activeColor: "#ffffff",
+    
+    /**  
+     * Property: layerStates 
+     * {Array(Object)} Basically a copy of the "state" of the map's layers 
+     *     the last time the control was drawn. We have this in order to avoid
+     *     unnecessarily redrawing the control.
+     */
+    layerStates: null,
+    
+
+  // DOM Elements
+  
+    /**
+     * Property: layersDiv
+     * {DOMElement} 
+     */
+    layersDiv: null,
+    
+    /** 
+     * Property: baseLayersDiv
+     * {DOMElement}
+     */
+    baseLayersDiv: null,
+
+    /** 
+     * Property: baseLayers
+     * {Array(<OpenLayers.Layer>)}
+     */
+    baseLayers: null,
+    
+    
+    /** 
+     * Property: dataLbl
+     * {DOMElement} 
+     */
+    dataLbl: null,
+    
+    /** 
+     * Property: dataLayersDiv
+     * {DOMElement} 
+     */
+    dataLayersDiv: null,
+
+    /** 
+     * Property: dataLayers
+     * {Array(<OpenLayers.Layer>)} 
+     */
+    dataLayers: null,
+
+
+    /** 
+     * Property: minimizeDiv
+     * {DOMElement} 
+     */
+    minimizeDiv: null,
+
+    /** 
+     * Property: maximizeDiv
+     * {DOMElement} 
+     */
+    maximizeDiv: null,
+    
+    /**
+     * APIProperty: ascending
+     * {Boolean} 
+     */
+    ascending: true,
+ 
+    /**
+     * Constructor: OpenLayers.Control.LayerSwitcher
+     * 
+     * Parameters:
+     * options - {Object}
+     */
+    initialize: function(options) {
+        OpenLayers.Control.prototype.initialize.apply(this, arguments);
+        this.layerStates = [];
+    },
+
+    /**
+     * APIMethod: destroy 
+     */    
+    destroy: function() {
+        
+        OpenLayers.Event.stopObservingElement(this.div);
+
+        OpenLayers.Event.stopObservingElement(this.minimizeDiv);
+        OpenLayers.Event.stopObservingElement(this.maximizeDiv);
+
+        //clear out layers info and unregister their events 
+        this.clearLayersArray("base");
+        this.clearLayersArray("data");
+        
+        this.map.events.un({
+            "addlayer": this.redraw,
+            "changelayer": this.redraw,
+            "removelayer": this.redraw,
+            "changebaselayer": this.redraw,
+            scope: this
+        });
+        
+        OpenLayers.Control.prototype.destroy.apply(this, arguments);
+    },
+
+    /** 
+     * Method: setMap
+     *
+     * Properties:
+     * map - {<OpenLayers.Map>} 
+     */
+    setMap: function(map) {
+        OpenLayers.Control.prototype.setMap.apply(this, arguments);
+
+        this.map.events.on({
+            "addlayer": this.redraw,
+            "changelayer": this.redraw,
+            "removelayer": this.redraw,
+            "changebaselayer": this.redraw,
+            scope: this
+        });
+    },
+
+    /**
+     * Method: draw
+     *
+     * Returns:
+     * {DOMElement} A reference to the DIV DOMElement containing the 
+     *     switcher tabs.
+     */  
+    draw: function() {
+        OpenLayers.Control.prototype.draw.apply(this);
+
+        // create layout divs
+        this.loadContents();
+
+        // set mode to minimize
+        if(!this.outsideViewport) {
+            this.minimizeControl();
+        }
+
+        // populate div with current info
+        this.redraw();    
+
+        return this.div;
+    },
+
+    /** 
+     * Method: clearLayersArray
+     * User specifies either "base" or "data". we then clear all the
+     *     corresponding listeners, the div, and reinitialize a new array.
+     * 
+     * Parameters:
+     * layersType - {String}  
+     */
+    clearLayersArray: function(layersType) {
+        var layers = this[layersType + "Layers"];
+        if (layers) {
+            for(var i=0; i < layers.length; i++) {
+                var layer = layers[i];
+                OpenLayers.Event.stopObservingElement(layer.inputElem);
+                OpenLayers.Event.stopObservingElement(layer.labelSpan);
+            }
+        }
+        this[layersType + "LayersDiv"].innerHTML = "";
+        this[layersType + "Layers"] = [];
+    },
+
+
+    /**
+     * Method: checkRedraw
+     * Checks if the layer state has changed since the last redraw() call.
+     * 
+     * Returns:
+     * {Boolean} The layer state changed since the last redraw() call. 
+     */
+    checkRedraw: function() {
+        var redraw = false;
+        if ( !this.layerStates.length ||
+             (this.map.layers.length != this.layerStates.length) ) {
+            redraw = true;
+        } else {
+            for (var i=0; i < this.layerStates.length; i++) {
+                var layerState = this.layerStates[i];
+                var layer = this.map.layers[i];
+                if ( (layerState.name != layer.name) || 
+                     (layerState.inRange != layer.inRange) || 
+                     (layerState.id != layer.id) || 
+                     (layerState.visibility != layer.visibility) ) {
+                    redraw = true;
+                    break;
+                }    
+            }
+        }    
+        return redraw;
+    },
+    
+    /** 
+     * Method: redraw
+     * Goes through and takes the current state of the Map and rebuilds the
+     *     control to display that state. Groups base layers into a 
+     *     radio-button group and lists each data layer with a checkbox.
+     *
+     * Returns: 
+     * {DOMElement} A reference to the DIV DOMElement containing the control
+     */  
+    redraw: function() {
+        //if the state hasn't changed since last redraw, no need 
+        // to do anything. Just return the existing div.
+        if (!this.checkRedraw()) { 
+            return this.div; 
+        } 
+
+        //clear out previous layers 
+        this.clearLayersArray("base");
+        this.clearLayersArray("data");
+        
+        var containsOverlays = false;
+        var containsBaseLayers = false;
+        
+        // Save state -- for checking layer if the map state changed.
+        // We save this before redrawing, because in the process of redrawing
+        // we will trigger more visibility changes, and we want to not redraw
+        // and enter an infinite loop.
+        this.layerStates = new Array(this.map.layers.length);
+        for (var i = 0; i < this.map.layers.length; i++) {
+            var layer = this.map.layers[i];
+            this.layerStates[i] = {
+                'name': layer.name, 
+                'visibility': layer.visibility,
+                'inRange': layer.inRange,
+                'id': layer.id
+            };
+        }    
+
+        var layers = this.map.layers.slice();
+        if (!this.ascending) { layers.reverse(); }
+        for( var i = 0; i < layers.length; i++) {
+            var layer = layers[i];
+            var baseLayer = layer.isBaseLayer;
+
+            if (layer.displayInLayerSwitcher) {
+
+                if (baseLayer) {
+                    containsBaseLayers = true;
+                } else {
+                    containsOverlays = true;
+                }    
+
+                // only check a baselayer if it is *the* baselayer, check data
+                //  layers if they are visible
+                var checked = (baseLayer) ? (layer == this.map.baseLayer)
+                                          : layer.getVisibility();
+    
+                // create input element
+                var inputElem = document.createElement("input");
+                inputElem.id = "input_" + layer.name;
+                inputElem.name = (baseLayer) ? "baseLayers" : layer.name;
+                inputElem.type = (baseLayer) ? "radio" : "checkbox";
+                inputElem.value = layer.name;
+                inputElem.checked = checked;
+                inputElem.defaultChecked = checked;
+
+                if (!baseLayer && !layer.inRange) {
+                    inputElem.disabled = true;
+                }
+                var context = {
+                    'inputElem': inputElem,
+                    'layer': layer,
+                    'layerSwitcher': this
+                };
+                OpenLayers.Event.observe(inputElem, "mouseup", 
+                    OpenLayers.Function.bindAsEventListener(this.onInputClick,
+                                                            context)
+                );
+                
+                // create span
+                var labelSpan = document.createElement("span");
+                if (!baseLayer && !layer.inRange) {
+                    //labelSpan.style.color = "gray";
+                    labelSpan.style.color = "#aaaaaa";
+                }
+                labelSpan.innerHTML = layer.name;
+                /*
+                labelSpan.style.verticalAlign = (baseLayer) ? "bottom" 
+                                                            : "baseline";
+                */
+                labelSpan.style.verticalAlign = "top";
+                OpenLayers.Event.observe(labelSpan, "click", 
+                    OpenLayers.Function.bindAsEventListener(this.onInputClick,
+                                                            context)
+                );
+                // create line break
+                var br = document.createElement("br");
+    
+                
+                var groupArray = (baseLayer) ? this.baseLayers
+                                             : this.dataLayers;
+                groupArray.push({
+                    'layer': layer,
+                    'inputElem': inputElem,
+                    'labelSpan': labelSpan
+                });
+                                                     
+    
+                var groupDiv = (baseLayer) ? this.baseLayersDiv
+                                           : this.dataLayersDiv;
+                groupDiv.appendChild(inputElem);
+                groupDiv.appendChild(labelSpan);
+                groupDiv.appendChild(br);
+            }
+        }
+
+        // if no overlays, dont display the overlay label
+        this.dataLbl.style.display = (containsOverlays) ? "" : "none";        
+        
+        // if no baselayers, dont display the baselayer label
+        this.baseLbl.style.display = (containsBaseLayers) ? "" : "none";        
+
+        return this.div;
+    },
+
+    /** 
+     * Method:
+     * A label has been clicked, check or uncheck its corresponding input
+     * 
+     * Parameters:
+     * e - {Event} 
+     *
+     * Context:  
+     *  - {DOMElement} inputElem
+     *  - {<OpenLayers.Control.LayerSwitcher>} layerSwitcher
+     *  - {<OpenLayers.Layer>} layer
+     */
+
+    onInputClick: function(e) {
+
+        if (!this.inputElem.disabled) {
+            if (this.inputElem.type == "radio") {
+                this.inputElem.checked = true;
+                this.layer.map.setBaseLayer(this.layer);
+            } else {
+                this.inputElem.checked = !this.inputElem.checked;
+                this.layerSwitcher.updateMap();
+            }
+        }
+        OpenLayers.Event.stop(e);
+    },
+    
+    /**
+     * Method: onLayerClick
+     * Need to update the map accordingly whenever user clicks in either of
+     *     the layers.
+     * 
+     * Parameters: 
+     * e - {Event} 
+     */
+    onLayerClick: function(e) {
+        this.updateMap();
+    },
+
+
+    /** 
+     * Method: updateMap
+     * Cycles through the loaded data and base layer input arrays and makes
+     *     the necessary calls to the Map object such that that the map's 
+     *     visual state corresponds to what the user has selected in 
+     *     the control.
+     */
+    updateMap: function() {
+
+        // set the newly selected base layer        
+        for(var i=0; i < this.baseLayers.length; i++) {
+            var layerEntry = this.baseLayers[i];
+            if (layerEntry.inputElem.checked) {
+                this.map.setBaseLayer(layerEntry.layer, false);
+            }
+        }
+
+        // set the correct visibilities for the overlays
+        for(var i=0; i < this.dataLayers.length; i++) {
+            var layerEntry = this.dataLayers[i];   
+            layerEntry.layer.setVisibility(layerEntry.inputElem.checked);
+        }
+
+    },
+
+    /** 
+     * Method: maximizeControl
+     * Set up the labels and divs for the control
+     * 
+     * Parameters:
+     * e - {Event} 
+     */
+    maximizeControl: function(e) {
+
+        //HACK HACK HACK - find a way to auto-size this layerswitcher
+        this.div.style.width = "20em";
+        this.div.style.height = "";
+
+        this.showControls(false);
+
+        if (e != null) {
+            OpenLayers.Event.stop(e);                                            
+        }
+    },
+    
+    /** 
+     * Method: minimizeControl
+     * Hide all the contents of the control, shrink the size, 
+     *     add the maximize icon
+     *
+     * Parameters:
+     * e - {Event} 
+     */
+    minimizeControl: function(e) {
+
+        this.div.style.width = "0px";
+        this.div.style.height = "0px";
+
+        this.showControls(true);
+
+        if (e != null) {
+            OpenLayers.Event.stop(e);                                            
+        }
+    },
+
+    /**
+     * Method: showControls
+     * Hide/Show all LayerSwitcher controls depending on whether we are
+     *     minimized or not
+     * 
+     * Parameters:
+     * minimize - {Boolean}
+     */
+    showControls: function(minimize) {
+
+        this.maximizeDiv.style.display = minimize ? "" : "none";
+        this.minimizeDiv.style.display = minimize ? "none" : "";
+
+        this.layersDiv.style.display = minimize ? "none" : "";
+    },
+    
+    /** 
+     * Method: loadContents
+     * Set up the labels and divs for the control
+     */
+    loadContents: function() {
+
+        //configure main div
+        this.div.style.position = "absolute";
+        this.div.style.top = "25px";
+        this.div.style.right = "0px";
+        this.div.style.left = "";
+        this.div.style.fontFamily = "sans-serif";
+        this.div.style.fontWeight = "bold";
+        this.div.style.marginTop = "3px";
+        this.div.style.marginLeft = "3px";
+        this.div.style.marginBottom = "3px";
+        this.div.style.fontSize = "smaller";   
+        //this.div.style.color = "white";
+        this.div.style.color = "#ffffff";   
+        this.div.style.backgroundColor = "transparent";
+    
+        OpenLayers.Event.observe(this.div, "mouseup", 
+            OpenLayers.Function.bindAsEventListener(this.mouseUp, this));
+        OpenLayers.Event.observe(this.div, "click",
+                      this.ignoreEvent);
+        OpenLayers.Event.observe(this.div, "mousedown",
+            OpenLayers.Function.bindAsEventListener(this.mouseDown, this));
+        OpenLayers.Event.observe(this.div, "dblclick", this.ignoreEvent);
+
+
+        // layers list div        
+        this.layersDiv = document.createElement("div");
+        this.layersDiv.id = "layersDiv";
+        this.layersDiv.style.paddingTop = "5px";
+        this.layersDiv.style.paddingLeft = "10px";
+        this.layersDiv.style.paddingBottom = "5px";
+        this.layersDiv.style.paddingRight = "75px";
+        this.layersDiv.style.backgroundColor = "#aaaaaa";
+        this.layersDiv.style.borderWidth = "thin 1px";
+        this.layersDiv.style.borderColor = "#ffffff";
+        this.layersDiv.style.borderStyle = "solid";        
+
+        // had to set width/height to get transparency in IE to work.
+        // thanks -- http://jszen.blogspot.com/2005/04/ie6-opacity-filter-caveat.html
+        //
+        this.layersDiv.style.width = "100%";
+        this.layersDiv.style.height = "100%";
+
+
+        this.baseLbl = document.createElement("div");
+        //this.baseLbl.innerHTML = OpenLayers.i18n("baseLayer");
+        this.baseLbl.style.marginTop = "3px";
+        this.baseLbl.style.marginLeft = "3px";
+        this.baseLbl.style.marginBottom = "3px";
+        
+        this.baseLayersDiv = document.createElement("div");
+        this.baseLayersDiv.style.paddingLeft = "10px";
+        /*OpenLayers.Event.observe(this.baseLayersDiv, "click", 
+            OpenLayers.Function.bindAsEventListener(this.onLayerClick, this));
+        */
+                     
+
+        this.dataLbl = document.createElement("div");
+        //this.dataLbl.innerHTML = OpenLayers.i18n("overlays");
+        this.dataLbl.style.marginTop = "3px";
+        this.dataLbl.style.marginLeft = "3px";
+        this.dataLbl.style.marginBottom = "3px";
+        
+        this.dataLayersDiv = document.createElement("div");
+        this.dataLayersDiv.style.paddingLeft = "10px";
+
+        if (this.ascending) {
+            this.layersDiv.appendChild(this.baseLbl);
+            this.layersDiv.appendChild(this.baseLayersDiv);
+            this.layersDiv.appendChild(this.dataLbl);
+            this.layersDiv.appendChild(this.dataLayersDiv);
+        } else {
+            this.layersDiv.appendChild(this.dataLbl);
+            this.layersDiv.appendChild(this.dataLayersDiv);
+            this.layersDiv.appendChild(this.baseLbl);
+            this.layersDiv.appendChild(this.baseLayersDiv);
+        }    
+ 
+        this.div.appendChild(this.layersDiv);
+
+        // don't like the round shape border of LayerSwitcher control
+        /*
+        OpenLayers.Rico.Corner.round(this.div, {corners: "tl bl",
+                                        bgColor: "transparent",
+                                        color: this.activeColor,
+                                        blend: false});
+		*/
+		
+        OpenLayers.Rico.Corner.changeOpacity(this.layersDiv, 0.8);
+
+        var imgLocation = OpenLayers.Util.getImagesLocation();
+        var sz = new OpenLayers.Size(18,18);        
+
+        // maximize button div
+        var img = imgLocation + 'more/layer-switcher-maximize2.png';
+        this.maximizeDiv = OpenLayers.Util.createAlphaImageDiv(
+                                    "OpenLayers_Control_MaximizeDiv", 
+                                    null, 
+                                    sz, 
+                                    img, 
+                                    "absolute");
+        this.maximizeDiv.style.top = "5px";
+        this.maximizeDiv.style.right = "0px";
+        this.maximizeDiv.style.left = "";
+        this.maximizeDiv.style.display = "none";
+        OpenLayers.Event.observe(this.maximizeDiv, "click", 
+            OpenLayers.Function.bindAsEventListener(this.maximizeControl, this)
+        );
+        
+        this.div.appendChild(this.maximizeDiv);
+
+        // minimize button div
+        var img = imgLocation + 'more/layer-switcher-minimize2.png';
+        var sz = new OpenLayers.Size(18,18);        
+        this.minimizeDiv = OpenLayers.Util.createAlphaImageDiv(
+                                    "OpenLayers_Control_MinimizeDiv", 
+                                    null, 
+                                    sz, 
+                                    img, 
+                                    "absolute");
+        this.minimizeDiv.style.top = "5px";
+        this.minimizeDiv.style.right = "0px";
+        this.minimizeDiv.style.left = "";
+        this.minimizeDiv.style.display = "none";
+        OpenLayers.Event.observe(this.minimizeDiv, "click", 
+            OpenLayers.Function.bindAsEventListener(this.minimizeControl, this)
+        );
+
+        this.div.appendChild(this.minimizeDiv);
+    },
+    
+    /** 
+     * Method: ignoreEvent
+     * 
+     * Parameters:
+     * evt - {Event} 
+     */
+    ignoreEvent: function(evt) {
+        OpenLayers.Event.stop(evt);
+    },
+
+    /** 
+     * Method: mouseDown
+     * Register a local 'mouseDown' flag so that we'll know whether or not
+     *     to ignore a mouseUp event
+     * 
+     * Parameters:
+     * evt - {Event}
+     */
+    mouseDown: function(evt) {
+        this.isMouseDown = true;
+        this.ignoreEvent(evt);
+    },
+
+    /** 
+     * Method: mouseUp
+     * If the 'isMouseDown' flag has been set, that means that the drag was 
+     *     started from within the LayerSwitcher control, and thus we can 
+     *     ignore the mouseup. Otherwise, let the Event continue.
+     *  
+     * Parameters:
+     * evt - {Event} 
+     */
+    mouseUp: function(evt) {
+        if (this.isMouseDown) {
+            this.isMouseDown = false;
+            this.ignoreEvent(evt);
+        }
+    },
+
+    CLASS_NAME: "OpenLayers.Control.LayerSwitcher2"
+});
Index: lib/OpenLayers/Control/PanZoom2.js
===================================================================
--- lib/OpenLayers/Control/PanZoom2.js	(revision 0)
+++ lib/OpenLayers/Control/PanZoom2.js	(revision 0)
@@ -0,0 +1,280 @@
+/* Copyright (c) 2006-2008 MetaCarta, Inc., published under the Clear BSD
+ * license.  See http://svn.openlayers.org/trunk/openlayers/license.txt for the
+ * full text of the license. */
+
+
+/**
+ * @requires OpenLayers/Control.js
+ */
+
+/**
+ * Class: OpenLayers.Control.PanZoom2
+ * The PanZoom2 is a visible control, composed of a
+ * <OpenLayers.Control.PanPanel> and a <OpenLayers.Control.ZoomPanel>. By
+ * default it is drawn in the upper left corner of the map.
+ *
+ * Inherits from:
+ *  - <OpenLayers.Control>
+ */
+OpenLayers.Control.PanZoom2 = OpenLayers.Class(OpenLayers.Control, {
+
+    /** 
+     * APIProperty: slideFactor
+     * {Integer} Number of pixels by which we'll pan the map in any direction 
+     *     on clicking the arrow buttons.  If you want to pan by some ratio
+     *     of the map dimensions, use <slideRatio> instead.
+     */
+    slideFactor: 50,
+
+    /** 
+     * APIProperty: slideRatio
+     * {Number} The fraction of map width/height by which we'll pan the map            
+     *     on clicking the arrow buttons.  Default is null.  If set, will
+     *     override <slideFactor>. E.g. if slideRatio is .5, then the Pan Up
+     *     button will pan up half the map height. 
+     */
+    slideRatio: null,
+
+    /** 
+     * Property: buttons
+     * {Array(DOMElement)} Array of Button Divs 
+     */
+    buttons: null,
+
+    /** 
+     * Property: position
+     * {<OpenLayers.Pixel>} 
+     */
+    position: null,
+
+    /**
+     * Constructor: OpenLayers.Control.PanZoom2
+     * 
+     * Parameters:
+     * options - {Object}
+     */
+    initialize: function(options) {
+        this.position = new OpenLayers.Pixel(OpenLayers.Control.PanZoom2.X,
+                                             OpenLayers.Control.PanZoom2.Y);
+        OpenLayers.Control.prototype.initialize.apply(this, arguments);
+    },
+
+    /**
+     * APIMethod: destroy
+     */
+    destroy: function() {
+        OpenLayers.Control.prototype.destroy.apply(this, arguments);
+        this.removeButtons();
+        this.buttons = null;
+        this.position = null;
+    },
+
+    /**
+     * Method: draw
+     *
+     * Parameters:
+     * px - {<OpenLayers.Pixel>} 
+     * 
+     * Returns:
+     * {DOMElement} A reference to the container div for the PanZoom2 control.
+     */
+    draw: function(px) {
+        // initialize our internal div
+        OpenLayers.Control.prototype.draw.apply(this, arguments);
+        px = this.position;
+
+        // place the controls
+        this.buttons = [];
+
+        var sz = new OpenLayers.Size(15,15);
+        //var centered = new OpenLayers.Pixel(px.x+sz.w+1, px.y);
+		
+		var upleft_px = new OpenLayers.Pixel(px.x, px.y);
+		this._addButton("panupleft", "/more/up-left.png", upleft_px, sz);		
+        
+        var up_px = new OpenLayers.Pixel(px.x+sz.w+1, px.y);
+        this._addButton("panup", "/more/up.png", up_px, sz);
+        
+        var upright_px = new OpenLayers.Pixel(px.x+(sz.w+1)*2, px.y);
+        this._addButton("panupright", "/more/up-right.png", upright_px, sz);
+        
+      	var left_px = new OpenLayers.Pixel(px.x, px.y+sz.h+1);
+        this._addButton("panleft", "/more/left.png", left_px, sz);
+        
+        var empty_px = new OpenLayers.Pixel(px.x+sz.w+1, px.y+sz.h+1);
+        this._addButton("empty", "/more/empty.png", empty_px, sz);
+        
+        var right_px = new OpenLayers.Pixel(px.x+(sz.w+1)*2, px.y+sz.h+1);
+        this._addButton("panright", "/more/right.png", right_px, sz);
+        
+        var downleft_px = new OpenLayers.Pixel(px.x, px.y+(sz.h+1)*2);
+		this._addButton("pandownleft", "/more/down-left.png", downleft_px, sz);
+		
+		var down_px = new OpenLayers.Pixel(px.x+sz.w+1, px.y+(sz.h+1)*2);
+        this._addButton("pandown", "/more/down.png", down_px, sz);
+        
+        var downright_px = new OpenLayers.Pixel(px.x+(sz.w+1)*2, px.y+(sz.h+1)*2);
+		this._addButton("pandownright", "/more/down-right.png", downright_px, sz);
+        
+        var zoomin_px = new OpenLayers.Pixel(px.x+sz.w+1, px.y+(sz.h+1)*4);
+        this._addButton("zoomin", "/more/zoom-in.png", zoomin_px, sz);
+        
+        var fullextent_px = new OpenLayers.Pixel(px.x+sz.w+1, px.y+(sz.h+1)*5);
+        this._addButton("zoomworld", "/more/full-extent.png", fullextent_px, sz);
+        
+        var zoomout_px = new OpenLayers.Pixel(px.x+sz.w+1, px.y+(sz.h+1)*6);
+        this._addButton("zoomout", "/more/zoom-out.png", zoomout_px, sz);
+          
+        return this.div;
+    },
+    
+    /**
+     * Method: _addButton
+     * 
+     * Parameters:
+     * id - {String} 
+     * img - {String} 
+     * xy - {<OpenLayers.Pixel>} 
+     * sz - {<OpenLayers.Size>} 
+     * 
+     * Returns:
+     * {DOMElement} A Div (an alphaImageDiv, to be precise) that contains the
+     *     image of the button, and has all the proper event handlers set.
+     */
+    _addButton:function(id, img, xy, sz) {
+        var imgLocation = OpenLayers.Util.getImagesLocation() + img;
+        var btn = OpenLayers.Util.createAlphaImageDiv(
+                                    this.id + "_" + id, 
+                                    xy, sz, imgLocation, "absolute");
+
+        //we want to add the outer div
+        this.div.appendChild(btn);
+
+        OpenLayers.Event.observe(btn, "mousedown", 
+            OpenLayers.Function.bindAsEventListener(this.buttonDown, btn));
+        OpenLayers.Event.observe(btn, "dblclick", 
+            OpenLayers.Function.bindAsEventListener(this.doubleClick, btn));
+        OpenLayers.Event.observe(btn, "click", 
+            OpenLayers.Function.bindAsEventListener(this.doubleClick, btn));
+        btn.action = id;
+        btn.map = this.map;
+    
+        if(!this.slideRatio){
+            var slideFactorPixels = this.slideFactor;
+            var getSlideFactor = function() {
+                return slideFactorPixels;
+            };
+        } else {
+            var slideRatio = this.slideRatio;
+            var getSlideFactor = function(dim) {
+                return this.map.getSize()[dim] * slideRatio;
+            };
+        }
+
+        btn.getSlideFactor = getSlideFactor;
+
+        //we want to remember/reference the outer div
+        this.buttons.push(btn);
+        return btn;
+    },
+    
+    /**
+     * Method: _removeButton
+     * 
+     * Parameters:
+     * btn - {Object}
+     */
+    _removeButton: function(btn) {
+        OpenLayers.Event.stopObservingElement(btn);
+        btn.map = null;
+        this.div.removeChild(btn);
+        OpenLayers.Util.removeItem(this.buttons, btn);
+    },
+    
+    /**
+     * Method: removeButtons
+     */
+    removeButtons: function() {
+        for(var i=this.buttons.length-1; i>=0; --i) {
+            this._removeButton(this.buttons[i]);
+        }
+    },
+    
+    /**
+     * Method: doubleClick
+     *
+     * Parameters:
+     * evt - {Event} 
+     *
+     * Returns:
+     * {Boolean}
+     */
+    doubleClick: function (evt) {
+        OpenLayers.Event.stop(evt);
+        return false;
+    },
+    
+    /**
+     * Method: buttonDown
+     *
+     * Parameters:
+     * evt - {Event} 
+     */
+    buttonDown: function (evt) {
+        if (!OpenLayers.Event.isLeftClick(evt)) {
+            return;
+        }
+
+        switch (this.action) {
+            case "panup": 
+                this.map.pan(0, -this.getSlideFactor("h"));
+                break;
+            case "pandown": 
+                this.map.pan(0, this.getSlideFactor("h"));
+                break;
+            case "panleft": 
+                this.map.pan(-this.getSlideFactor("w"), 0);
+                break;
+            case "panright": 
+                this.map.pan(this.getSlideFactor("w"), 0);
+                break;
+			case "panupleft": 
+                this.map.pan(-this.getSlideFactor("w"), -this.getSlideFactor("h"));
+                break;
+            case "pandownleft": 
+                this.map.pan(-this.getSlideFactor("w"), this.getSlideFactor("h"));
+                break;
+            case "panupright": 
+                this.map.pan(this.getSlideFactor("w"), -this.getSlideFactor("h"));
+                break;
+            case "pandownright": 
+                this.map.pan(this.getSlideFactor("w"), this.getSlideFactor("h"));
+                break;
+            case "zoomin": 
+                this.map.zoomIn(); 
+                break;
+            case "zoomout": 
+                this.map.zoomOut(); 
+                break;
+            case "zoomworld": 
+                this.map.zoomToMaxExtent(); 
+                break;
+        }
+
+        OpenLayers.Event.stop(evt);
+    },
+
+    CLASS_NAME: "OpenLayers.Control.PanZoom2"
+});
+
+/**
+ * Constant: X
+ * {Integer}
+ */
+OpenLayers.Control.PanZoom2.X = 4;
+
+/**
+ * Constant: Y
+ * {Integer}
+ */
+OpenLayers.Control.PanZoom2.Y = 4;
Index: lib/OpenLayers/Format/AgsJsAdapter.js
===================================================================
--- lib/OpenLayers/Format/AgsJsAdapter.js	(revision 0)
+++ lib/OpenLayers/Format/AgsJsAdapter.js	(revision 0)
@@ -0,0 +1,2125 @@
+/**
+ * @requires OpenLayers/Format.js
+ *
+ * Class OpenLayers.Format.AgsJsAdapter
+ *
+ * converting between ArcGIS JavaScript library model and OpenLayers model
+ */
+OpenLayers.Format.AgsJsAdapter = (function() {	
+	
+	/*************************************************************************************
+     * STATIC ATTRIBUTES
+     *************************************************************************************/
+		
+	/**
+	 * _AGS_UNITS - constant variable representing unit
+	 *
+	 * reference: http://edndoc.esri.com/arcobjects/9.2/ComponentHelp/esriGeometry/esriSRUnitType.htm
+     *   or http://edndoc.esri.com/arcobjects/9.2/ComponentHelp/esriGeometry/esriSRUnit2Type.htm
+	 */
+	var _AGS_UNITS = {
+		'UNIT_METER': 		9001,
+		'UNIT_FOOT': 		9002, 
+		'UNIT_KILOMETER': 	9036,
+		'UNIT_DEGREE':		9102
+		// TODO: add more if necessary
+	};
+	
+	/**
+	 * _AGS_SPATIALRELATIONSHIP - constant variable representing spatial relationship
+	 */
+	var _AGS_SPATIALRELATIONSHIP = {
+		'INTERSECTS': 			"esriSpatialRelIntersects",
+        'CONTAINS': 			"esriSpatialRelContains",
+        'CROSSES': 				"esriSpatialRelCrosses",
+        'ENVELOPE_INTERSECTS': 	"esriSpatialRelEnvelopeIntersects",
+        'INDEX_INTERSECTS': 	"esriSpatialRelIndexIntersects",
+        'OVERLAPS': 			"esriSpatialRelOverlaps",
+        'TOUCHES': 				"esriSpatialRelTouches",
+        'WITHIN': 				"esriSpatialRelWithin"
+	};
+	
+	/**
+	 * _AGS_GEOMETRY_SPATIALRELATIONSHIP - constant variable representing geometry spatial relationship
+	 */
+	var _AGS_GEOMETRY_SPATIALRELATIONSHIP = {
+		'CROSS': 					"esriGeometryRelationCross",
+        'DISJOINT':	 				"esriGeometryRelationDisjoint",
+        'IN':	 					"esriGeometryRelationIn",
+        'INTERIOR_INTERSECTION': 	"esriGeometryRelationInteriorIntersection",
+        'INTERSECTION': 			"esriGeometryRelationIntersection",
+        'LINE_COINCIDENCE': 		"esriGeometryRelationLineCoincidence",
+        'LINE_TOUCHE': 				"esriGeometryRelationLineTouch",
+        'OVERLAP': 					"esriGeometryRelationOverlap",
+		'POINT_TOUCH': 				"esriGeometryRelationPointTouch",
+		'RELATION': 				"esriGeometryRelationRelation",
+		'TOUCH': 					"esriGeometryRelationTouch",
+		'WITHIN': 					"esriGeometryRelationWithin",
+	};
+
+	/**
+	 * _UNMATCH_AGS_WKID - wkid of 'spheric mecator' is different in ArcGIS and OpenLayers  
+	 *   "900913" in OpenLayers and "102113" in ArcGIS 
+	 */
+	var _UNMATCH_AGS_WKID = {
+		'900913': "102113"
+		// TODO: add more if necessary
+	};
+	
+	/**
+	 * _UNMATCH_OL_WKID - wkid of 'spheric mecator' is different in ArcGIS and OpenLayers  
+	 *   "900913" in OpenLayers and "102113" in ArcGIS
+	 */
+	var _UNMATCH_OL_WKID = {
+		'102113': "900913" 
+		// add more
+	};
+	
+	/**
+	 * _OL_GEOMETRY_MAP - map a OpenLayers geometry type to a general geometry type
+	 */
+	var _OL_GEOMETRY_MAP = {
+		'OpenLayers.Geometry.Point' 			: "point",
+   		'OpenLayers.Geometry.MultiLineString' 	: "polyline",
+   		'OpenLayers.Geometry.Polygon' 			: "polygon",
+   		'OpenLayers.Bounds' 					: "extent"
+	};
+	
+	/**
+	 * _OL_AGS_STYLE_MAP - map an OpenLayers geometry type to a AgsJs symbol
+	 */
+	var _OL_AGS_STYLE_MAP = {		
+		'OpenLayers.Geometry.Point' 			: "SimpleMarkerSymbol",
+   		'OpenLayers.Geometry.MultiLineString' 	: "SimpleLineSymbol",
+   		'OpenLayers.Geometry.Polygon' 			: "SimpleFillSymbol",
+   		'OpenLayers.Bounds' 					: "SimpleFillSymbol",
+		'simplemarkersymbol'					: "SimpleMarkerSymbol",
+		'picturemarkersymbol'					: "PictureMarkerSymbol",
+		'simplelinesymbol'						: "SimpleLineSymbol",
+		'cartographiclinesymbol'				: "CartographicLineSymbol",
+		'picturefillsymbol'						: "PictureFillSymbol",
+		
+	};
+	
+	/**
+	 * _OL_AGS_SIMPLE_MARKER_MAP - map an OpenLayers marker symbol to an AGS JS marker symbol
+	 */
+	// OpenLayers seems only support circle at least for SVG
+	/*
+	var _OL_AGS_SIMPLE_MARKERSYMBOL_MAP = {
+		// TODO:
+		''										: "STYLE_CIRCLE",
+		''										: "STYLE_CROSS",
+		''										: "STYLE_DIAMOND",
+		''										: "STYLE_SQUARE",
+		''										: "STYLE_X"
+	};
+	*/
+	
+	/**
+	 * _AGS_OL_SIMPLE_MARKER_MAP - map an AGS JS marker symbol to an OpenLayers marker symbol 
+	 */
+	// OpenLayers seems only support circle at least for SVG
+	/*
+	var _AGS_OL_SIMPLE_MARKERSYMBOL_MAP = {
+		// TODO:
+		'STYLE_CIRCLE'							: "",
+		'STYLE_CROSS'							: "",
+		'STYLE_DIAMOND'							: "",
+		'STYLE_SQUARE'							: "",
+		'STYLE_X'								: ""
+	};
+	*/
+	/**
+	 * _OL_AGS_SIMPLE_LINESYMBOL_MAP - map an OpenLayers line symbol to an AGS JS line symbol
+	 */
+	var _OL_AGS_SIMPLE_LINESYMBOL_MAP = {
+		'dash'									: "STYLE_DASH",
+		'dashdot'								: "STYLE_DASHDOT",
+		'longdashdot'							: "STYLE_DASHDOTDOT",
+		'dot'									: "STYLE_DOT",
+		'solid'									: "STYLE_NULL",
+		'solid'									: "STYLE_SOLID"
+	};
+	
+	/**
+	 * _AGS_OL_SIMPLE_LINESYMBOL_MAP - map an AGS JS line symbol to an OpenLayers line symbol 
+	 */
+	var _AGS_OL_SIMPLE_LINESYMBOL_MAP = {		
+		'STYLE_DASH'							: "dash",
+		'STYLE_DASHDOT'							: "dashdot",
+		'STYLE_DASHDOTDOT'						: "longdashdot",
+		'STYLE_DOT'								: "dot",
+		'STYLE_NULL'							: "solid",
+		'STYLE_SOLID'							: "solid"
+	};
+	
+	/**
+	 * _OL_AGS_SIMPLE_FILLSYMBOL_MAP
+	 *   different fill styles are not supported in OpenLayers 
+	 */
+	/*
+	var _OL_AGS_SIMPLE_LINESYMBOL_MAP = {
+		''										: "STYLE_BACKWARD_DIAGONAL",
+		''										: "STYLE_CROSS",
+		''										: "STYLE_DIAGONAL_CROSS",
+		''										: "STYLE_FORWARD_DIAGONAL",
+		''										: "STYLE_HORIZONTAL",
+		''										: "STYLE_NULL",
+		''										: "STYLE_SOLID",
+		''										: "STYLE_VERTICAL",
+	};
+	*/
+	
+	/**
+	 * _AGS_OL_SIMPLE_FILLSYMBOL_MAP
+	 *   different fill styles are not supported in OpenLayers 
+	 */
+	/*
+	var _AGS_OL_SIMPLE_LINESYMBOL_MAP = {		
+		'STYLE_BACKWARD_DIAGONAL'				: "",
+		'STYLE_CROSS'							: "",
+		'STYLE_DIAGONAL_CROSS'					: "",
+		'STYLE_FORWARD_DIAGONAL'				: "",
+		'STYLE_HORIZONTAL'						: "",
+		'STYLE_NULL'							: "",
+		'STYLE_SOLID'							: "",
+		'STYLE_VERTICAL'						: "",
+	};
+	*/
+	
+	/*************************************************************************************
+     * Utility methods from OpenLayers.Util.AgsUtil
+     *************************************************************************************/
+	var _isDefined = OpenLayers.Util.AgsUtil.isDefined;
+	var _isNumber = OpenLayers.Util.AgsUtil.isNumber;
+	var _isBoolean = OpenLayers.Util.AgsUtil.isBoolean;
+	var _isAgsGeometry = OpenLayers.Util.AgsUtil.isAgsGeometry;
+	var _isOLGeometry = OpenLayers.Util.AgsUtil.isOLGeometry;
+	var _isSameOLPoint = OpenLayers.Util.AgsUtil.isSameOLPoint;
+	
+	/*************************************************************************************
+     * STATIC PRIVATE METHODS
+     *************************************************************************************/
+
+	/**
+	 * Static method: _toAgsWkid
+	 *
+	 * Get wkid in ArcGIS JavaScript from a wkid in OpenLayers
+	 */
+	function _toAgsWkid(olWkid) {
+	    if(_isDefined(_UNMATCH_AGS_WKID[olWkid])) {
+	   		return _UNMATCH_AGS_WKID[olWkid];
+	   	} else {
+	   		return olWkid;
+	   	}
+    };
+	
+	/**
+	 * Static method: _toOlWkid
+	 *
+	 * Get wkid in OpenLayers from a wkid in ArcGIS JavaScript
+	 */  	   
+    function _toOlWkid(agsWkid) {
+    	if(_isDefined(_UNMATCH_OL_WKID[agsWkid])) {
+    		return _UNMATCH_OL_WKID[agsWkid];
+    	} else {
+    		return agsWkid;
+    	}
+    };	
+	
+	/**
+	 * Static method: bind a function to a specific context/scope
+	 *     if dojo is defined, use dojo.hitch(), otherwise use OpenLayers.Function.bind()
+	 */
+	function __bindFunction(func, scope) {
+		if(dojo) {
+			//OpenLayers.Console.log("...dojo found...use dojo.hitch() to bind function to scope...");
+			return dojo.hitch(scope, func);
+		} else {
+			OpenLayers.Console.log("...dojo not found...use OpenLayers.Function.bind() to bind function to scope...");
+			return OpenLayers.Function.bind(func, scope);
+		}
+	}
+	
+	/**
+	 * Return OpenLayers.Format.AgsJsAdapter constructor
+	 */
+	return function(config) {
+		
+		/**
+		 * API Properties: config - object
+		 */
+		this.config = {
+			// OpenLayers.Geometry.* does not have a spatial reference (wkid), use this config parameter
+			//   to encode an AgsJs geometry from an OpenLayers.Geometry.* if spatial reference is unknown 
+			'defaultEncodeWkid': "EPSG:900913"
+		};		        		
+	    
+	    /*************************************************************************************
+     	 * PUBLIC INSTANCE METHODS
+     	 *************************************************************************************/
+
+	    /**
+	     * APIMethod: parseAgsGeometry
+	     *   convert esri.geometry.* object to OpenLayers.Geometry.*
+	     *
+	     * Parameters:
+	     *   agsGeometry - (esri.geometry.*) object 
+		 *
+	     * Returns: 
+	     *   (OpenLayers.Geometry.*) object 
+	     */    
+	    this.parseAgsGeometry = {
+	    	/**
+	    	 * APIMethod: parseAgsGeometry.point
+	    	 *   parses an esri.geometry.Point object to an OpenLayers.Geometry.Point
+	    	 *
+	    	 * Parameters:
+	     	 *   agsPoint - {esri.geometry.Point} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {OpenLayers.Geometry.Point} object 	
+	    	 */
+	    	"point": function(agsPoint) {	    		
+	    		var olPoint = null;
+	    		if(agsPoint instanceof esri.geometry.Point && _isNumber(agsPoint.x) && _isNumber(agsPoint.y)) {	    				    			
+	    			olPoint = new OpenLayers.Geometry.Point(agsPoint.x, agsPoint.y);	    			
+	    			return olPoint;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.point...invalid esri.geometry.Point...");
+	    			throw "...AgsAdapter.parseAgsGeometry.point...invalid esri.geometry.Point..." + agsPoint;
+	    		}	    		
+	    	},
+	    	
+	    	/**
+	   		 * a coordinate in esri.geometry.Polyline or esri.geometry.Polygon is an array [x,y]
+	   		 *  
+	   		 * APIMethod: parseAgsGeometry.coordinate
+	   	 	 *   parses array [x,y] to an OpenLayers.Geometry.Point object
+	   	 	 *
+	   	 	 * Parameters:
+	    	 *   agsCoordinate - {Array} [x,y] 
+	 	 	 *
+	    	 * Returns: 
+	     	 *   {OpenLayers.Geometry.Point} object
+	   		 */
+	    	"coordinate": function(agsCoordinate) {
+	    		var olCoordinate = null;
+	    		if(agsCoordinate instanceof Array && _isNumber(agsCoordinate[0]) && _isNumber(agsCoordinate[1])) {	    			
+	    			olCoordinate = new OpenLayers.Geometry.Point(agsCoordinate[0], agsCoordinate[1]);
+	    			return olCoordinate;	
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.coordinate...invalid array [x, y]...");
+	    			throw "...AgsAdapter.parseAgsGeometry.coordinate...invalid array [x, y]..." + agsCoordinate;
+	    		}	    		
+	    	},
+	    	
+	    	/**
+	   		 * a path in esri.geometry.Polyline is an array of [x,y]
+	   		 *  
+	   		 * APIMethod: parseAgsGeometry.path
+	   	 	 *   parses an array of array [x,y] to an OpenLayers.Geometry.LineString object
+	   	 	 *
+	   	 	 * Parameters:
+	    	 *   agsPointArray - {Array of Array} Array of [x,y] 
+	 	 	 *
+	    	 * Returns: 
+	     	 *   {OpenLayers.Geometry.LineString} object
+	   		 */
+	    	"path": function(agsPointArray) {
+	    		var olLineString = null;
+				if(agsPointArray instanceof Array) {
+	    			var olPoints = [];
+	    			for(var i=0; i<agsPointArray.length; i++) {    				
+	    				var olPoint = null;
+	    				try {
+	    					olPoint = this.parseAgsGeometry['coordinate'].apply(this, [agsPointArray[i]]);    				
+	    					olPoints.push(olPoint);
+	    				} catch(e) {
+	    					throw e;
+	    				}
+	    			}
+	    			olLineString = new OpenLayers.Geometry.LineString(olPoints);
+	    			return olLineString;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.path...invalid array of coordinates...");
+	    			throw "...AgsAdapter.parseAgsGeometry.path...invalid array of array [x,y]..." + agsPointArray;
+	    		}	    		
+	    	},
+	    	
+	    	/**
+	   		 * a ring in esri.geometry.Polygon is an array of [x,y]
+	   		 *  
+	   		 * APIMethod: parseAgsGeometry.ring
+	   	 	 *   parses an array of array [x,y] to an OpenLayers.Geometry.LinearRing object
+	   	 	 *
+	   	 	 * Parameters:
+	    	 *   agsPointArray - {Array of Array} Array of [x,y] 
+	 	 	 *
+	    	 * Returns: 
+	     	 *   {OpenLayers.Geometry.LinearRing} object
+	   		 */
+	    	"ring": function(agsPointArray) {	    		
+				// check if it is a closed ring, otherwise throws exception
+				var beginPoint = agsPointArray[0];
+				var endPoint = agsPointArray[agsPointArray.length-1];
+				if(beginPoint[0] != endPoint[0] || beginPoint[1] != endPoint[1]) {
+					OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.ring...not a closed ring...");
+	    			throw "...AgsAdapter.parseAgsGeometry.ring...not a closed ring..." + agsPointArray;
+				}
+				
+				var olLinearRing = null;
+				var olLineString = null;
+				try {
+					olLineString = this.parseAgsGeometry['path'].apply(this, [agsPointArray]);										
+	    		} catch(e) {
+	    			throw e;
+	    		}
+	    		olLinearRing = new OpenLayers.Geometry.LinearRing(olLineString.components);
+	    		return olLinearRing;
+	    	},
+	    	
+	    	/**
+	    	 * APIMethod: parseAgsGeometry.polyline
+	    	 *   parses an esri.geometry.Polyline object to an OpenLayers.Geometry.MultiLineString
+	    	 *
+	    	 * Parameters:
+	     	 *   agsPolyline - {esri.geometry.Polyline} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {OpenLayers.Geometry.MultiLineString} object 	
+	    	 */
+	    	"polyline": function(agsPolyline) {
+	    		var olMultiLineString = null;    		
+	    		if(_isDefined(agsPolyline.paths) && agsPolyline.paths instanceof Array) {
+	    			var paths = agsPolyline.paths;
+	    			var lineStrings = [];
+	    			for(var i=0; i<paths.length; i++) {	    				
+	    				try {
+	    					var lineString = this.parseAgsGeometry['path'].apply(this, [paths[i]]);
+	    					lineStrings.push(lineString);
+	    				} catch(e) {
+	    					throw e;
+	    				}
+	    			}
+	    			olMultiLineString = new OpenLayers.Geometry.MultiLineString(lineStrings);
+	    			return olMultiLineString;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.polyline...invalid esri.geometry.Polyline...");
+	    			throw "...AgsAdapter.parseAgsGeometry.polyline...invalid esri.geometry.Polyline..." + agsPolyline;
+	    		}	    		
+	    	},
+	    	
+	    	/**
+	    	 * APIMethod: parseAgsGeometry.polygon
+	    	 *   convert an esri.geometry.Polygon object to an OpenLayers.Geometry.Polygon
+	    	 *
+	    	 * Parameters:
+	     	 *   agsPolygon - {esri.geometry.Polygon} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {OpenLayers.Geometry.Polygon} object 	
+	    	 */
+	    	"polygon": function(agsPolygon) {
+	    		var olPolygon = null;
+	    		if(_isDefined(agsPolygon.rings) && agsPolygon.rings instanceof Array) {
+	    			var rings = agsPolygon.rings;
+	    			var linearRings = [];
+	    			for(var i=0; i<rings.length; i++) {
+	    				try {
+	    					var linearRing = this.parseAgsGeometry['ring'].apply(this, [rings[i]]);
+	    					linearRings.push(linearRing);
+	    				} catch(e) {
+	    					throw e;
+	    				}
+	    			}
+	    			olPolygon = new OpenLayers.Geometry.Polygon(linearRings);    			
+	    			return olPolygon;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.polygon...invalid esri.geometry.Polygon...");
+	    			throw "...AgsAdapter.parseAgsGeometry.polygon...invalid esri.geometry.Polygon..." + agsPolygon;
+	    		}	    		
+	    	},
+	    	
+	    	/**
+	    	 * APIMethod: parseAgsGeometry.multipoint
+	    	 *   convert an esri.geometry.MultiPoint object to an array of OpenLayers.Geometry.Point
+	    	 *
+	    	 * Parameters:
+	     	 *   agsMultipoint - {esri.geometry.MultiPoint} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {Array of OpenLayers.Geometry.Point} Array	
+	    	 */	    	
+	    	"multipoint": function(agsMultipoint) {
+				var olPoints = [];
+				if(_isDefined(agsMultipoint.points) && agsMultipoint.points instanceof Array) {
+					var agsPoints = agsMultipoint.points;
+					for(var i=0; i<agsPoints.length; i++) {
+						try {
+	    					var olPoint = this.parseAgsGeometry['coordinate'].apply(this, [agsPoints[i]]);
+							olPoints.push(olPoint);
+	    				} catch(e) {
+	    					throw e;
+	    				}
+					}
+					return olPoints;
+				} else {
+					OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.multipoint...invalid esri.geometry.MultiPoint...");
+	    			throw "...AgsAdapter.parseAgsGeometry.multipoint...invalid esri.geometry.MultiPoint..." + agsPolygon;
+				}
+	    	},
+	    		    	
+	    	/**
+	    	 * APIMethod: parseAgsGeometry.extent
+	    	 *   convert an esri.geometry.Extent object to an OpenLayers.Bounds
+	    	 *
+	    	 * Parameters:
+	     	 *   agsPolygon - {esri.geometry.Extent} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {OpenLayers.Bounds} object 	
+	    	 */
+	    	"extent": function(agsExtent) {
+	    		var olBounds = null;
+	    		if(_isDefined(agsExtent.xmin) && _isDefined(agsExtent.xmax) && _isDefined(agsExtent.ymin) && _isDefined(agsExtent.ymax)) {
+	    			olBounds = new OpenLayers.Bounds(agsExtent.xmin, agsExtent.ymin, agsExtent.xmax, agsExtent.ymax);	 		
+	    			return olBounds;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.extent...invalid esri.geometry.Extent...");
+	    			throw "...AgsAdapter.parseAgsGeometry.extent...invalid esri.geometry.Extent..." + agsExtent;
+	    		}	    		
+	    	}
+	    };
+	    
+	      
+		 
+		/**
+		 * How OpenLayers symbol works: 		
+ 		 *   OpenLayers features can have a number of style attributes. The 'default' 
+ 		 *   style will typically be used if no other style is specified.
+ 		 *
+ 		 * Default style properties:
+ 		 *
+		 *  - fillColor: "#ee9900",
+		 *  - fillOpacity: 0.4, 
+		 *  - hoverFillColor: "white",
+		 *  - hoverFillOpacity: 0.8,
+		 *  - strokeColor: "#ee9900",
+		 *  - strokeOpacity: 1,
+		 *  - strokeWidth: 1,
+		 *  - strokeLinecap: "round",  [butt | round | square]
+		 *  - strokeDashstyle: "solid", [dot | dash | dashdot | longdash | longdashdot | solid]
+		 *  - hoverStrokeColor: "red",
+		 *  - hoverStrokeOpacity: 1,
+		 *  - hoverStrokeWidth: 0.2,
+		 *  - pointRadius: 6,
+		 *  - hoverPointRadius: 1,
+		 *  - hoverPointUnit: "%",
+		 *  - pointerEvents: "visiblePainted"
+		 *  - cursor: ""
+		 *
+		 * Other style properties that have no default values:
+		 *
+		 *  - externalGraphic,
+		 *  - graphicWidth,
+		 *  - graphicHeight,
+		 *  - graphicOpacity,
+		 *  - graphicXOffset,
+		 *  - graphicYOffset,
+		 *  - graphicName,
+		 *  - display
+		 */ 
+		 
+		/**
+	     * APIMethod: parseAgsSymbol
+	     *   converts esri.symbol.Symbol.* object to OpenLayers.Feature.Vector.style
+	     *
+	     * Parameters:
+	     *   agsSymbol - (esri.symbol.Symbol.*) object 
+		 *
+	     * Returns: 
+	     *   {OpenLayers.Feature.Vector.style} object 
+	     */ 		 
+	    this.parseAgsSymbol = {	  
+			/**
+	    	 * APIMethod: parseAgsSymbol.SimpleMarkerSymbol
+	    	 *   convert an esri.symbol.SimpleMarkerSymbol object to an object for OpenLayers style 
+	    	 *
+	    	 * Parameters:
+	     	 *   agsSimpleMarkerSymbol - {esri.symbol.SimpleMarkerSymbol} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {} Object
+	    	 */	 	
+	    	"SimpleMarkerSymbol" : function(agsSimpleMarkerSymbol) {
+	    		if(_isDefined(agsSimpleMarkerSymbol) && agsSimpleMarkerSymbol instanceof esri.symbol.SimpleMarkerSymbol) {
+	    			var olStyle = {};		    				    		
+					olStyle['pointRadius'] = agsSimpleMarkerSymbol.size || 6; // marker size in pixel, default is 6
+					olStyle['fillColor'] = agsSimpleMarkerSymbol.color.toHex() || "#ee9900"; // marker fillColor, default "#ee9900"
+		    		olStyle['fillOpacity'] = agsSimpleMarkerSymbol.color.toRgba()[3] || 0.49; // marker fillOpacity, default is 0.49   		
+		    		// TODO: angle		    		
+		    		olStyle['graphicXOffset'] = agsSimpleMarkerSymbol.xoffset || 0; // marker xoffset, default is 0
+					olStyle['graphicYOffset'] = agsSimpleMarkerSymbol.yoffset || 0; // marker yoffset, default is 0		    		
+		    		//olStyle['graphicName'] = _AGS_OL_SIMPLE_MARKER_MAP[agsSimpleMarkerSymbol.style]; // marker style, default is "circle" 					
+		    		olStyle['strokeDashstyle'] = _AGS_OL_SIMPLE_LINESYMBOL_MAP[agsSimpleMarkerSymbol.outline.style] || "solid"; // marker outline style, default is "solid" 		    		 
+					olStyle['strokeWidth'] = agsSimpleMarkerSymbol.outline.width || 1; // marker outline width, default is 1		    		
+		    		olStyle['strokeColor'] = agsSimpleMarkerSymbol.outline.color.toHex() || "#ee9900"; // marker outline color, default is "#ee9900"  
+		    		olStyle['strokeOpacity'] = agsSimpleMarkerSymbol.outline.color.toRgba()[3] || 1.0; // marker outline opacity, default is 1.0  
+		    		return olStyle;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsSymbol.SimpleMarkerSymbol...missing or invalid SimpleMarkerSymbol...");
+	    	 		throw "...AgsAdapter.parseAgsSymbol.SimpleMarkerSymbol...invalid or invalid SimpleMarkerSymbol..." + agsSimpleMarkerSymbol;
+	    		}	    		
+	    	},
+	    	
+			/**
+	    	 * APIMethod: parseAgsSymbol.PictureMarkerSymbol
+	    	 *   converts an esri.symbol.PictureMarkerSymbol object to an object for OpenLayers style 
+	    	 *
+	    	 * Parameters:
+	     	 *   agsPictureMarkerSymbol - {esri.symbol.PictureMarkerSymbol} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {} Object
+	    	 */
+	    	"PictureMarkerSymbol" : function(agsPictureMarkerSymbol) {
+	    		if(_isDefined(agsPictureMarkerSymbol) && agsPictureMarkerSymbol instanceof esri.symbol.PictureMarkerSymbol) {
+	    			var olStyle = {};		    				    		
+					olStyle['pointRadius'] = agsPictureMarkerSymbol.size || 6; // external marker size in pixel, default is 6
+					olStyle['externalGraphic'] = agsPictureMarkerSymbol.url || "../../img/marker.png"; // external marker url, default is "marker.png"
+					olStyle['graphicWidth'] = agsPictureMarkerSymbol.width || 21; // external marker width, default is 21
+					olStyle['graphicHeight'] = agsPictureMarkerSymbol.height || 25; // external marker height, default is 25
+					olStyle['graphicXOffset'] = agsPictureMarkerSymbol.xoffset || 0; // external marker xoffset, default is 0
+					olStyle['graphicYOffset'] = agsPictureMarkerSymbol.yoffset || 0; // external marker yoffset, default is 0 
+		    		// TODO: angle		    		
+					return olStyle;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsSymbol.PictureMarkerSymbol...missing or invalid PictureMarkerSymbol...");
+	    	 		throw "...AgsAdapter.parseAgsSymbol.PictureMarkerSymbol...invalid or invalid PictureMarkerSymbol..." + agsPictureMarkerSymbol;
+	    		}	
+	    	},
+			
+	    	/**
+	    	 * APIMethod: parseAgsSymbol.SimpleLineSymbol
+	    	 *   converts an esri.symbol.SimpleLineSymbol object to an object for OpenLayers style 
+	    	 *
+	    	 * Parameters:
+	     	 *   agsSimpleLineSymbol - {esri.symbol.SimpleLineSymbol} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {} Object
+	    	 */	
+	    	"SimpleLineSymbol" : function(agsSimpleLineSymbol) {
+	    		if(_isDefined(agsSimpleLineSymbol) && agsSimpleLineSymbol instanceof esri.symbol.SimpleLineSymbol) {
+		    		var olStyle = {};
+		    		olStyle['strokeDashstyle'] = _AGS_OL_SIMPLE_LINESYMBOL_MAP[agsSimpleLineSymbol.style] || "solid"; // line style, default is "solid" 		    		 
+					olStyle['strokeWidth'] = agsSimpleLineSymbol.width || 1; // line width, default is 1		    		
+		    		olStyle['strokeColor'] = agsSimpleLineSymbol.color.toHex() || "#ee9900"; // line color, default is "#ee9900"  
+		    		olStyle['strokeOpacity'] = agsSimpleLineSymbol.color.toRgba()[3] || 1.0; // line opacity, default is 1.0  		    		
+		    		return olStyle;
+		    	} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsSymbol.SimpleLineSymbol...missing or invalid SimpleLineSymbol...");
+	    	 		throw "...AgsAdapter.parseAgsSymbol.SimpleLineSymbol...missing or invalid SimpleLineSymbol..." + agsSimpleLineSymbol;
+	    		}	 
+	    	},
+	    	
+	    	"CartographicLineSymbol" : function(agsCartographicLineSymbol) {
+	    		// TODO: to be implemented
+	    	},
+	    	
+			/**
+	    	 * APIMethod: parseAgsSymbol.SimpleFillSymbol
+	    	 *   converts an esri.symbol.SimpleFillSymbol object to an object for OpenLayers style 
+	    	 *
+	    	 * Parameters:
+	     	 *   agsSimpleFillSymbol - {esri.symbol.SimpleFillSymbol} object 
+		 	 *
+	     	 * Returns: 
+	      	 *   {} Object
+	    	 */	
+	    	"SimpleFillSymbol" : function(agsSimpleFillSymbol) {
+	    		if(_isDefined(agsSimpleFillSymbol) && agsSimpleFillSymbol instanceof esri.symbol.SimpleFillSymbol) {
+		    		var olStyle = {};
+		    		olStyle['fillColor'] = agsSimpleFillSymbol.color.toHex() || "#ee9900"; // fillColor, default "#ee9900"
+		    		olStyle['fillOpacity'] = agsSimpleFillSymbol.color.toRgba()[3] || 0.49; // fillOpacity, default is 0.49   				    		 				
+		    		// TODO: 'fillStyle' like "STYLE_BACKWARD_DIAGONAL", "STYLE_VERTICAL", etc. are not supported in OpenLayers
+					olStyle['strokeDashstyle'] = _AGS_OL_SIMPLE_LINESYMBOL_MAP[agsSimpleFillSymbol.outline.style] || "solid"; // outline style, default is "solid" 		    		 
+					olStyle['strokeWidth'] = agsSimpleFillSymbol.outline.width || 1; // outline width, default is 1		    		
+		    		olStyle['strokeColor'] = agsSimpleFillSymbol.outline.color.toHex() || "#ee9900"; // outline color, default is "#ee9900"  
+		    		olStyle['strokeOpacity'] = agsSimpleFillSymbol.outline.color.toRgba()[3] || 1.0; // outline opacity, default is 1.0  
+		    		return olStyle;
+		    	} else {
+	    			OpenLayers.Console.error("...AgsAdapter.parseAgsSymbol.SimpleFillSymbol...missing or invalid SimpleFillSymbol...");
+	    	 		throw "...AgsAdapter.parseAgsSymbol.SimpleFillSymbol...missing or invalid SimpleFillSymbol..." + agsSimpleFillSymbol;
+	    		}
+	    	},
+	    	
+	    	"PictureFillSymbol" : function(agsPictureFillSymbol) {
+	    		// TODO: to be implemented
+	    	}
+	    };
+	    
+	    /**
+	     * APIMethod: parseAgsSpatialReference
+	     *   converts esri.SpatialReference object to a String representing a projection in OpenLayers
+	     *
+	     * Parameters:
+	     *   agsSpatialReference - {esri.SpatialReference} object 
+		 *
+	     * Returns: 
+	     *   {String}  
+	     */   
+	    this.parseAgsSpatialReference = function(agsSpatialReference) {
+	    	var olGeometrySpatialReference = null;    	
+	    	if(_isDefined(agsSpatialReference.wkid) && agsSpatialReference instanceof esri.SpatialReference) {
+	    		// check whether wkid of same spatial reference could be different in OpenLayers and ArcGIS Server JS
+	    		//   e.g. wkid of spheric mecator in AgsJs is "102113" but "900913" in OpenLayers 
+	    		var olWkid = _toOlWkid(agsSpatialReference.wkid);
+	    		olGeometrySpatialReference = "EPSG:" + olWkid;
+	    		return olGeometrySpatialReference;
+	    	} else {
+	    		OpenLayers.Console.error("...AgsAdapter.parseAgsSpatialReference...missing or invalid esri.SpatialReference...");
+	    		throw "...AgsAdapter.parseAgsSpatialReference...missing or invalid esri.SpatialReference..." + agsSpatialReference;
+	    	}	    	
+	    };
+	    
+	    /**
+	     * APIMethod: parseAgsGraphic
+	     *   converts esri.Graphic object to OpenLayers.Feature.Vector
+	     *
+	     * Parameters:
+	     *   agsGraphic - {esri.Graphic} object 
+		 *
+	     * Returns: 
+	     *   {OpenLayers.Feature.Vector} object 
+	     */
+	    this.parseAgsGraphic = function(agsGraphic) {
+	    	var olFeature = null;
+	    	var geometryType = null;
+	    	var geometry = null;
+	    	var style = null;
+	    	
+	    	if(_isDefined(agsGraphic.geometry.type)) {
+	    		geometryType = agsGraphic.geometry.type;
+	    	} else {
+	    		OpenLayers.Console.error("...AgsAdapter.parseAgsGraphic...invalid esri.Graphic...");
+	    		throw "...AgsAdapter.parseAgsGraphic...invalid esri.Graphic..." + agsGraphic;
+	    	}    	
+	    	try {
+	    		geometry = this.parseAgsGeometry[geometryType].apply(this, [agsGraphic.geometry]);
+	    	} catch(e) {
+	    		throw e;
+	    	}
+	    	if(_isDefined(geometry)) {
+	    		var attributes = agsGraphic.attributes;
+	    		// parse 'infoTemplate' from esri.Graphic
+	    		if(_isDefined(agsGraphic.infoTemplate)) {
+	    			attributes['infoTemplateTitle'] = agsGraphic.infoTemplate.title ? agsGraphic.infoTemplate.title : "";
+	    			attributes['infoTemplateContent'] = agsGraphic.infoTemplate.content ? agsGraphic.infoTemplate.content : "";    		
+	    		}
+	    		// parse 'symbol' from esri.Graphic    		
+	    		if(_isDefined(agsGraphic.symbol)) {	    			
+	    			try {	    			 
+	    				if(_isDefined(agsGraphic.symbol.type)) {
+							// select symbol parser based on agsGraphic.symbol.type
+							style = this.parseAgsSymbol[_OL_AGS_STYLE_MAP[agsGraphic.symbol.type]].apply(this, [agsGraphic.symbol]);
+						} else {
+							// select symbol parser based on geometry type
+							style = this.parseAgsSymbol[_OL_AGS_STYLE_MAP[geometry.CLASS_NAME]].apply(this, [agsGraphic.symbol]);	
+						}						
+	    			} catch(e) {
+	    				throw e;
+	    			}  		    		
+	    		}
+	    		olFeature = new OpenLayers.Feature.Vector(geometry, attributes, style);
+	    		return olFeature;
+	    	} else {
+	    		OpenLayers.Console.error("...AgsAdapter.parseAgsGraphic...invalid esri.Graphic.geometry...");
+	    		throw "...AgsAdapter.parseAgsGraphic...invalid esri.Graphic.geometry..." + agsGraphic;
+	    	}    	
+	    };
+	    
+	    /**
+	     * APIMethod: parseAgsGraphics
+	     *   parses an array of esri.Graphic object to an array of OpenLayers.Feature.Vector
+	     *   
+	     * Parameters:
+	     *   agsGraphics - {Array of esri.Graphic} Array
+	     *   
+	     * Returns:
+	     *   {Array of OpenLayers.Feature.Vector} Array
+	     */
+	    this.parseAgsGraphics = function(agsGraphics) {
+	    	 var olFeatures = [];
+	    	 if(_isDefined(agsGraphics) && agsGraphics instanceof Array) {
+	    	 	for(var i=0; i<agsGraphics.length; i++) {
+	    	 		try {
+	    	 			var olFeature = this.parseAgsGraphic.apply(this, [agsGraphics[i]]);
+	    	 			olFeatures.push(olFeature);
+	    	 		} catch(e) {
+	    	 			throw e;
+	    	 		}
+	    	 	}
+	    	 	return olFeatures;
+	    	 } else {
+	    	 	OpenLayers.Console.error("...AgsAdapter.parseAgsGraphics...invalid esri.Graphic array...");
+	    	 	throw "...AgsAdapter.parseAgsGraphic...invalid esri.Graphic array..." + agsGraphics;
+	    	 }	    	 
+	    };
+	    
+	    /**
+	     * APIMethod: parseAgsResults
+	     *   parses results object of ags tasks to OpenLayers.Feature.Vector or array of OpenLayers.Feature.Vector
+	     *   ags tasks results object include: IdentifyResult, AddressCandidate, FeatureSet, FindResult
+	     */
+	    this.parseAgsResults = {	    		    
+		    /**
+		     * APIMethod: parseAgsIdentifyResult
+		     *   parses esri.tasks.IdentifyResult object to OpenLayers.Feature.Vector
+		     *
+		     * Parameters:
+		     *   agsGraphic - {esri.tasks.IdentifyResult} object 
+			 *
+		     * Returns: 
+		     *   {OpenLayers.Feature.Vector} object 
+		     */
+		    'identifyResult': function(agsIdentifyResult) {
+		    	var olFeature = null;
+		    	if(_isDefined(agsIdentifyResult.feature)) {
+		    		try {
+		    			olFeature = this.parseAgsGraphic.apply(this, [agsIdentifyResult.feature]);
+		    		} catch(e) {
+		    			throw e;
+		    		}
+		    		if(_isDefined(agsIdentifyResult.displayFieldName)) {
+		    			olFeature.attributes['displayFieldName'] = agsIdentifyResult.displayFieldName;
+		    		}	    		
+		    		if(_isNumber(agsIdentifyResult.layerId) && agsIdentifyResult.layerId >= 0) { 
+		    			olFeature.attributes['layerId'] = agsIdentifyResult.layerId;
+		    		}
+		    		if(_isDefined(agsIdentifyResult.layerName)) {
+		    			olFeature.attributes['layerName'] = agsIdentifyResult.layerName;
+		    		}
+		    		return olFeature;
+		    	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.parseAgsResults.identifyResult...parses esri.tasks.IdentifyResult...missing or invalid feature in IdentifyResult...");
+		    		throw "...AgsAdapter.parseAgsResults.identifyResult...parses esri.tasks.IdentifyResult...missing or invalid feature in IdentifyResult..." + agsIdentifyResult;
+		    	}	    	
+		    },
+		    
+		    /**
+		     * APIMethod: parseAgsIdentifyResults
+		     *   parses an array of esri.tasks.IdentifyResult object to an array of OpenLayers.Feature.Vector
+		     *   
+		     * Parameters:
+		     *   agsIdentifyResults - {Array of esri.tasks.IdentifyResult} Array
+		     *   
+		     * Retures:
+		     *   {Array of OpenLayers.Feature.Vector} Array
+		     */
+		    'identifyResults': function(agsIdentifyResults) {
+		    	var olFeatures = [];
+		    	 if(_isDefined(agsIdentifyResults) && agsIdentifyResults instanceof Array) {
+		    	 	for(var i=0; i<agsIdentifyResults.length; i++) {
+		    	 		try {
+		    	 			var olFeature = this.parseAgsResults['identifyResult'].apply(this, [agsIdentifyResults[i]]);
+		    	 			olFeatures.push(olFeature);
+		    	 		} catch(e) {
+		    	 			throw e;
+		    	 		}
+		    	 	}
+		    	 	return olFeatures;
+		    	 } else {
+		    	 	OpenLayers.Console.error("...AgsAdapter.parseAgsResults.identifyResults...parses array esri.tasks.IdentifyResult...missing or invalid array...");
+		    	 	throw "...AgsAdapter.parseAgsResults.identifyResults...parses array esri.tasks.IdentifyResult...missing or invalid array..." + agsIdentifyResults;
+		    	 }	    	 
+		    },
+		    
+		    /**
+		     * APIMethod: parseAddressCandidate
+		     *   parses esri.tasks.AddressCandidate object to OpenLayers.Feature.Vector
+		     *
+		     * Parameters:
+		     *   agsAddressCandidate - {esri.tasks.AddressCandidate} object 
+			 *
+		     * Returns: 
+		     *   {OpenLayers.Feature.Vector} object 
+		     */ 
+		    'addressCandidate': function(agsAddressCandidate) {
+		    	var olFeature = null;
+		    	var geometry = null;
+		    	var attributes = {};    	
+		    	if(_isDefined(agsAddressCandidate.location)) {
+		    		try {
+		    			geometry = this.parseAgsGeometry['point'].apply(this, [agsAddressCandidate.location]);
+		    		} catch(e) {
+		    			throw e;
+		    		}
+		    		if(_isDefined(agsAddressCandidate.address)) {
+			    		if(typeof agsAddressCandidate.address === "string") {
+			    			attributes['address'] = agsAddressCandidate.address;
+			    		} else { 			    		
+				    		for(key in agsAddressCandidate.address) {
+				    			if(typeof agsAddressCandidate.address[key] === "string") {
+				    				attributes['addr_' + key] = agsAddressCandidate.address[key];
+				    			}
+				    		}   
+			    		} 		
+			    	}
+			    	if(_isDefined(agsAddressCandidate.attributes)) {
+			    		//attributes['attributes'] = agsAddressCandidate.attributes;	
+			    		for(key in agsAddressCandidate.attributes) {
+			    			if(typeof agsAddressCandidate.attributes[key] === "string") {
+			    				attributes['attr_' + key] = agsAddressCandidate.attributes[key];
+			    			}
+			    		}    		
+			    	}
+			    	if(_isDefined(agsAddressCandidate.score)) {
+			    		attributes['score'] = agsAddressCandidate.score;
+			    	}
+			    	olFeature = new OpenLayers.Feature.Vector(geometry, attributes);
+		    		return olFeature;
+		    	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.parseAgsResults.addressCandidate...parses an agsAddressCandidates...missing or invalid 'location'...");
+		    		throw "...AgsAdapter.parseAgsResults.addressCandidate...parses an agsAddressCandidates...missing or invalid 'location'..." + agsAddressCandidate;
+		    	}        		    	
+		    },
+		    
+		    /**
+		     * APIMethod: parseAddressCandidates
+		     *   parses an array of esri.tasks.AddressCandidate object to an array of OpenLayers.Feature.Vector
+		     *   
+		     * Parameters:
+		     *   agsAddressCandidates - {Array of esri.tasks.AddressCandidate}
+		     *   
+		     * Returns:
+		     *   {Array of esri.tasks.AddressCandidate} Array
+		     */
+		    'addressCandidates': function(agsAddressCandidates) {
+		   		var olFeatures = [];
+		    	if(_isDefined(agsAddressCandidates) && agsAddressCandidates instanceof Array) {
+		    		for(var i=0; i<agsAddressCandidates.length; i++) {
+		    	 		try {
+		    	 			var olFeature = this.parseAgsResults['addressCandidate'].apply(this, [agsAddressCandidates[i]]);
+		    	 			olFeatures.push(olFeature);
+		    	 		} catch(e) {
+		    	 			throw e;
+		    	 		}
+		    	 	}
+		    		return olFeatures;
+		    	} else {
+		    	 	OpenLayers.Console.error("...AgsAdapter.parseAgsResults.addressCandidates...parses array agsAddressCandidates...missing or invalid array...");
+		    		throw "...AgsAdapter.parseAgsResults.addressCandidates...parses array agsAddressCandidates...missing or invalid array..." + agsAddressCandidates;
+		    	}	    	
+		    },
+		    
+		    /**
+		     * APIMethod: parseAgsFindResult
+		     *   parses esri.tasks.FindResult object to OpenLayers.Feature.Vector
+		     *
+		     * Parameters:
+		     *   agsFindResult - {esri.tasks.FindResult} object 
+			 *
+		     * Returns: 
+		     *   {OpenLayers.Feature.Vector} object 
+		     */ 
+		    'findResult': function(agsFindResult) {    	
+		    	var olFeature = null;	    	
+		    	if(_isDefined(agsFindResult.feature)) {
+		    		var agsGraphic = agsFindResult.feature;
+		    		try {
+		    			olFeature = this.parseAgsGraphic.apply(this, [agsGraphic]);
+		    		} catch(e) {
+		    			throw e;
+		    		}
+		     		if(_isDefined(agsFindResult.displayFieldName)) {
+		     			olFeature.attributes['displayFieldName'] = agsFindResult.displayFieldName;
+		     		}
+		     		if(_isDefined(agsFindResult.foundFieldName)) {
+		     			olFeature.attributes['foundFieldName'] = agsFindResult.foundFieldName;
+		     		}
+		     		if(_isNumber(agsFindResult.layerId) && agsFindResult.layerId >= 0) {
+		     			olFeature.attributes['layerId'] = agsFindResult.layerId;
+		     		}
+		     		if(_isDefined(agsFindResult.layerName)) {
+		     			olFeature.attributes['layerName'] = agsFindResult.layerName;
+		     		} 
+		     		return olFeature;
+		     	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.parseAgsResults.findResult...parse esri.tasks.FindResult...missing or invalid FindResult...");    		
+		    		throw "...AgsAdapter.parseAgsResults.findResult...parse esri.tasks.FindResult...missing or invalid FindResult..." + agsFindResult;
+		    	}    	 	    	
+		    },
+		    
+		    /**
+		     * APIMethod: parseAgsFindResults
+		     *   parses an array of esri.tasks.FindResult object to an array of OpenLayers.Feature.Vector
+		     *   
+			 * Parameters:
+			 *   agsFindResults - {Array of esri.tasks.FindResult} Array
+		     *
+		     * Returns:
+		     *   {Array of OpenLayers.Feature.Vector} object
+		     */
+		    'findResults': function(agsFindResults) {
+		    	var olFeatures = [];	    	
+		    	if(_isDefined(agsFindResults) && agsFindResults instanceof Array) {
+		    		for(var i=0; i<agsFindResults.length; i++) {
+		    	 		try {
+		    	 			var olFeature = this.parseAgsResults['findResult'].apply(this, [agsFindResults[i]]);
+		    	 			olFeatures.push(olFeature);
+		    	 		} catch(e) {
+		    	 			throw e;
+		    	 		}
+		    	 	}
+		    	 	return olFeatures;
+		    	} else {
+		    	 	OpenLayers.Console.warn("...AgsAdapter.parseAgsResults.findResults...parse array of agsFindResults...missing or invalid array...");
+		    		throw "...AgsAdapter.parseAgsResults.findResults...parse array of agsFindResults...missing or invalid array..." + agsFindResults
+		    	}
+		    },
+		    
+		    /**
+		     * APIMethod: parseAgsFeatureSet
+		     *   parses esri.tasks.FeatureSet object to array of OpenLayers.Feature.Vector
+		     *
+		     * Parameters:
+		     *   agsFeatureSet - {esri.tasks.FeatureSet} object
+			 *
+		     * Returns: 
+		     *   {Array of OpenLayers.Feature.Vector} Array 
+		     */ 
+		    'featureSet': function(agsFeatureSet) {
+		    	var olFeatures = [];
+		    	if(_isDefined(agsFeatureSet.features)) {
+		    		try {
+		    			var agsGraphics = agsFeatureSet.features;    		
+		    			olFeatures = this.parseAgsGraphics.apply(this, [agsGraphics]);
+		    		} catch(e) {
+		    			throw e;
+		    		}
+		     		return olFeatures;
+		     	} else {
+		    		OpenLayers.Console.warn("...AgsAdapter.parseAgsResults.featureSet...parse esri.tasks.FeatureSet...missing or invalid FeatureSet...");    		
+		    		throw "...AgsAdapter.parseAgsResults.featureSet...parse esri.tasks.FeatureSet...missing or invalid FeatureSet..." + agsFeatureSet;
+		    	}    	 	    	
+		    },
+			
+			/**
+			 * APIMethod: parseAgsAreasAndLengths
+			 *   parses structure results of a 'length'/'areasAndLengths' operation of an esri.tasks.GeometryService
+			 *   
+			 * Parameters:
+			 *   agsAreasAndLengths - {object} object
+			 * 
+			 * Returns:
+			 *   {object} object
+			 *   {
+			 *   	areas: [],
+			 *   	lengths: []
+			 *   }
+			 */
+			'areasAndLengths': function(agsAreasAndLengths) {
+				if(_isDefined(agsAreasAndLengths.areas) || _isDefined(agsAreasAndLengths.lengths)) {
+					return agsAreasAndLengths;
+				} else {
+					OpenLayers.Console.warn("...AgsAdapter.parseAgsResults.areasAndLengths...parse esri areasAndLengths...missing or invalid areasAndLengths...");    		
+		    		throw "...AgsAdapter.parseAgsResults.areasAndLengths...parse esri areasAndLengths...missing or invalid areasAndLengths..." + agsAreasAndLengths;
+				}
+			},
+			
+			/**
+			 * APIMethod: parseAgsRelations
+			 *   parses a single 'relation' in result of relation operation of an esri.tasks.GeometryService
+			 *   
+			 * Parameters:
+			 *   agsRelation - {object} object
+			 * 
+			 * Returns:
+			 *   {object} object
+			 *   
+			 */
+			'relation': function(agsRelation) {				
+				var olRelation = {};
+				if(_isDefined(agsRelation.geometry1Index) && _isDefined(agsRelation.geometry2Index)) {
+					olRelation.geometry1Index = agsRelation.geometry1Index;
+					olRelation.geometry2Index = agsRelation.geometry2Index;
+				} else {
+					OpenLayers.Console.warn("...AgsAdapter.parseAgsResults.relation...parse esri relation result...missing or invalid relation result...");    		
+		    		throw "...AgsAdapter.parseAgsResults.relation...parse esri relation result...missing or invalid relation result..." + agsRelation;
+				}
+				
+				if(_isDefined(agsRelation.graphic1) && _isDefined(agsRelation.graphic2)) {
+					try {
+						olRelation.feature1 = this.parseAgsGraphic.apply(this, [agsRelation.graphic1]);;
+						olRelation.feature2 = this.parseAgsGraphic.apply(this, [agsRelation.graphic2]);;
+					} catch(e) {
+						throw e;
+					}
+				} else {
+					OpenLayers.Console.warn("...AgsAdapter.parseAgsResults.relation...parse esri relation result...missing or invalid relation result...");    		
+		    		throw "...AgsAdapter.parseAgsResults.relation...parse esri relation result...missing or invalid relation result..." + agsRelation;
+				}
+				return olRelation;
+			},
+			
+			/**
+			 * APIMethod: parseAgsRelations
+			 *   parses structure results of a 'relation' operation of an esri.tasks.GeometryService
+			 *   
+			 * Parameters:
+			 *   agsRelations - {object} object
+			 * 
+			 * Returns:
+			 *   {object} object
+			 *   
+			 */
+			'relations': function(agsRelations) {				
+				var olRelations = [];
+				if(_isDefined(agsRelations) && agsRelations instanceof Array) {
+					try {
+						for(var i=0; i<agsRelations.length; i++) {
+							var olRelation = this.parseAgsResults['relation'].apply(this, [agsRelations[i]]);
+		    	 			olRelations.push(olRelation);	
+						}						
+					} catch(e) {
+						throw 3;
+					}
+ 				} else {
+					OpenLayers.Console.warn("...AgsAdapter.parseAgsResults.relationw...parse esri relation result array...missing or invalid relation result array...");    		
+		    		throw "...AgsAdapter.parseAgsResults.relationw...parse esri relation result array...missing or invalid relation result array..." + agsRelations;
+				}
+				return olRelations;
+			}
+		};
+	    
+	    /**
+	     * APIMethod: encodeAgsUnit
+	     *   take a general unit string to internal unit representation in AgsJs
+	     *   see static attribute _AGS_UNITS
+	     *
+	     * Parameters:
+	     *   olUnit - {String}
+	     *
+	     * Returns:
+	     *   {number}	     
+	     */
+		this.encodeAgsUnit = function(olUnit) {
+			if(_isDefined(olUnit)) {
+				if(_isDefined(_AGS_UNITS[olUnit])) {
+					return _AGS_UNITS[olUnit];
+				} else {
+					OpenLayers.Console.error("...AgsAdapter.encodeAgsUnit...encode ags unit...unit string not supported...");
+					throw "...AgsAdapter.encodeAgsUnit...encode ags unit...unit string not supported..." + olUnit;
+				}				
+			} else {
+				OpenLayers.Console.error("...AgsAdapter.encodeAgsUnit...encode ags unit...missing or invalid unit string...");
+				throw "...AgsAdapter.encodeAgsUnit...encode ags unit...missing or invalid unit string..." + olUnit;
+			}
+		};
+		
+		/**
+	     * APIMethod: encodeAgsSpatialReference
+	     *   parses a String representing a projection in OpenLayers to esri.SpatialReference object 
+	     *
+	     * Parameters:
+	     *   {String} - olSpatialReference
+		 *
+	     * Returns: 
+	     *   agsSpatialReference - {esri.SpatialReference} object   
+	     */
+		this.encodeAgsSpatialReference = function(olSpatialReference) {
+	    	if(!_isDefined(olSpatialReference)) {
+	    		OpenLayers.Console.error("...AgsAdapter.encodeAgsSpatialReference...encode ags spatial reference...missing or invalid input spatial reference...");
+	    		throw "...AgsAdapter.encodeAgsSpatialReference...encode ags spatial reference...missing or invalid input spatial reference..." + olSpatialReference;
+	    	}	    	
+	    	// expect a OpenLayers spatial reference string in syntax "EPSG:XXXXX"	    	
+	    	var namespace = olSpatialReference.split(":")[0];
+	    	var identifier = olSpatialReference.split(":")[1];
+	    	
+	    	if(namespace === "EPSG" && _isDefined(identifier)) {
+	    		var agsSpatialReference = {};
+	    		agsSpatialReference['wkid'] = _toAgsWkid(identifier);
+	    		return new esri.SpatialReference(agsSpatialReference);
+	    	} else {
+	    		OpenLayers.Console.error("...AgsAdapter.encodeAgsSpatialReference...encode ags spatial reference...invalid spatial reference in EPSG:XXXXX syntax...");
+	    		throw "...AgsAdapter.encodeAgsSpatialReference...encode ags spatial reference...invalid spatial reference in EPSG:XXXXX syntax..." + olSpatialReference;
+	    	}
+	    };
+	    
+	    /**
+	     * APIMethod: encodeAgsGeometry.*
+	     *   encodes OpenLayers.Geometry.* object to esri.geometry.*
+	     *
+	     * Parameters:
+	     *   olGeometry - {OpenLayers.Geometry.Geometry} object 
+		 *
+	     * Returns: 
+	     *   {esri.geometry.Geometry} object 
+	     */    
+	    this.encodeAgsGeometry = {
+	    	/**
+		     * APIMethod: encodeAgsGeometry.point
+		     *   encodes OpenLayers.Geometry.Point object to esri.geometry.Point
+		     *
+		     * Parameters:
+		     *   olPoint - {OpenLayers.Geometry.Point} object 
+		     *   olSpatialReference - {String} e.g. "EPSG:102113", "EPSG:4326" must be in syntax "Namespace:Idetifier"
+			 *
+		     * Returns: 
+		     *   {esri.geometry.Point} object 
+		     */
+	    	'point': function(olPoint, olSpatialReference) {    		    		
+	    		if(_isDefined(olPoint) && olPoint instanceof OpenLayers.Geometry.Point) { 
+	    			var agsPoint = null;
+	    			var agsSpatialReference = null;
+	    			try {
+	    				if(_isDefined(olSpatialReference)) {
+	    					agsSpatialReference = this.encodeAgsSpatialReference(olSpatialReference);	
+	    				} else {
+	    					// if input spatial reference string is invalid, use default one
+	    					agsSpatialReference = this.encodeAgsSpatialReference(this.config['defaultEncodeWkid']);
+	    				}	    				
+	    			} catch(e) {
+	    				throw e;
+	    			}	    			
+	    			agsPoint = new esri.geometry.Point(olPoint.x, olPoint.y, agsSpatialReference);    				
+	    			return agsPoint;
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometry.point...encode esri.geometry.Point...missing or invalid OpenLayers.Geometry.Point...");
+	    			throw "...AgsAdapter.encodeAgsGeometry.point...encode esri.geometry.Point...missing or invalid OpenLayers.Geometry.Point..." + olPoint;
+	    		}
+	    	},
+	    	
+	    	/**
+		     * APIMethod: encodeAgsGeometry.coordinate
+		     *   encodes OpenLayers.Geometry.Point object to array [x, y]
+		     *
+		     * Parameters:
+		     *   olPoint - {OpenLayers.Geometry.Point} object 	    
+			 *
+		     * Returns: 
+		     *   {Array} [x, y] 
+		     */
+	    	'coordinate': function(olPoint) {
+	        	if(_isDefined(olPoint) && olPoint instanceof OpenLayers.Geometry.Point) {   				
+					var agsCoordinate = new Array();			
+	   				agsCoordinate.push(olPoint.x);
+	   				agsCoordinate.push(olPoint.y);	   						   				
+					return agsCoordinate;
+	   			} else {
+	   				OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometry.coordinate...encode [x, y]...missing or invalid OpenLayers.Geometry.Point...");
+	   				throw "...AgsAdapter.encodeAgsGeometry.coordinate...encode [x, y]...missing or invalid OpenLayers.Geometry.Point..." + olPoint;
+	   			} 
+	        },
+	        
+	        /**
+		     * APIMethod: encodeAgsGeometry.path
+		     *   encodes OpenLayers.Geometry.LineString object to array of array [x, y]
+		     *
+		     * Parameters:
+		     *   olLineString - {OpenLayers.Geometry.LineString} object 	    
+			 *
+		     * Returns: 
+		     *   {Array of [x, y]} Array 
+		     */
+	        'path': function(olLineString) {
+	        	if(_isDefined(olLineString) && olLineString instanceof OpenLayers.Geometry.LineString) {   				
+					var agsPath = new Array();
+					for(var i=0; i<olLineString.components.length; i++) {
+	     				var olPoint = olLineString.components[i];
+	     				try {
+	     					var agsCoordinate = this.encodeAgsGeometry['coordinate'].apply(this, [olPoint]);
+	     			 		agsPath.push(agsCoordinate);
+	     				} catch(e) {
+	     					throw e;
+	     				}
+	     			}
+	     			return agsPath;
+	   			} else {
+	   				OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometry.path...encode array of [x, y]...missing or invalid OpenLayers.Geometry.LineString...");
+	   				throw "...AgsAdapter.encodeAgsGeometry.path...encode array of [x, y]...missing or invalid OpenLayers.Geometry.LineString..." + olLineString;
+	   			}      			
+	        },
+	        
+	        /**
+		     * APIMethod: encodeAgsGeometry.linearring
+		     *   encodes OpenLayers.Geometry.LinearRing object to array of array [x, y]
+		     *
+		     * Parameters:
+		     *   olLinearRing - {OpenLayers.Geometry.LinearRing} object 	    
+			 *
+		     * Returns: 
+		     *   {Array of [x, y]} Array 
+		     */
+	        'linearring': function(olLinearRing) {
+	        	if(_isDefined(olLinearRing) && olLinearRing instanceof OpenLayers.Geometry.LinearRing) {   				
+					var agsRing = new Array();
+					// check if linearring is a closed ring
+					var beginPoint = olLinearRing.components[0];
+					var endPoint = olLinearRing.components[olLinearRing.components.length-1];
+					if(_isSameOLPoint(beginPoint, endPoint) == false) {
+						OpenLayers.Console.error("...AgsAdapter.parseAgsGeometry.ring...not a closed ring...");
+	    				throw "...AgsAdapter.encodeAgsGeometry.linearring...not a closed ring..." + olLinearRing;
+					}
+					for(var i=0; i<olLinearRing.components.length; i++) {
+	     				var olPoint = olLinearRing.components[i];
+	     				try {
+	     					var agsCoordinate = this.encodeAgsGeometry['coordinate'].apply(this, [olPoint]);
+	     			 		agsRing.push(agsCoordinate);
+	     				} catch(e) {
+	     					throw e;
+	     				}
+	     			}
+	     			return agsRing;
+	   			} else {
+	   				OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometry.linearring...encode array of [x, y]...missing or invalid OpenLayers.Geometry.LinearRing...");
+	   				throw "...AgsAdapter.encodeAgsGeometry.linearring...encode array of [x, y]...missing or invalid OpenLayers.Geometry.LinearRing..." + olLinearRing;
+	   			}      			
+	        },
+	    	
+	    	/**
+		     * APIMethod: encodeAgsGeometry.polyline
+		     *   encodes OpenLayers.Geometry.MultiLineString object to esri.geometry.Polyline
+		     *
+		     * Parameters:
+		     *   olMultiLineString - {OpenLayers.Geometry.MultiLineString} object 
+		     *   olSpatialReference - {String} e.g. "EPSG:102113", "EPSG:4326" must be in syntax "Namespace:Idetifier"
+			 *
+		     * Returns: 
+		     *   {esri.geometry.Polyline} object 
+		     */
+	    	'polyline': function(olMultiLineString, olSpatialReference) {
+	    		if(_isDefined(olMultiLineString) && olMultiLineString instanceof OpenLayers.Geometry.MultiLineString) {   				
+					var agsPolyline = new esri.geometry.Polyline();
+					var agsSpatialReference = null;
+					try {
+						if(_isDefined(olSpatialReference)) {
+	    					agsSpatialReference = this.encodeAgsSpatialReference(olSpatialReference);	
+	    				} else {
+	    					// if input spatial reference string is invalid, use default one
+	    					agsSpatialReference = this.encodeAgsSpatialReference(this.config['defaultEncodeWkid']);
+	    				} 
+					} catch(e) {
+						throw e;
+					}
+					agsPolyline.spatialReference = agsSpatialReference;
+					for(var i=0; i<olMultiLineString.components.length; i++) {
+	     				var olLineString = olMultiLineString.components[i];
+	     				try {
+	     					var agsPath = this.encodeAgsGeometry['path'].apply(this, [olLineString]);
+	     					agsPolyline.addPath(agsPath);
+	     				} catch(e) {
+	     					throw e;
+	     				}
+	     			}     				    		     					
+					return agsPolyline;
+	   			} else {
+	   				OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometry.polyline...encode esri.geometry.polyline...missing or invalid OpenLayers.Geometry.MultiLineString...");
+	   				throw "...AgsAdapter.encodeAgsGeometry.polyline...encode esri.geometry.polyline...missing or invalid OpenLayers.Geometry.MultiLineString..." + olMultiLineString;
+	   			}
+	    	},
+	    	
+	    	/**
+		     * APIMethod: encodeAgsGeometry.polygon
+		     *   encodes OpenLayers.Geometry.Polygon object to esri.geometry.Polygon
+		     *
+		     * Parameters:
+		     *   olPolygon - {OpenLayers.Geometry.Polygon} object 
+		     *   olSpatialReference - {String} e.g. "EPSG:102113", "EPSG:4326" must be in syntax "Namespace:Idetifier"
+			 *
+		     * Returns: 
+		     *   {esri.geometry.Polygon} object 
+		     */
+	    	'polygon': function(olPolygon, olSpatialReference) {
+	    		if(_isDefined(olPolygon) && olPolygon instanceof OpenLayers.Geometry.Polygon) {   				
+	     			var agsPolygon = new esri.geometry.Polygon();				
+					var agsSpatialReference = null;
+					try {
+						if(_isDefined(olSpatialReference)) {
+	    					agsSpatialReference = this.encodeAgsSpatialReference(olSpatialReference);	
+	    				} else {
+	    					// if input spatial reference string is invalid, use default one
+	    					agsSpatialReference = this.encodeAgsSpatialReference(this.config['defaultEncodeWkid']);
+	    				} 
+					} catch(e) {
+						throw e;
+					}
+					agsPolygon.spatialReference = agsSpatialReference;
+					for(var i=0; i<olPolygon.components.length; i++) {
+	     				var olLinearRing = olPolygon.components[i];
+	     				try {
+	     					var agsRing = this.encodeAgsGeometry['linearring'].apply(this, [olLinearRing]);
+	     					agsPolygon.addRing(agsRing);     					
+	     				} catch(e) {
+	     					throw e;
+	     				}
+	     			}     			     		  			
+					return agsPolygon;
+	   			} else {
+	   				OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometry.polygon...encode esri.geometry.polygon...missing or invalid OpenLayers.Geometry.Polygon...");
+	   				throw "...AgsAdapter.encodeAgsGeometry.polygon...encode esri.geometry.polygon...missing or invalid OpenLayers.Geometry.Polygon..." + olPolygon;
+	   			}
+	    	},
+	    	
+	    	/**
+		     * APIMethod: encodeAgsGeometry.extent
+		     *   encodes OpenLayers.Bounds object to esri.geometry.Extent
+		     *
+		     * Parameters:
+		     *   olBounds - {OpenLayers.Bounds} object 
+		     *   olSpatialReference - {String} e.g. "EPSG:102113", "EPSG:4326" must be in syntax "Namespace:Idetifier"
+			 *
+		     * Returns: 
+		     *   {esri.geometry.Extent} object 
+		     */
+	    	'extent': function(olBounds, olSpatialReference) {
+	    		if(_isDefined(olBounds) && olBounds instanceof OpenLayers.Bounds) {   								
+					var agsExtent = null;
+					var agsSpatialReference = null;
+					try {
+						if(_isDefined(olSpatialReference)) {
+	    					agsSpatialReference = this.encodeAgsSpatialReference(olSpatialReference);	
+	    				} else {
+	    					// if input spatial reference string is invalid, use default one
+	    					agsSpatialReference = this.encodeAgsSpatialReference(this.config['defaultEncodeWkid']);
+	    				} 
+					} catch(e) {
+						throw e;
+					}	     			
+	     			agsExtent = new esri.geometry.Extent(olBounds.toArray()[0], olBounds.toArray()[1], olBounds.toArray()[2], olBounds.toArray()[3], agsSpatialReference);     					     			   					     				
+					return agsExtent;
+	   			} else {
+	   				OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometry.extent...encode esri.geometry.Extent...missing or invalid OpenLayers.Bounds...");
+	   				throw "...AgsAdapter.encodeAgsGeometry.extent...encode esri.geometry.Extent...missing or invalid OpenLayers.Bounds..." + olBounds;
+	   			}
+	    	}
+	    };
+	    
+	    /**
+		 * How OpenLayers symbol works: 		
+ 		 *   OpenLayers features can have a number of style attributes. The 'default' 
+ 		 *   style will typically be used if no other style is specified.
+ 		 *
+ 		 * Default style properties:
+ 		 *
+		 *  - fillColor: "#ee9900",
+		 *  - fillOpacity: 0.4, 
+		 *  - hoverFillColor: "white",
+		 *  - hoverFillOpacity: 0.8,
+		 *  - strokeColor: "#ee9900",
+		 *  - strokeOpacity: 1,
+		 *  - strokeWidth: 1,
+		 *  - strokeLinecap: "round",  [butt | round | square]
+		 *  - strokeDashstyle: "solid", [dot | dash | dashdot | longdash | longdashdot | solid]
+		 *  - hoverStrokeColor: "red",
+		 *  - hoverStrokeOpacity: 1,
+		 *  - hoverStrokeWidth: 0.2,
+		 *  - pointRadius: 6,
+		 *  - hoverPointRadius: 1,
+		 *  - hoverPointUnit: "%",
+		 *  - pointerEvents: "visiblePainted"
+		 *  - cursor: ""
+		 *
+		 * Other style properties that have no default values:
+		 *
+		 *  - externalGraphic,
+		 *  - graphicWidth,
+		 *  - graphicHeight,
+		 *  - graphicOpacity,
+		 *  - graphicXOffset,
+		 *  - graphicYOffset,
+		 *  - graphicName,
+		 *  - display
+		 */ 
+		
+		/**
+	     * APIMethod: encodeAgsSymbol
+	     *   encodes OpenLayers.Feature.Vector.style object to esri.symbol.Symbol
+	     *
+	     * Parameters:
+	     *   olStyle - {OpenLayers.Feature.Vector.style} object 
+		 *
+	     * Returns: 
+	     *   {esri.symbol.Symbol} object 
+	     */   
+	    this.encodeAgsSymbol = {
+	    	/**
+		     * APIMethod: SimpleMarkerSymbol
+		     *   encodes OpenLayers.Feature.Vector.style object to esri.symbol.SimpleMarkerSymbol
+		     *
+		     * Parameters:
+		     *   olStyle - {OpenLayers.Feature.Vector.style} object 
+			 *
+		     * Returns: 
+		     *   {esri.symbol.SimpleMarkerSymbol} object 
+		     */
+	    	"SimpleMarkerSymbol": function(olStyle) {
+	    		if(_isDefined(olStyle)) {
+		    		var agsSimpleMarkerSymbol = null;
+		    		var style = "STYLE_CIRCLE"; // 'style' of esri.symbol.SimpleMarkerSymbol, 'STYLE_CIRCLE' is the only supported simple marker style in OpenLayers
+		    		var size = olStyle['pointRadius'] || 6;	// 'size' of esri.symbol.SimpleMarkerSymbol, default is 6
+		    		var color = null
+					var opacity = olStyle['fillOpacity'] || 1;
+					if(_isDefined(olStyle['fillColor'])) {
+						color = new dojo.Color(olStyle['fillColor']); // 'color' of esri.symbol.SimpleMarkerSymbol, default is null	
+						color.a = opacity; // opacity of esri.symbol.SimpleMarkerSymbol, default is 1
+					}
+					
+					var xoffset = olStyle['graphicXOffset'] || 0; // 'xoffset' of esri.symbol.SimpleMarkerSymbol
+					var yoffset = olStyle['graphicYOffset'] || 0; // 'yoffset' of esri.symbol.SimpleMarkerSymbol
+					
+					var outline_color = null;
+					var outline_opacity = olStyle['strokeOpacity'] || 1;
+					if(_isDefined(olStyle['strokeColor'])) {
+						outline_color = new dojo.Color(olStyle['strokeColor']); // outline color of esri.symbol.SimpleMarkerSymbol, default is null	
+						outline_color.a = outline_opacity; // outline opacity of esri.symbol.SimpleMarkerSymbol, default is 1
+					}
+																    	
+		    		var outline_width = olStyle['strokeWidth'] || 1; // outline width of esri.symbol.SimpleMarkerSymbol, default is 1
+		    		var outline_style = _OL_AGS_SIMPLE_LINESYMBOL_MAP[olStyle['strokeDashstyle']] || "STYLE_SOLID"; // outline style of esri.symbol.SimpleMarkerSymbol, default is 'STYLE_SOLID' 
+		    		
+					var agsSimpleLineSymbol = new esri.symbol.SimpleLineSymbol(outline_style, outline_color, outline_width);		    		
+		    		agsSimpleMarkerSymbol = new esri.symbol.SimpleMarkerSymbol(style, size, agsSimpleLineSymbol, color);
+					agsSimpleMarkerSymbol.setOffset(xoffset, yoffset);
+					
+		    		return agsSimpleMarkerSymbol;
+		    	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsSymbol.SimpleMarkerSymbol...encode esri.symbol.SimpleMarkerSymbol...missing or invalid openlayers style...");
+	   				throw "...AgsAdapter.encodeAgsSymbol.SimpleMarkerSymbol...encode esri.symbol.SimpleMarkerSymbol...missing or invalid openlayers style..." + olStyle;
+		    	}
+	    	},
+			
+			/**
+		     * APIMethod: PictureMarkerSymbol
+		     *   encodes OpenLayers.Feature.Vector.style object to esri.symbol.PictureMarkerSymbol
+		     *
+		     * Parameters:
+		     *   olStyle - {OpenLayers.Feature.Vector.style} object 
+			 *
+		     * Returns: 
+		     *   {esri.symbol.PictureMarkerSymbol} object 
+		     */
+			"PictureMarkerSymbol": function(olStyle) {
+				if(_isDefined(olStyle)) {
+		    		var agsPictureMarkerSymbol = null;
+		    		var size = olStyle['pointRadius'] || 6;	// 'size' of esri.symbol.PictureMarkerSymbol, default is 6
+		    		var offsetX = olStyle['graphicXOffset'] || 0; // 'xoffset' of esri.symbol.PictureMarkerSymbol
+					var offsetY = olStyle['graphicYOffset'] || 0; // 'yoffset' of esri.symbol.PictureMarkerSymbol	    		
+		    		
+					var url = olStyle['externalGraphic'] || "../../img/marker.png"; // 'url' of esri.symbol.PictureMarkerSymbol
+					var width = olStyle['graphicWidth'] || 21; // 'width' of esri.symbol.PictureMarkerSymbol
+					var height = olStyle['graphicHeight'] || 25; // 'height' of esri.symbol.PictureMarkerSymbol
+					
+					var agsPictureMarkerSymbol = new esri.symbol.PictureMarkerSymbol(url, width, height);
+					agsPictureMarkerSymbol.setSize(size);
+					agsPictureMarkerSymbol.setOffset(offsetX, offsetY);
+					
+		    		return agsPictureMarkerSymbol;
+		    	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsSymbol.PictureMarkerSymbol...encode esri.symbol.PictureMarkerSymbol...missing or invalid openlayers style...");
+	   				throw "...AgsAdapter.encodeAgsSymbol.PictureMarkerSymbol...encode esri.symbol.PictureMarkerSymbol...missing or invalid openlayers style..." + olStyle;
+		    	}	
+			},
+	    	
+			/**
+		     * APIMethod: PictureMarkerSymbol
+		     *   encodes OpenLayers.Feature.Vector.style object to esri.symbol.SimpleLineSymbol
+		     *
+		     * Parameters:
+		     *   olStyle - {OpenLayers.Feature.Vector.style} object 
+			 *
+		     * Returns: 
+		     *   {esri.symbol.SimpleLineSymbol} object 
+		     */
+	    	"SimpleLineSymbol": function(olStyle) {
+	    		if(_isDefined(olStyle)) {
+		    		var color = null;
+					var opacity = olStyle['strokeOpacity'] || 1;
+					if(_isDefined(olStyle['strokeColor'])) {
+						color = new dojo.Color(olStyle['strokeColor']); // 'color' of esri.symbol.SimpleMarkerSymbol, default is null	
+						color.a = opacity; // 'opacity' of esri.symbol.SimpleMarkerSymbol, default is 1
+					}
+																    	
+		    		var width = olStyle['strokeWidth'] || 1; // 'width' of esri.symbol.SimpleMarkerSymbol, default is 1
+		    		var style = _OL_AGS_SIMPLE_LINESYMBOL_MAP[olStyle['strokeDashstyle']] || "STYLE_SOLID"; // 'style' of esri.symbol.SimpleMarkerSymbol, default is 'STYLE_SOLID' 
+		    		
+					var agsSimpleLineSymbol = new esri.symbol.SimpleLineSymbol(style, color, width);	
+		    		return agsSimpleLineSymbol;
+		    	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsSymbol.SimpleLineSymbol...encode esri.symbol.SimpleLineSymbol...missing or invalid openlayers style...");
+	   				throw "...AgsAdapter.encodeAgsSymbol.SimpleLineSymbol...encode esri.symbol.SimpleLineSymbol...missing or invalid openlayers style..." + olStyle;
+		    	}
+	    	},
+			
+			/**
+		     * APIMethod: CartographicLineSymbol
+		     *   encodes OpenLayers.Feature.Vector.style object to esri.symbol.CartographicLineSymbol
+		     *
+		     * Parameters:
+		     *   olStyle - {OpenLayers.Feature.Vector.style} object 
+			 *
+		     * Returns: 
+		     *   {esri.symbol.CartographicLineSymbol} object 
+		     */ 
+			"CartographicLineSymbol": function(olStyle) {
+				OpenLayers.Console.error("...AgsAdapter.encodeAgsSymbol.CartographicLineSymbol is not implemented yet...");
+	   			throw "...AgsAdapter.encodeAgsSymbol.CartographicLineSymbol is not implemented yet...";
+			},
+			
+			/**
+		     * APIMethod: SimpleFillSymbol
+		     *   encodes OpenLayers.Feature.Vector.style object to esri.symbol.SimpleFillSymbol
+		     *
+		     * Parameters:
+		     *   olStyle - {OpenLayers.Feature.Vector.style} object 
+			 *
+		     * Returns: 
+		     *   {esri.symbol.SimpleFillSymbol} object 
+		     */ 	
+	    	"SimpleFillSymbol": function(olStyle) {
+	    		if(_isDefined(olStyle)) {
+		    		var agsSimpleFillSymbol = null;
+		    		var style = "STYLE_SOLID"; // 'style' of esri.symbol.SimpleFillSymbol, 'STYLE_SOLID' is the only supported simple fill style in OpenLayers
+		    		var color = null
+					var opacity = olStyle['fillOpacity'] || 1;
+					if(_isDefined(olStyle['fillColor'])) {
+						color = new dojo.Color(olStyle['fillColor']); // 'color' of esri.symbol.SimpleFillSymbol, default is null	
+						color.a = opacity; // opacity of esri.symbol.SimpleFillSymbol, default is 1
+					}
+					var outline_color = null;
+					var outline_opacity = olStyle['strokeOpacity'] || 1;
+					if(_isDefined(olStyle['strokeColor'])) {
+						outline_color = new dojo.Color(olStyle['strokeColor']); // outline color of esri.symbol.SimpleFillSymbol, default is null	
+						outline_color.a = outline_opacity; // outline opacity of esri.symbol.SimpleFillSymbol, default is 1
+					}									    	
+		    		var outline_width = olStyle['strokeWidth'] || 1; // outline width of esri.symbol.SimpleFillSymbol, default is 1
+		    		var outline_style = _OL_AGS_SIMPLE_LINESYMBOL_MAP[olStyle['strokeDashstyle']] || "STYLE_SOLID"; // outline style of esri.symbol.SimpleFillSymbol, default is 'STYLE_SOLID' 
+		    		
+					var agsSimpleLineSymbol = new esri.symbol.SimpleLineSymbol(outline_style, outline_color, outline_width);		    		
+		    		agsSimpleFillSymbol = new esri.symbol.SimpleFillSymbol(style, agsSimpleLineSymbol, color);
+					
+		    		return agsSimpleFillSymbol;
+		    	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsSymbol.SimpleFillSymbol...encode esri.symbol.SimpleFillSymbol...missing or invalid openlayers style...");
+	   				throw "...AgsAdapter.encodeAgsSymbol.SimpleFillSymbol...encode esri.symbol.SimpleFillSymbol...missing or invalid openlayers style..." + olStyle;
+		    	}
+	    	},
+			
+			/**
+		     * APIMethod: PictureFillSymbol
+		     *   encodes OpenLayers.Feature.Vector.style object to esri.symbol.PictureFillSymbol
+		     *
+		     * Parameters:
+		     *   olStyle - {OpenLayers.Feature.Vector.style} object 
+			 *
+		     * Returns: 
+		     *   {esri.symbol.PictureFillSymbol} object 
+		     */ 
+			"PictureFillSymbol": function(olStyle) {
+				OpenLayers.Console.error("...AgsAdapter.encodeAgsSymbol.PictureFillSymbol is not implemented yet...");
+	   			throw "...AgsAdapter.encodeAgsSymbol.PictureFillSymbol is not implemented yet...";
+			}
+	    };
+	    
+	    /**
+	     * APIMethod: encodeAgsGraphic
+	     *   enocdes OpenLayers.Feature.Vector to esri.Graphic object
+	     *
+	     * Parameters:
+	     *   olFeature - {OpenLayers.Feature.Vector} object 
+	     *   olSpatialReference - {string}
+		 *
+	     * Returns: 
+	     *   {esri.Graphic} object 
+	     */
+	    this.encodeAgsGraphic = function(olFeature, olSpatialReference) {
+	    	if(olFeature instanceof OpenLayers.Feature.Vector && _isDefined(olFeature.geometry)) {
+	    		var agsGraphic = null;
+	    		var geometryType = _OL_GEOMETRY_MAP[olFeature.geometry.CLASS_NAME];
+	    		var geometry = null;
+	    		try {
+	    			geometry = this.encodeAgsGeometry[geometryType].apply(this, [olFeature.geometry, olSpatialReference]);
+	    		} catch(e) {
+	    			throw e;
+	    		}
+	    		var attributes = _isDefined(olFeature.attributes) ? olFeature.attributes : {};
+	    		var symbol = null;
+	    		if(_isDefined(olFeature.style)) {
+	    			// there is no way to tell the type of an OpenLayers style, so always tell by geometry type
+					// TODO: tell if style is PictureMarkerSymbol
+					var symbol_type = _OL_AGS_STYLE_MAP[olFeature.geometry.CLASS_NAME];    		
+	    			try {
+	    				symbol = this.encodeAgsSymbol[symbol_type].apply(this, [olFeature.style]);
+	    			} catch(e) {
+	    				throw e;
+	    			}	
+	    		}
+	    		var infoTemplate = null;
+	    		if(_isDefined(attributes['infoTemplateTitle']) && _isDefined(attributes['infoTemplateContent'])) {
+	    			infoTemplate = new esri.InfoTemplate(attributes['infoTemplateTitle'], attributes['infoTemplateContent']);
+	    		}	    		
+	    		agsGraphic = new esri.Graphic(geometry, symbol, attributes, infoTemplate);
+	    		return agsGraphic;
+	    	} else {
+	    		OpenLayers.Console.error("...AgsAdapter.encodeAgsGraphic...encode esri.geometry.Geometry...missing or invalid OpenLayers.Feature.Vector...");    	
+	    		throw "...AgsAdapter.encodeAgsGraphic...encode esri.geometry.Geometry...missing or invalid OpenLayers.Feature.Vector..." + olFeature;
+	    	}
+	    };
+	    
+	    /**
+	     * APIMethod: encodeAgsGraphic
+	     *   enocdes array of OpenLayers.Feature.Vector to array of esri.Graphic object
+	     *
+	     * Parameters:
+	     *   olFeatures - {Array of OpenLayers.Feature.Vector} Array
+	     *   olSpatialReference - {string}
+		 *
+	     * Returns: 
+	     *   {esri.Graphic} object 
+	     */
+	    this.encodeAgsGraphics = function(olFeatures, olSpatialReference) {
+	   		var agsGraphics = [];
+	    	if(_isDefined(olFeatures) && olFeatures instanceof Array) {
+	    		for(var i=0; i<olFeatures.length; i++) {
+	    	 		try {
+	    	 			var agsGraphic = this.encodeAgsGraphic.apply(this, [olFeatures[i], olSpatialReference]);
+	    	 			agsGraphics.push(agsGraphic);
+	    	 		} catch(e) {
+	    	 			throw e;
+	    	 		}
+	    	 	} 
+	    	 	return agsGraphics;   		
+	    	} else {
+	    	 	OpenLayers.Console.error("...AgsAdapter.encodeAgsGraphics...encode array esri.Graphic...missing or invalid array of OpenLayers.Feture.Vector...");
+	    		throw "...AgsAdapter.encodeAgsGraphics...encode array esri.Graphic...missing or invalid array of OpenLayers.Feture.Vector..." + olFeatures;
+	    	}	    	
+	    };
+
+	    /**
+	     * APIMethod: encodeAgsFindParameters
+	     *   encode an esri.tasks.FindParameters from an object literal
+	     *
+	     * Parameters:
+	     *   findParameters - {object} object 
+		 *
+	     * Returns: 
+	     *   {esri.tasks.FindParameters} object 
+	     */
+	    this.encodeAgsFindParameters = function(findParameters) {
+	    	if(_isDefined(findParameters)) {
+		    	var agsFindParameters = new esri.tasks.FindParameters();		    			    	
+		    	// 'contains' parameter
+		    	agsFindParameters['contains'] = findParameters['contains'] || false;     			    	
+		    	// 'outSpatialReference' parameter
+		    	if(!_isDefined(findParameters['outSpatialReference'])) {
+		    		agsFindParameters['outSpatialReference'] = null;
+		    	} else {		    				    		
+		    		if(!(findParameters['outSpatialReference'] instanceof esri.SpatialReference)) {
+		    			try {
+		    				// try to encode AgsJs spatial reference
+		    				findParameters['outSpatialReference'] = this.encodeAgsSpatialReference(findParameters['outSpatialReference']);
+		    			} catch(e) {
+		    				throw e;
+		    			}
+		    		}
+		    		agsFindParameters['outSpatialReference'] = findParameters['outSpatialReference'];
+		    	}
+		    	// 'returnGeometry' parameter
+		    	agsFindParameters['returnGeometry'] = findParameters['returnGeometry'] || true;
+		    	// 'layerIds' parameter
+		    	if(!_isDefined(findParameters['layerIds'])) {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsFindParameters...parameter 'layerIds' can not be null or empty...");
+		    		throw "...AgsAdapter.encodeAgsFindParameters...parameter 'layerIds' can not be null or empty...";
+		    	} else {
+		    		agsFindParameters['layerIds'] = findParameters['layerIds'];
+		    	}
+		    	// 'searchFields' parameter
+		    	if(!_isDefined(findParameters['searchFields'])) {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsFindParameters...parameter 'searchFields' can not be null or empty...");
+		    		throw "...AgsAdapter.encodeAgsFindParameters...parameter 'searchFields' can not be null or empty...";
+		    	} else {
+		    		agsFindParameters['searchFields'] = findParameters['searchFields'];
+		    	}
+		    	// 'searchText' parameter
+		    	if(!_isDefined(findParameters['searchText'])) {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsFindParameters...parameter 'searchText' can not be null or empty...");
+		    		throw "...AgsAdapter.encodeAgsFindParameters...parameter 'searchText' can not be null or empty...";
+		    	} else {
+		    		agsFindParameters['searchText'] = findParameters['searchText'];
+		    	}		    	
+		    	return agsFindParameters;
+	    	} else {
+	    		OpenLayers.Console.error("...AgsAdapter.encodeAgsFindParameters...encode ags FindParameter...missing or invalid input object literal...");
+	    		throw "...AgsAdapter.encodeAgsFindParameters...encode ags FindParameter...missing or invalid input object literal..." + findParameters;
+	    	}
+	    };
+	    
+	    /**
+	     * APIMethod: encodeAgsIdentifyParameters
+	     *   encodes an esri.tasks.IdentifyParameters from an object literal
+	     *
+	     * Parameters:
+	     *   identifyParameters - {object} object 
+		 *
+	     * Returns: 
+	     *   {esri.tasks.IdentifyParameters} object 
+	     */
+	    this.encodeAgsIdentifyParameters = function(identifyParameters) {
+	    	if(_isDefined(identifyParameters)) {
+		    	var agsIdentifyParameters = new esri.tasks.IdentifyParameters();			
+		    	// 'dpi' parameter
+		    	if(_isNumber(identifyParameters['dpi'])) {
+		    		agsIdentifyParameters['dpi'] = identifyParameters['dpi'];
+		    	} else {
+		    		agsIdentifyParameters['dpi'] = 96;
+		    	}		 
+		    	// 'geometry' parameter	
+		    	if(_isAgsGeometry(identifyParameters['geometry'])) { // input is already esri.geometry.Geometry
+		    		agsIdentifyParameters['geometry'] = identifyParameters['geometry'];
+		    	} else if(_isOLGeometry(identifyParameters['geometry'])) { // input is OpenLayers.Geometry.Geometry
+		    		var geometryType = _OL_GEOMETRY_MAP[identifyParameters['geometry'].CLASS_NAME];
+		    		var agsGeometry = this.encodeAgsGeometry[geometryType].apply(this, [identifyParameters['geometry'], this.config['defaultEncodeWkid']]);
+		    		agsIdentifyParameters['geometry'] = agsGeometry;
+		    	} else if(identifyParameters['geometry'] instanceof OpenLayers.Feature.Vector) { // input is OpenLayers.Feature.Vector
+		    		var geometryType = _OL_GEOMETRY_MAP[identifyParameters['geometry'].geometry.CLASS_NAME];
+		    		var agsGeometry = this.encodeAgsGeometry[geometryType].apply(this, [identifyParameters['geometry'].geometry, this.config['defaultEncodeWkid']]);
+		    		agsIdentifyParameters['geometry'] = agsGeometry;
+		    	} else {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsIdentifyParameters...parameter 'geometry' missing or invalid...");
+		    		throw "...AgsAdapter.encodeAgsIdentifyParameters...parameter 'geometry' missing or invalid...";
+		    	}		    	
+		    	// 'height' parameter
+		    	if(!_isNumber(identifyParameters['height'])) {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsIdentifyParameters...parameter 'height' is missing or invalid...");
+		    		throw "...AgsAdapter.encodeAgsIdentifyParameters...parameter 'height' is missing or invalid...";
+		    	} else {
+		    		agsIdentifyParameters['height'] = identifyParameters['height'];
+		    	}
+		    	// 'layersIds' parameter
+		    	if(!_isDefined(identifyParameters['layerIds'])) {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsIdentifyParameters...parameter 'layerIds' is missing or invalid...");
+		    		throw "...AgsAdapter.encodeAgsIdentifyParameters...parameter 'layerIds' is missing or invalid...";
+		    	} else {
+		    		agsIdentifyParameters['layerIds'] = identifyParameters['layerIds'];
+		    	}		    	
+		    	// 'layerOption' parameter
+		    	if(_isDefined(identifyParameters['layerOption'])) {
+		    		agsIdentifyParameters['layerOption'] = identifyParameters['layerOption'];
+		    	} else {
+		    		agsIdentifyParameters['layerOption'] = "all";
+		    	}
+		    	// 'mapExtent' parameter		    			    		
+	    		if(identifyParameters['mapExtent'] instanceof OpenLayers.Bounds) {
+	    			try {
+	    				agsIdentifyParameters['mapExtent'] = this.encodeAgsGeometry['extent'].apply(this, [identifyParameters['mapExtent'], this.config['defaultEncodeWkid']]);
+	    			} catch(e) {
+	    				throw e;
+	    			}
+	    		} else if(identifyParameters['mapExtent'] instanceof esri.geometry.Extent){		    		
+	    			agsIdentifyParameters['mapExtent'] = identifyParameters['mapExtent'];
+	    		} else {
+	    			OpenLayers.Console.error("...AgsAdapter.encodeAgsIdentifyParameters...parameter 'mapExtent' is missing or invalid...");
+	    			throw "...AgsAdapter.encodeAgsIdentifyParameters...parameter 'mapExtent' is missing or invalid...";
+	    		}		    			    	
+		    	// 'returnGeometry' parameter
+		    	if(_isBoolean(identifyParameters['returnGeometry'])) {
+		    		agsIdentifyParameters['returnGeometry'] = identifyParameters['returnGeometry'];
+		    	} else {
+		    		agsIdentifyParameters['returnGeometry'] = true;
+		    	}		    	
+		    	// 'spatialReference' parameter		    		    
+		    	if(!_isDefined(identifyParameters['spatialReference'])) {
+		    		agsIdentifyParameters['spatialReference'] = null;
+		    	} else {
+		    		if(!(identifyParameters['spatialReference'] instanceof esri.SpatialReference)) {
+		    			try {
+		    				agsIdentifyParameters['spatialReference'] = this.encodeAgsSpatialReference(identifyParameters['spatialReference']);
+		    			} catch(e) {
+		    				throw e;
+		    			}
+		    		} else {
+		    			agsIdentifyParameters['spatialReference'] = identifyParameters['spatialReference'];
+		    		}
+		    	}
+				// 'tolerance' parameter		    	
+		    	if(_isDefined(identifyParameters['tolerance'])) {
+		    		agsIdentifyParameters['tolerance'] = identifyParameters['tolerance'];
+		    	} else {
+		    		agsIdentifyParameters['tolerance'] = 0;
+		    	}
+		    	// 'width' parameter
+		    	if(!_isNumber(identifyParameters['width'])) {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsIdentifyParameters...parameter 'width' is missing or invalid...");
+		    		throw "...AgsAdapter.encodeAgsIdentifyParameters...parameter 'width' is missing or invalid...";
+		    	} else {
+		    		agsIdentifyParameters['width'] = identifyParameters['width'];
+		    	}		    	
+		    	return agsIdentifyParameters;
+		    } else {
+		    	OpenLayers.Console.error("...AgsAdapter.encodeAgsIdentifyParameters...encode ags IdentifyParameters...missing or invalid input object literal...");
+	    		throw "...AgsAdapter.encodeAgsIdentifyParameters...encode ags IdentifyParameters...missing or invalid input object literal..." + identifyParameters;
+		    }
+	    };
+	    
+	    /**
+	     * APIMethod: encodeAgsBufferParameters
+	     *   encode an esri.tasks.BufferParameters from an object literal
+	     *
+	     * Parameters:
+	     *   bufferParameters - {} object 
+		 *
+	     * Returns: 
+	     *   {esri.tasks.BufferParameters} object 
+	     */
+	    this.encodeAgsBufferParameters = function(bufferParameters) {
+	    	if(_isDefined(bufferParameters)) {
+		    	var agsBufferParameters = new esri.tasks.BufferParameters();	    	
+		    	// 'bufferSpatialReference' parameter		    		    
+		    	if(!_isDefined(bufferParameters['bufferSpatialReference'])) {
+		    		agsBufferParameters['bufferSpatialReference'] = null;
+		    	} else {
+		    		if(!(bufferParameters['bufferSpatialReference'] instanceof esri.SpatialReference)) {
+		    			try {
+		    				agsBufferParameters['bufferSpatialReference'] = this.encodeAgsSpatialReference(bufferParameters['bufferSpatialReference']);
+		    			} catch(e) {
+		    				throw e;
+		    			}
+		    		} else {
+		    			agsBufferParameters['bufferSpatialReference'] = bufferParameters['bufferSpatialReference'];
+		    		}
+		    	}
+		    	// 'distance' parameter
+		    	if(bufferParameters['distances'] instanceof Array) {
+		    		agsBufferParameters['distances'] = bufferParameters['distances'];
+		    	} else {
+		    		agsBufferParameters['distances'] = [50];
+		    	}	
+		    	// 'features' parameter    				
+				if(_isDefined(bufferParameters['features']) && bufferParameters['features'] instanceof Array) {
+		    		var agsGraphics = [];
+		    		for(var i=0; i<bufferParameters['features'].length; i++) {
+		    			if(bufferParameters['features'][i] instanceof esri.Graphic) {
+		    				agsGraphics.push(bufferParameters['features'][i]);
+		    			} else if(bufferParameters['features'][i] instanceof OpenLayers.Feature.Vector) {
+		    				agsGraphics.push(this.encodeAgsGraphic(bufferParameters['features'][i], this.config['defaultEncodeWkid']));
+		    			} else if(_isOLGeometry(bufferParameters['features'][i])) {
+		    				var olFeature = new OpenLayers.Feature.Vector(bufferParameters['features'][i]);
+		    				agsGraphics.push(this.encodeAgsGraphic(olFeature, this.config['defaultEncodeWkid']));
+		    			} else {
+		    				OpenLayers.Console.error("...AgsAdapter.encodeAgsBufferParameters...parameter 'features' is missing or invalid...");
+		    				throw "...AgsAdapter.encodeAgsBufferParameters...parameter 'features' is missing or invalid...";	
+		    			}
+		    		}
+		    		agsBufferParameters['features'] = agsGraphics;	    		
+		    	} else {	    		
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsBufferParameters...parameter 'features' is missing or invalid...");
+		    		throw "...AgsAdapter.encodeAgsBufferParameters...parameter 'features' is missing or invalid...";
+		    	}
+				// 'outSpatialReference'
+				if(!_isDefined(bufferParameters['outSpatialReference'])) {
+		    		agsBufferParameters['outSpatialReference'] = null;
+		    	} else {
+		    		if(!(bufferParameters['outSpatialReference'] instanceof esri.SpatialReference)) {
+		    			try {
+		    				agsBufferParameters['outSpatialReference'] = this.encodeAgsSpatialReference(bufferParameters['outSpatialReference']);
+		    			} catch(e) {
+		    				throw e;
+		    			}
+		    		} else {
+		    			agsBufferParameters['outSpatialReference'] = bufferParameters['outSpatialReference'];
+		    		}
+		    	}	    	
+		    	// 'unionResults' parameter
+		    	if(_isDefined(bufferParameters['unionResults'])) {
+		    		agsBufferParameters['unionResults'] = bufferParameters['unionResults'];
+		    	} else {
+		    		agsBufferParameters['unionResults'] = false;
+		    	}
+			    // 'unit' parameter
+			    if(_isDefined(_AGS_UNITS[bufferParameters['unit']])) {
+			    	agsBufferParameters['unit'] = _AGS_UNITS[bufferParameters['unit']];
+			    } else {
+			    	agsBufferParameters['unit'] = _AGS_UNITS["UNIT_KILOMETER"];
+			    }		  		   
+		    	return agsBufferParameters;
+		    } else {
+		    	OpenLayers.Console.error("...AgsAdapter.encodeAgsBufferParameters...encode ags BufferParameters...missing or invalid input object literal...");
+	    		throw "...AgsAdapter.encodeAgsBufferParameters...encode ags BufferParameters...missing or invalid input object literal..." + bufferParameters;
+		    }
+	    };
+	    
+	    /**
+	     * APIMethod: encodeAgsQuery
+	     *   encodes an esri.tasks.Query from an object literal
+	     *
+	     * Parameters:
+	     *   query - {} object 
+		 *
+	     * Returns: 
+	     *   {esri.tasks.Query} object 
+	     */
+	    this.encodeAgsQuery = function(query) {
+	    	if(_isDefined(query)) {
+		    	var agsQuery = new esri.tasks.Query();	    	
+		    	// 'geometry' parameter	
+		    	if(_isAgsGeometry(query['geometry'])) { // input is already esri.geometry.Geometry
+		    		agsQuery['geometry'] = query['geometry'];
+		    	} else if(_isOLGeometry(query['geometry'])) { // input is OpenLayers.Geometry.Geometry
+		    		var geometryType = _OL_GEOMETRY_MAP[query['geometry'].CLASS_NAME];
+		    		var agsGeometry = this.encodeAgsGeometry[geometryType].apply(this, [query['geometry'], this.config['defaultEncodeWkid']]);
+		    		agsQuery['geometry'] = agsGeometry;
+		    	} else if(query['geometry'] instanceof OpenLayers.Feature.Vector) { // input is OpenLayers.Feature.Vector
+		    		var geometryType = _OL_GEOMETRY_MAP[query['geometry'].geometry.CLASS_NAME];
+		    		var agsGeometry = this.encodeAgsGeometry[geometryType].apply(this, [query['geometry'].geometry, this.config['defaultEncodeWkid']]);
+		    		agsQuery['geometry'] = agsGeometry;
+		    	} else {
+		    		// can 'geometry' be null or empty?
+		    		//OpenLayers.Console.error("...AgsAdapter.encodeAgsQuery...parameter 'geometry' missing or invalid...");
+		    		//throw "...AgsAdapter.encodeAgsQuery...parameter 'geometry' missing or invalid...";
+		    	}		
+				// 'outFields'
+		    	if(!_isDefined(query['outFields'])) {
+		    		OpenLayers.Console.error("...AgsAdapter.encodeAgsQuery...parameter 'outFields' is mandatory...");
+		    		throw "...AgsAdapter.encodeAgsQuery...parameter 'outFields' is mandatory...";
+		    	} else {
+		    		agsQuery['outFields'] = query['outFields'];
+		    	}			
+				// 'outSpatialReference'
+				if(!_isDefined(query['outSpatialReference'])) {
+		    		agsQuery['outSpatialReference'] = null;
+		    	} else {
+		    		if(!(query['outSpatialReference'] instanceof esri.SpatialReference)) {
+		    			try {
+		    				agsQuery['outSpatialReference'] = this.encodeAgsSpatialReference(query['outSpatialReference']);
+		    			} catch(e) {
+		    				throw e;
+		    			}
+		    		} else {
+		    			agsQuery['outSpatialReference'] = query['outSpatialReference'];
+		    		}
+		    	}	
+				// 'returnGeometry' parameter
+				if(_isDefined(query['returnGeometry'])) {
+					agsQuery['returnGeometry'] = query['returnGeometry'];
+				} else {
+					agsQuery['returnGeometry'] = true;
+				}
+				// 'spatialRelationship' parameter			
+				if(_isDefined(_AGS_SPATIALRELATIONSHIP[query['spatialRelationship']])) {
+					agsQuery['spatialRelationship'] = _AGS_SPATIALRELATIONSHIP[query['spatialRelationship']];
+				} else {
+					agsQuery['spatialRelationship'] = _AGS_SPATIALRELATIONSHIP["INTERSECTS"];
+				}					
+				// 'text' parameter
+				agsQuery['text'] = query['text'] ? query['text'] : "";
+				// 'where' parameter
+				agsQuery['where'] = query['where'] ? query['where'] : "";			
+		    	return agsQuery;
+		    } else {
+		    	OpenLayers.Console.error("...AgsAdapter.encodeAgsQuery...encode ags Query...missing or invalid input object literal...");
+	    		throw "...AgsAdapter.encodeAgsQuery...encode ags Query...missing or invalid input object literal..." + query;
+		    }
+	    };
+	    
+	    /**
+	     * APIMethod: encodeAgsLocation
+	     *   encodes 'location' parameter from a geometry
+	     *
+	     * Parameters:
+	     *   location - {} object 
+		 *
+	     * Returns: 
+	     *   {esri.geometry.Point} object 
+	     */
+	    this.encodeAgsLocation = function(location) {
+	    	if(_isDefined(location)) {
+	    		try {
+			    	if(location instanceof esri.geometry.Point) { // location is already esri.geometry.Point
+			    		return location;
+			    	} else if(location instanceof OpenLayers.Geometry.Point) { // input is OpenLayers.Geometry.Point		    		
+			    		var agsPoint = this.encodeAgsGeometry['point'].apply(this, [location, this.config['defaultEncodeWkid']]);
+			    		return agsPoint;
+			    	} else if(location instanceof OpenLayers.Feature.Vector) { // input is OpenLayers.Feature.Vector		    		
+			    		var agsPoint = this.encodeAgsGeometry['point'].apply(this, [location.geometry, this.config['defaultEncodeWkid']]);
+			    		return agsPoint;
+			    	} else {		    		
+			    		OpenLayers.Console.error("...AgsAdapter.encodeAgsLocation...'location' is invalid...");
+			    		throw "...AgsAdapter.encodeAgsLocation...'location' is invalid...";
+			    	}
+	    		} catch(e) {
+	    			throw e;
+	    		}
+	    	} else {
+	    		OpenLayers.Console.error("...AgsAdapter.encodeAgsLocation...encode location...missing or invalid 'location'...");
+	    		throw "...AgsAdapter.encodeAgsLocation...encode location...missing or invalid 'location'...";
+	    	}
+	    };
+		
+		/**
+	     * APIMethod: encodeAgsLocation
+	     *   encodes an array of OpenLayers.Feature.Vector to an esri.tasks.FeatureSet
+	     *
+	     * Parameters:
+	     *   olFeatures - {Array of OpenLayers.Feature.Vector} Array
+	     *   olSpatialReference - {String}
+	     *   options - {} object
+		 *
+	     * Returns: 
+	     *   {esri.geometry.Point} object 
+	     */
+		this.encodeAgsFeatureSet = function(olFeatures, olSpatialReference, options) {
+			if(_isDefined(olFeatures)) {
+				var featureSet = new esri.tasks.FeatureSet();
+				try {
+					featureSet.features = this.encodeAgsGraphics.apply(this, [olFeatures, olSpatialReference]);
+					featureSet.spatialReference = this.encodeAgsSpatialReference.apply(this, [olSpatialReference]);
+					featureSet.displayFieldName = options['displayFieldName'] || undefined;
+					featureSet.fieldAliases = options['fieldAliases'] || undefined;
+					featureSet.geometryType = options['geometryType'] || undefined;				
+				} catch(e) {
+					throw e;
+				}				
+			} else {
+				OpenLayers.Console.error("...AgsAdapter.encodeAgsFeatureSet...encode FeatureSet...missing or invalid OpenLayers.Feature.Vector array...");
+	    		throw "...AgsAdapter.encodeAgsFeatureSet...encode FeatureSet...missing or invalid OpenLayers.Feature.Vector array...";
+			}
+			return featureSet;
+		},
+		
+		/**
+	     * APIMethod: encodeAgsGeometrySpatialRelationship
+	     *   encodes an OpenLayers geometry spatial relationship string to an esri geometry spatial relationship string
+	     *
+	     * Parameters:
+	     *   olGeometrySpatialRelationship - {String}	     
+		 *
+	     * Returns: 
+	     *   {String}
+	     */
+	    this.encodeAgsGeometrySpatialRelationship = function(olGeometrySpatialRelationship) {
+			if(_isDefined(olGeometrySpatialRelationship)) {
+				var agsGeometrySpatialRelationship = null;
+				agsGeometrySpatialRelationship = _AGS_GEOMETRY_SPATIALRELATIONSHIP[olGeometrySpatialRelationship];
+			} else {
+				OpenLayers.Console.error("...AgsAdapter.encodeAgsGeometrySpatialRelationship...encode AgsGeometrySpatialRelationship...missing or invalid input OpenLayers GeometrySpatialRelationship...");
+	    		throw "...AgsAdapter.encodeAgsGeometrySpatialRelationship...encode AgsGeometrySpatialRelationship...missing or invalid input OpenLayers GeometrySpatialRelationship...";
+			}
+			return agsGeometrySpatialRelationship;
+		}
+		
+		
+	    ///////////////////////////////////////////
+        // CLASS INITIALIZATION
+        ///////////////////////////////////////////
+	    OpenLayers.Util.extend(this.config, config);
+		
+		// bind functions to the current scope		
+		this.parseAgsGeometry.point = __bindFunction(this.parseAgsGeometry.point, this);
+		this.parseAgsGeometry.path = __bindFunction(this.parseAgsGeometry.path, this);
+		this.encodeAgsFeatureSet = __bindFunction(this.encodeAgsFeatureSet, this);
+		this.encodeAgsFindParameters = __bindFunction(this.encodeAgsFindParameters, this);
+	}
+})();
Index: lib/OpenLayers/Handler/MultiPath.js
===================================================================
--- lib/OpenLayers/Handler/MultiPath.js	(revision 0)
+++ lib/OpenLayers/Handler/MultiPath.js	(revision 0)
@@ -0,0 +1,16 @@
+
+/**
+ * @requires OpenLayers/Handler.js
+ * @requires OpenLayers/Handler/Path.js
+ */
+
+OpenLayers.Handler.MultiPath = OpenLayers.Class(OpenLayers.Handler.Path, {
+    
+    multi: true,
+    
+    initialize: function(control, callbacks, options) {
+        OpenLayers.Handler.Path.prototype.initialize.apply(this, arguments);
+    },
+        
+    CLASS_NAME: "OpenLayers.Handler.MultiPath"
+});
Index: lib/OpenLayers/Handler/MultiPolygon.js
===================================================================
--- lib/OpenLayers/Handler/MultiPolygon.js	(revision 0)
+++ lib/OpenLayers/Handler/MultiPolygon.js	(revision 0)
@@ -0,0 +1,15 @@
+/**
+ * @requires OpenLayers/Handler.js
+ * @requires OpenLayers/Handler/Polygon.js
+ */
+
+OpenLayers.Handler.MultiPolygon = OpenLayers.Class(OpenLayers.Handler.Polygon, {
+    
+    multi: true,
+
+    initialize: function(control, callbacks, options) {
+        OpenLayers.Handler.Polygon.prototype.initialize.apply(this, arguments);
+    },
+ 
+    CLASS_NAME: "OpenLayers.Handler.MultiPolygon"
+});
Index: lib/OpenLayers/Layer/ArcGIS/AgsDynamic.js
===================================================================
--- lib/OpenLayers/Layer/ArcGIS/AgsDynamic.js	(revision 0)
+++ lib/OpenLayers/Layer/ArcGIS/AgsDynamic.js	(revision 0)
@@ -0,0 +1,201 @@
+/**
+ * @requires OpenLayers/Layer/Grid.js
+ * @requires OpenLayers/Tile/Image.js
+ */
+
+/**
+ * Class: OpenLayers.Layer.AgsDynamic
+ * Instances of OpenLayers.Layer.AgsDynamic are used to display data from ArcGIS Server
+ *   Map Service through its REST endpoint. 
+ * 
+ * Inherits from:
+ *  - <OpenLayers.Layer.Grid>
+ */
+OpenLayers.Layer.AgsDynamic = OpenLayers.Class(OpenLayers.Layer.Grid, {
+    /**
+     * Constant: DEFAULT_PARAMS
+     * {Object} Hashtable of default parameter key/value pairs 
+     */
+    DEFAULT_PARAMS: { 
+    	F: "image",
+        DPI: "96",
+        FORMAT: "png",
+        TRANSPARENT: false
+    },
+    
+    /**
+     * Property: reproject
+     * *Deprecated*. See http://trac.openlayers.org/wiki/SphericalMercator
+     * for information on the replacement for this functionality. 
+     * {Boolean} Try to reproject this layer if its coordinate reference system
+     *           is different than that of the base layer.  Default is true.  
+     *           Set this in the layer options.  Should be set to false in 
+     *           most cases.
+     */
+    //reproject: false,
+ 
+    /**
+     * APIProperty: isBaseLayer
+     * {Boolean} Default is true for AgsDynamic layer
+     */
+    isBaseLayer: true,
+    
+    /**
+     * APIProperty: encodeBBOX
+     * {Boolean} Should the BBOX commas be encoded? 
+     */
+    encodeBBOX: false,
+ 
+    /**
+     * Constructor: OpenLayers.Layer.AgsDynamic
+     * Create a new AgsDynamic layer object
+     *
+     * Parameters:
+     * name - {String} A name for the layer
+     * url - {String} Base url REST ArcGIS Server Map Service                
+     * params - {Object} An object with key/value pairs representing the
+     *                   GetMap query string parameters and parameter values.
+     * options - {Ojbect} Hashtable of extra options to tag onto the layer
+     */
+    initialize: function(name, url, params, options) {        
+        params = OpenLayers.Util.upperCaseObject(params);        
+        OpenLayers.Layer.Grid.prototype.initialize.apply(this, [name, url, params, options]);
+        
+        OpenLayers.Util.applyDefaults(
+        	this.params,					   
+            OpenLayers.Util.upperCaseObject(this.DEFAULT_PARAMS)
+        );
+
+        //layer is transparent        
+        if (this.params.TRANSPARENT && 
+            this.params.TRANSPARENT.toString().toLowerCase() == "true") {            
+            // unless explicitly set in options, make layer an overlay
+            if ( (options == null) || (!options.isBaseLayer) ) {
+                this.isBaseLayer = false;
+            }             
+            // jpegs can never be transparent, so intelligently switch the 
+            //  format, depending on teh browser's capabilities
+            if (this.params.FORMAT == "image/jpeg") {
+                this.params.FORMAT = OpenLayers.Util.alphaHack() ? "image/gif"
+                                                                 : "image/png";
+            }
+        }
+    },    
+    
+    /**
+     * Method: destroy
+     * Destroy this layer
+     */
+    destroy: function() {
+        // for now, nothing special to do here. 
+        OpenLayers.Layer.Grid.prototype.destroy.apply(this, arguments);  
+    },
+
+    
+    /**
+     * Method: clone
+     * Create a clone of this layer
+     *
+     * Returns:
+     * {<OpenLayers.Layer.WMS>} An exact clone of this layer
+     */
+    clone: function (obj) {
+        
+        if (obj == null) {
+            obj = new OpenLayers.Layer.AgsDynamic(this.name,
+                                           this.url,
+                                           this.params,
+                                           this.options);
+        }
+
+        //get all additions from superclasses
+        obj = OpenLayers.Layer.Grid.prototype.clone.apply(this, [obj]);
+
+        // copy/set any non-init, non-simple values here
+
+        return obj;
+    },    
+    
+    /**
+     * Method: getURL
+     * Return a GetMap query string for this layer
+     *
+     * Parameters:
+     * bounds - {<OpenLayers.Bounds>} A bounds representing the bbox for the
+     *                                request.
+     *
+     * Returns:
+     * {String} A string with the layer's url and parameters and also the
+     *          passed-in bounds and appropriate tile size specified as 
+     *          parameters.
+     */
+    getURL: function (bounds) {
+        bounds = this.adjustBounds(bounds);
+        
+        var imageSize = this.getImageSize(); 
+        var newParams = {
+            'BBOX': this.encodeBBOX ?  bounds.toBBOX() : bounds.toArray(),
+            'SIZE': imageSize.w + "," + imageSize.h           
+        };
+        var requestString = this.getFullRequestString(newParams);
+        return requestString;
+    },
+
+    /**
+     * Method: addTile
+     * addTile creates a tile, initializes it, and adds it to the layer div. 
+     *
+     * Parameters:
+     * bounds - {<OpenLayers.Bounds>}
+     * position - {<OpenLayers.Pixel>}
+     * 
+     * Returns:
+     * {<OpenLayers.Tile.Image>} The added OpenLayers.Tile.Image
+     */
+    addTile:function(bounds,position) {
+        return new OpenLayers.Tile.Image(this, position, bounds, 
+                                         null, this.tileSize);
+    },
+
+    /**
+     * APIMethod: mergeNewParams
+     * Catch changeParams and uppercase the new params to be merged in
+     *     before calling changeParams on the super class.
+     * 
+     *     Once params have been changed, we will need to re-init our tiles.
+     * 
+     * Parameters:
+     * newParams - {Object} Hashtable of new params to use
+     */
+    mergeNewParams:function(newParams) {
+        var upperParams = OpenLayers.Util.upperCaseObject(newParams);
+        var newArguments = [upperParams];
+        return OpenLayers.Layer.Grid.prototype.mergeNewParams.apply(this, 
+                                                             newArguments);
+    },
+
+    /** 
+     * Method: getFullRequestString
+     * Combine the layer's url with its params and these newParams. 
+     *
+     * Parameters:
+     * newParams - {Object}
+     * altUrl - {String} Use this as the url instead of the layer's url
+     * 
+     * Returns:
+     * {String} 
+     */
+    getFullRequestString:function(newParams, altUrl) {
+        var projectionCode = this.map.getProjection();        
+        if(this.params['BBOXSR'] === null || this.params['BBOXSR'] === undefined) {
+        	this.params['BBOXSR'] = projectionCode.split(":")[1];
+        	this.params['IMAGESR'] = projectionCode.split(":")[1];
+        } else {
+        	this.params['IMAGESR'] = this.params['BBOXSR']; 
+        }        
+        return OpenLayers.Layer.Grid.prototype.getFullRequestString.apply(
+                                                    this, arguments);
+    },
+
+    CLASS_NAME: "OpenLayers.Layer.AgsDynamic"
+});
Index: lib/OpenLayers/Layer/ArcGIS/AgsImageService.js
===================================================================
--- lib/OpenLayers/Layer/ArcGIS/AgsImageService.js	(revision 0)
+++ lib/OpenLayers/Layer/ArcGIS/AgsImageService.js	(revision 0)
@@ -0,0 +1,216 @@
+/**
+ * @requires OpenLayers/Layer/Grid.js
+ * @requires OpenLayers/Tile/Image.js
+ */
+
+/**
+ * Class: OpenLayers.Layer.AgsImageService
+ * Instances of OpenLayers.Layer.AgsImageService are used to display data from ArcGIS Server
+ *   Image Service through its REST endpoint. 
+ * 
+ * Inherits from:
+ *  - <OpenLayers.Layer.Grid>
+ */
+OpenLayers.Layer.AgsImageService = OpenLayers.Class(OpenLayers.Layer.Grid, {
+    /**
+     * Constant: DEFAULT_PARAMS
+     * {Object} Hashtable of default parameter key/value pairs 
+     *
+     * parameters to call exportImage on ArcGIS Server Image Service include:
+     * {
+     *     f,
+     *     bbox,
+     *     size,
+     *     imageSR,
+     *     bboxSR,
+     *     format,
+     *     pixelType,
+     *     noData,
+     *     interpolation,
+     *     compressionQuality,
+     *     bandIds,
+     *     mosaicProperties,
+     *     viewpointProperties
+     *     
+     * }
+     */
+    DEFAULT_PARAMS: { 
+    	F: "image",
+        FORMAT: "png", 
+        COMPRESSIONQUALITY: 75
+    },
+    
+    /**
+     * Property: reproject
+     * *Deprecated*. See http://trac.openlayers.org/wiki/SphericalMercator
+     * for information on the replacement for this functionality. 
+     * {Boolean} Try to reproject this layer if its coordinate reference system
+     *           is different than that of the base layer.  Default is true.  
+     *           Set this in the layer options.  Should be set to false in 
+     *           most cases.
+     */
+    //reproject: false,
+ 
+    /**
+     * APIProperty: isBaseLayer
+     * {Boolean} Default is true for AgsDynamic layer
+     */
+    isBaseLayer: true,
+    
+    /**
+     * APIProperty: encodeBBOX
+     * {Boolean} Should the BBOX commas be encoded? 
+     */
+    encodeBBOX: false,
+ 
+    /**
+     * Constructor: OpenLayers.Layer.AgsImageService
+     * Create a new AgsImageService layer object
+     *
+     * Parameters:
+     * name - {String} A name for the layer
+     * url - {String} Base url REST ArcGIS Server Image Service                
+     * params - {Object} An object with key/value pairs representing the
+     *                   GetMap query string parameters and parameter values.
+     * options - {Ojbect} Hashtable of extra options to tag onto the layer
+     */
+    initialize: function(name, url, params, options) {        
+        params = OpenLayers.Util.upperCaseObject(params);        
+        OpenLayers.Layer.Grid.prototype.initialize.apply(this, [name, url, params, options]);
+        
+        OpenLayers.Util.applyDefaults(
+        	this.params,					   
+            OpenLayers.Util.upperCaseObject(this.DEFAULT_PARAMS)
+        );
+
+        if (this.params.FORMAT == "image/jpeg") {
+        	this.params.FORMAT = OpenLayers.Util.alphaHack() ? "image/gif" : "image/png";
+        }
+    },    
+    
+    /**
+     * Method: destroy
+     * Destroy this layer
+     */
+    destroy: function() {
+        // for now, nothing special to do here. 
+        OpenLayers.Layer.Grid.prototype.destroy.apply(this, arguments);  
+    },
+
+    
+    /**
+     * Method: clone
+     * Create a clone of this layer
+     *
+     * Returns:
+     * {<OpenLayers.Layer.WMS>} An exact clone of this layer
+     */
+    clone: function (obj) {
+        
+        if (obj == null) {
+            obj = new OpenLayers.Layer.AgsImageService(this.name,
+                                           this.url,
+                                           this.params,
+                                           this.options);
+        }
+
+        //get all additions from superclasses
+        obj = OpenLayers.Layer.Grid.prototype.clone.apply(this, [obj]);
+
+        // copy/set any non-init, non-simple values here
+
+        return obj;
+    },    
+    
+    /**
+     * Method: getURL
+     * Return a GetMap query string for this layer
+     *
+     * Parameters:
+     * bounds - {<OpenLayers.Bounds>} A bounds representing the bbox for the
+     *                                request.
+     *
+     * Returns:
+     * {String} A string with the layer's url and parameters and also the
+     *          passed-in bounds and appropriate tile size specified as 
+     *          parameters.
+     */
+    getURL: function (bounds) {
+        bounds = this.adjustBounds(bounds);
+        
+        var imageSize = this.getImageSize(); 
+        var newParams = {
+            'BBOX': this.encodeBBOX ? bounds.toBBOX() : bounds.toArray(),
+            'SIZE': imageSize.w + "," + imageSize.h           
+        };
+        var requestString = this.getFullRequestString(newParams);
+        return requestString;
+    },
+
+    /**
+     * Method: addTile
+     * addTile creates a tile, initializes it, and adds it to the layer div. 
+     *
+     * Parameters:
+     * bounds - {<OpenLayers.Bounds>}
+     * position - {<OpenLayers.Pixel>}
+     * 
+     * Returns:
+     * {<OpenLayers.Tile.Image>} The added OpenLayers.Tile.Image
+     */
+    addTile:function(bounds,position) {
+        return new OpenLayers.Tile.Image(this, position, bounds, 
+                                         null, this.tileSize);
+    },
+
+    /**
+     * APIMethod: mergeNewParams
+     * Catch changeParams and uppercase the new params to be merged in
+     *     before calling changeParams on the super class.
+     * 
+     *     Once params have been changed, we will need to re-init our tiles.
+     * 
+     * Parameters:
+     * newParams - {Object} Hashtable of new params to use
+     */
+    mergeNewParams:function(newParams) {
+        var upperParams = OpenLayers.Util.upperCaseObject(newParams);
+        var newArguments = [upperParams];
+        return OpenLayers.Layer.Grid.prototype.mergeNewParams.apply(this, 
+                                                             newArguments);
+    },
+
+    /** 
+     * Method: getFullRequestString
+     * Combine the layer's url with its params and these newParams. 
+     *
+     * Parameters:
+     * newParams - {Object}
+     * altUrl - {String} Use this as the url instead of the layer's url
+     * 
+     * Returns:
+     * {String} 
+     */
+    getFullRequestString:function(newParams, altUrl) {
+        var projectionCode = this.map.getProjection();        
+        
+        this.params['BBOXSR'] = this.params['BBOXSR'] || projectionCode.split(":")[1];
+        this.params['IMAGESR'] = this.params['IMAGESR'] || this.params['BBOXSR'];
+        if(this.map.displayProjection) {
+        	this.params['IMAGESR'] = this.map.displayProjection.split(":")[1]; 
+        }
+        
+        /*
+        if(this.params['BBOXSR'] === null || this.params['BBOXSR'] === undefined) {
+        	this.params['BBOXSR'] = projectionCode.split(":")[1];
+        	this.params['IMAGESR'] = projectionCode.split(":")[1];
+        } else {
+        	this.params['IMAGESR'] = this.params['BBOXSR']; 
+        }   
+        */     
+        return OpenLayers.Layer.Grid.prototype.getFullRequestString.apply(
+                                                    this, arguments);
+    },
+
+    CLASS_NAME: "OpenLayers.Layer.AgsImageService"
+});
Index: lib/OpenLayers/Layer/ArcGIS/AgsTiled.js
===================================================================
--- lib/OpenLayers/Layer/ArcGIS/AgsTiled.js	(revision 0)
+++ lib/OpenLayers/Layer/ArcGIS/AgsTiled.js	(revision 0)
@@ -0,0 +1,185 @@
+/**
+ * @requires OpenLayers/Layer/Grid.js
+ * @requires OpenLayers/Tile/Image.js
+ */
+
+/**
+ * Class: OpenLayers.Layer.AgsTiled
+ * 
+ * Inherits from:
+ *  - <OpenLayers.Layer.Grid>
+ */
+OpenLayers.Layer.AgsTiled = OpenLayers.Class(OpenLayers.Layer.Grid, {
+    
+    /**
+     * APIProperty: isBaseLayer
+     * {Boolean}
+     */
+    isBaseLayer: true,
+
+    /**
+     * APIProperty: tileOrigin
+     * {<OpenLayers.Pixel>}
+     */
+    tileOrigin: null,
+    
+    /**
+     * APIProperty: tileFullExtent
+     * {<OpenLayers.Bounds>}
+     */
+    tileFullExtent: null,
+
+	/**
+     * APIProperty: tileFormat
+     * {String}
+     */
+    tileFormat: "",
+	
+    /**
+     * Constructor: OpenLayers.Layer.AgsTiled
+     * 
+     * Parameters:
+     * name - {String}
+     * url - {String}
+     * options - {Object} Hashtable of extra options to tag onto the layer
+     */
+    initialize: function(name, url, options) {
+        // initialize OpenLayers.Layer.Grid layer
+        OpenLayers.Layer.Grid.prototype.initialize.apply(this, [name, url, {}, options]);    	
+    	// some utility methods
+    	this._isDefined = OpenLayers.Util.AgsUtil.isDefined;		
+    	// 'tileFormat'
+    	if(this._isDefined(options['tileFormat'])) {
+    		this.tileFormat = options['tileFormat'];
+    	} else {
+    		OpenLayers.Console.error("...tileFormat missing or empty...");
+     		throw "...tileFormat missing or empty...";	
+    	}   	
+    	// 'tileFullExtent'
+    	if(this._isDefined(options['tileFullExtent']) && options['tileFullExtent'] instanceof OpenLayers.Bounds) {
+    		this.tileFullExtent = options['tileFullExtent'];
+    	}     	
+    	// 'tileOrigin'
+    	if(this._isDefined(options['tileOrigin']) && options['tileOrigin'] instanceof OpenLayers.Pixel) {
+    		this.tileOrigin = options['tileOrigin'];
+    	}
+    },    
+
+    /**
+     * APIMethod:destroy
+     */
+    destroy: function() {
+        // for now, nothing special to do here. 
+        OpenLayers.Layer.Grid.prototype.destroy.apply(this, arguments);  
+    },
+
+    
+    /**
+     * APIMethod: clone
+     * 
+     * Parameters:
+     * obj - {Object}
+     * 
+     * Returns:
+     * {<OpenLayers.Layer.AgsTiled>} An exact clone of this <OpenLayers.Layer.AgsTiled>
+     */
+    clone: function (obj) {        
+        if (obj == null) {
+            obj = new OpenLayers.Layer.AgsTiled(this.name, this.url, this.options);
+        }
+        //get all additions from superclasses
+        obj = OpenLayers.Layer.Grid.prototype.clone.apply(this, [obj]);
+        // copy/set any non-init, non-simple values here
+        return obj;
+    },    
+    
+    /**
+     * Method: getURL
+     * 
+     * Parameters:
+     * bounds - {<OpenLayers.Bounds>}
+     * 
+     * Returns:
+     * {String} A string with the layer's url and parameters and also the 
+     *          passed-in bounds and appropriate tile size specified as 
+     *          parameters
+     */
+    getURL: function (bounds) {
+        bounds = this.adjustBounds(bounds);
+        
+        var res = this.map.getResolution();
+        
+        var path = null;
+        var url = null;
+        
+        if(this.tileFullExtent.intersectsBounds(bounds)) {
+	        var col = null;
+	        if(this.tileOrigin.lon <= bounds.left) {
+	        	col = Math.round((bounds.left - this.tileOrigin.lon) / (res * this.tileSize.w));
+	        } else if(this.tileOrigin.lon >= bounds.right) {
+	        	col = Math.round((this.tileOrigin.lon - bounds.right) / (res * this.tileSize.w));
+	        } else {
+	        	return "../../img/transparent.png";
+	        	OpenLayers.Console.warn("...invalid tileOrigin...");
+     			//throw "...invalid tileOrigin...";	
+	        }                
+	        var row = null;
+	        if(this.tileOrigin.lat >= bounds.top) {
+	        	row = Math.round((this.tileOrigin.lat - bounds.top) / (res * this.tileSize.h));
+	        } else if(this.tileOrigin.lat <= bounds.bottom) {
+	        	row = Math.round((bounds.bottom - this.tileOrigin.lat) / (res * this.tileSize.h));
+	        } else {
+	        	return "../../img/transparent.png";
+	        	OpenLayers.Console.warn("...invalid tileOrigin...");
+     			//throw "...invalid tileOrigin...";
+	        }        
+	        var scale = this.map.getZoom();         
+	        path = scale + "/" + row + "/" + col + "." + this.tileFormat;
+	    	url = this.url;
+	        if (url instanceof Array) {
+	            url = this.selectUrl(path, url);
+	        }
+	        return url + path;
+	    } else {
+	    	// area outside of tiles' full extent
+	    	return "../../img/transparent.png";	    	
+	    }        
+    },
+
+    /**
+     * Method: addTile
+     * addTile creates a tile, initializes it, and adds it to the layer div. 
+     * 
+     * Parameters:
+     * bounds - {<OpenLayers.Bounds>}
+     * position - {<OpenLayers.Pixel>}
+     * 
+     * Returns:
+     * {<OpenLayers.Tile.Image>} The added OpenLayers.Tile.Image
+     */
+    addTile:function(bounds,position) {
+        return new OpenLayers.Tile.Image(this, position, bounds, 
+                                         null, this.tileSize);
+    },
+
+    /** 
+     * APIMethod: setMap
+     * When the layer is added to a map, then we can fetch our origin 
+     *    (if we don't have one.) 
+     * 
+     * Parameters:
+     * map - {<OpenLayers.Map>}
+     */
+    setMap: function(map) {
+        OpenLayers.Layer.Grid.prototype.setMap.apply(this, arguments);
+        if(!this.tileOrigin) { 
+            this.tileOrigin = new OpenLayers.LonLat(this.map.maxExtent.left,
+                                                this.map.maxExtent.bottom);
+        }   
+        if(!this.tileFullExtent) { 
+            this.tileFullExtent = this.map.maxExtent;
+        }                             
+    },
+
+    CLASS_NAME: "OpenLayers.Layer.AgsTiled"
+});
Index: lib/OpenLayers/Util/ags-proxy.jsp
===================================================================
--- lib/OpenLayers/Util/ags-proxy.jsp	(revision 0)
+++ lib/OpenLayers/Util/ags-proxy.jsp	(revision 0)
@@ -0,0 +1,63 @@
+<%@page session="false"%>
+<%@page import="java.net.*,java.io.*" %>
+<%!
+String[] serverUrls = {
+  //"<url>[,<token>]"
+  //For ex. (secured server): "http://myserver.mycompany.com/arcgis/rest/services,ayn2C2iPvqjeqWoXwV6rjmr43kyo23mhIPnXz2CEiMA6rVu0xR0St8gKsd0olv8a"
+  //For ex. (non-secured server): "http://sampleserver1.arcgisonline.com/arcgis/rest/services"
+  "http://sampleserver1.arcgisonline.com/arcgis/rest/services",
+  "http://sampleserver2.arcgisonline.com/arcgis/rest/services" //NOTE - no comma after the last item
+};
+%>
+<%
+try {
+  String reqUrl = request.getQueryString();
+  boolean allowed = false;
+  String token = null;
+  for(String surl : serverUrls) {
+    String[] stokens = surl.split("\\s*,\\s*");
+    if(reqUrl.toLowerCase().contains(stokens[0].toLowerCase())) {
+      allowed = true;
+      if(stokens.length >= 2 && stokens[1].length() > 0)
+        token = stokens[1];
+      break;
+    }
+  }
+  if(!allowed) {
+    response.setStatus(403);
+    return;
+  }
+  if(token != null) {
+    reqUrl = reqUrl + (reqUrl.indexOf("?") > -1 ? "&" : "?") + "token=" + token;
+  }
+  URL url = new URL(reqUrl);
+	HttpURLConnection con = (HttpURLConnection)url.openConnection();
+	con.setDoOutput(true);
+	con.setRequestMethod(request.getMethod());
+	int clength = request.getContentLength();
+	if(clength > 0) {
+		con.setDoInput(true);
+		InputStream istream = request.getInputStream();
+		OutputStream os = con.getOutputStream();
+		final int length = 5000;
+	  byte[] bytes = new byte[length];
+	  int bytesRead = 0;
+	  while ((bytesRead = istream.read(bytes, 0, length)) > 0) {
+	    os.write(bytes, 0, bytesRead);
+	  }
+	}
+	out.clear();
+  out = pageContext.pushBody();
+	OutputStream ostream = response.getOutputStream();
+	response.setContentType(con.getContentType());
+	InputStream in = con.getInputStream();
+	final int length = 5000;
+  byte[] bytes = new byte[length];
+  int bytesRead = 0;
+  while ((bytesRead = in.read(bytes, 0, length)) > 0) {
+    ostream.write(bytes, 0, bytesRead);
+  }
+} catch(Exception e) {
+	response.setStatus(500);
+}
+%>
Index: lib/OpenLayers/Util/AgsUtil.js
===================================================================
--- lib/OpenLayers/Util/AgsUtil.js	(revision 0)
+++ lib/OpenLayers/Util/AgsUtil.js	(revision 0)
@@ -0,0 +1,156 @@
+OpenLayers.Util.AgsUtil = (function() {
+	return function() {}
+})();
+
+OpenLayers.Util.AgsUtil.isDefined = function(value) {
+	if (value === undefined || value === null || value === "") {
+		return false;
+	}
+	else {
+		return true;
+    }
+};
+
+/**
+ * API Method: isNumber
+ *   tell if a value is number or not
+ *   
+ * Parameters:
+ *   value - (*) object
+ *   
+ * Returns
+ *   true or false
+ */
+OpenLayers.Util.AgsUtil.isNumber = function(value) {
+	if(value === undefined || value === null || value === "") {
+		return false;
+	} else if(typeof value === "number") {
+		return true;
+	} else {
+		return false;
+    }
+};
+
+OpenLayers.Util.AgsUtil.isBoolean = function(value) {
+	if (value === undefined || value === null || value === "") {
+		return false;
+	} else if(typeof value === "boolean") {
+		return true;
+	}
+	else {
+		return false;
+    }
+};
+
+OpenLayers.Util.AgsUtil.isAgsGeometry = function(value) {
+	if (value === undefined || value === null || value === "") {
+		return false;
+	} else if(value instanceof esri.geometry.Point) {
+		return true;
+	} else if(value instanceof esri.geometry.Polyline) {
+		return true;
+	} else if(value instanceof esri.geometry.Polygon) {
+		return true;
+	} else if(value instanceof esri.geometry.Extent) {
+		return true;
+	}else {
+		return false;
+    }
+};
+
+OpenLayers.Util.AgsUtil.isOLGeometry = function(value) {
+	if (value === undefined || value === null || value === "") {
+		return false;
+	} else if(value instanceof OpenLayers.Geometry.Point) {
+		return true;
+	} else if(value instanceof OpenLayers.Geometry.MultiLineString) {
+		return true;
+	} else if(value instanceof OpenLayers.Geometry.Polygon) {
+		return true;
+	} else if(value instanceof OpenLayers.Bounds) {
+		return true;
+	}else {
+		return false;
+    }
+};
+
+/**
+ * APIMethod: isSameOLPoint
+ *   tell if point1 represents the same geographic point as point2
+ * 
+ * @param {OpenLayers.Geometry.Point} point1
+ * @param {OpenLayers.Geometry.Point} point2
+ * 
+ * Returns:
+ *   true or false
+ */
+OpenLayers.Util.AgsUtil.isSameOLPoint = function(point1, point2) {
+	if(typeof point1.x === "number" && typeof point1.y === "number" && typeof point2.x === "number" && typeof point2.y === "number") {
+		if(point1.x == point2.x && point1.y == point2.y) {
+			return true;
+		}	
+	}
+	return false;
+};
+
+/**
+ * APIMethod: dispatch
+ *   Allows multiple asynchronous sequences to be called in parallel.  A final
+ *   callback is called when all other sequences report that they are done.
+ * 
+ * Parameters:
+ *   functions - {Array(Function)} List of functions to be called.  All
+ *     functions will be called with two arguments - a callback to call when
+ *     the sequence is done and a storage object
+ *   complete - {Function} A function that will be called when all other
+ *     functions report that they are done.  The final callback will be
+ *     called with the storage object passed to all other functions.
+ *   scope - {Object} Optional object to be set as the scope of all functions
+ *     called.
+ */
+OpenLayers.Util.AgsUtil.dispatch = function(functions, complete, scope) {
+	var requests = functions.length;
+    var responses = 0;
+    var storage = {};
+    
+	function respond() {
+        ++responses;
+        if(responses === requests) {
+            complete.call(scope, storage);
+        }
+    }
+	
+    function trigger(index) {
+        window.setTimeout(function() {
+            functions[index].apply(scope, [respond, storage]);
+        });
+    }
+	
+    for(var i=0; i<requests; ++i) {
+        trigger(i);
+    }	
+};
+
+	/**
+	 * Static method: bind a function to a specific context/scope
+	 *     if dojo is defined, use dojo.hitch(), otherwise use OpenLayers.Function.bind()
+	 */
+
+/**
+ * APIMethod: bindFunction
+ *   Static method: bind a function to a specific context/scope
+ *   if dojo is defined, use dojo.hitch(), otherwise use OpenLayers.Function.bind()
+ * 
+ * Parameters:
+ *   func - {function}
+ *   scope - {Object}
+ */
+OpenLayers.Util.AgsUtil.bindFunction = function(func, scope) {
+	if(dojo) {
+		//OpenLayers.Console.log("...dojo found...use dojo.hitch() to bind function to scope...");
+		return dojo.hitch(scope, func);
+	} else {
+		OpenLayers.Console.log("...dojo not found...use OpenLayers.Function.bind() to bind function to scope...");
+		return OpenLayers.Function.bind(func, scope);
+	}
+};
Index: lib/OpenLayers/Util/openlayers-proxy-apache.jsp
===================================================================
--- lib/OpenLayers/Util/openlayers-proxy-apache.jsp	(revision 0)
+++ lib/OpenLayers/Util/openlayers-proxy-apache.jsp	(revision 0)
@@ -0,0 +1,75 @@
+<%@page session="false"%>
+<%@page import="java.net.*,java.io.*" %>
+<%@page import="org.apache.commons.httpclient.*,org.apache.commons.httpclient.methods.*" %>
+
+<%
+	InputStream reqInputStream = null;
+	InputStream resInputStream = null;		
+	OutputStream resOutputStream = null;
+	
+	if(request.getParameter("resourceUrl") != null && request.getParameter("resourceUrl") != "") {
+		
+		String resourceUrl = request.getParameter("resourceUrl");					
+		GetMethod get = new GetMethod(resourceUrl);
+		HttpClient httpclient = new HttpClient();
+		try {
+			httpclient.executeMethod(get);
+			resInputStream = get.getResponseBodyAsStream();
+			
+			String contentType = get.getResponseHeader("Content-Type").getValue();		
+			response.setContentType(contentType);
+			
+			// for JSP only
+			out.clear();
+			out = pageContext.pushBody();
+			
+			resOutputStream = response.getOutputStream();
+			int buffer_length = 4096;
+			byte[] buffer = new byte[buffer_length];
+			int bytesRead = 0;
+			while((bytesRead = resInputStream.read(buffer, 0, buffer_length)) > 0) {
+				resOutputStream.write(buffer, 0, bytesRead);
+			}
+		} catch(Exception e) {
+			e.printStackTrace();
+		} finally {
+			get.releaseConnection();
+		}
+		
+	} else if(request.getParameter("targetUrl") != null && request.getParameter("targetUrl") != "") {
+		
+		String targetUrl = request.getParameter("targetUrl");			
+		PostMethod post = new PostMethod(targetUrl);			
+		reqInputStream = request.getInputStream();
+		RequestEntity entity = new InputStreamRequestEntity(reqInputStream, request.getContentType());
+		//RequestEntity entity = new InputStreamRequestEntity(reqInputStream, "text/xml;charset=ISO-8859-1");
+		post.setRequestEntity(entity);
+		
+		HttpClient httpclient = new HttpClient();
+		try {
+			httpclient.executeMethod(post);
+			resInputStream = post.getResponseBodyAsStream();
+			
+			String contentType = post.getResponseHeader("Content-Type").getValue();		
+			response.setContentType(contentType);
+			
+			// for JSP only
+			out.clear();
+			out = pageContext.pushBody();
+			
+			resOutputStream = response.getOutputStream();
+			int buffer_length = 4096;
+			byte[] buffer = new byte[buffer_length];
+			int bytesRead = 0;
+			while((bytesRead = resInputStream.read(buffer, 0, buffer_length)) > 0) {
+				resOutputStream.write(buffer, 0, bytesRead);
+			}
+		} catch(Exception e) {
+			e.printStackTrace();
+		} finally {
+			post.releaseConnection();
+		}
+	} else {
+		return;
+	}
+%>
Index: lib/OpenLayers/Util/openlayers-proxy.jsp
===================================================================
--- lib/OpenLayers/Util/openlayers-proxy.jsp	(revision 0)
+++ lib/OpenLayers/Util/openlayers-proxy.jsp	(revision 0)
@@ -0,0 +1,69 @@
+<%@page session="false"%>
+<%@page import="java.net.*,java.io.*" %>
+<%
+	HttpURLConnection connection = null;
+	InputStream istream = null;
+	OutputStream ostream = null;
+	InputStream ristream = null;
+	OutputStream rostream = null;
+	
+	try {
+		if(request.getParameter("resourceUrl") != null && request.getParameter("resourceUrl") != "") {
+			URL resourceUrl = new URL(request.getParameter("resourceUrl"));	
+			connection = (HttpURLConnection)resourceUrl.openConnection();
+			connection.setDoInput(true);
+			connection.setRequestMethod(request.getMethod());
+			// what's this for
+			out.clear();
+			out = pageContext.pushBody();
+			ristream = connection.getInputStream();
+			rostream = response.getOutputStream();
+			final int length = 5000;
+			byte[] bytes = new byte[length];
+			int bytesRead = 0;
+			while ((bytesRead = ristream.read(bytes, 0, length)) > 0) {
+				rostream.write(bytes, 0, bytesRead);
+			}
+		} else if(request.getParameter("targetUrl") != null && request.getParameter("targetUrl") != "") {
+			URL targetUrl = new URL(request.getParameter("targetUrl"));		
+			connection = (HttpURLConnection)targetUrl.openConnection();
+			connection.setDoOutput(true);
+			connection.setRequestMethod(request.getMethod());
+			
+			int clength = request.getContentLength();
+			if(clength > 0) {
+				connection.setDoInput(true);
+				istream = request.getInputStream();
+				ostream = connection.getOutputStream();
+				final int length = 5000;
+				byte[] bytes = new byte[length];
+				int bytesRead = 0;
+				while((bytesRead = istream.read(bytes, 0, length)) > 0) {
+					ostream.write(bytes, 0, bytesRead);
+				}
+			}
+			// what's this for
+			out.clear();
+			out = pageContext.pushBody();
+			rostream = response.getOutputStream();
+			response.setContentType(connection.getContentType());
+			ristream = connection.getInputStream();
+			final int length = 5000;
+			byte[] bytes = new byte[length];
+			int bytesRead = 0;
+			while ((bytesRead = ristream.read(bytes, 0, length)) > 0) {
+				rostream.write(bytes, 0, bytesRead);
+			}
+		} else {
+			return;
+		}
+	} catch(Exception e) {
+		response.setStatus(500);
+		e.printStackTrace();
+	} finally {
+		if(istream != null) { istream.close(); }			
+		if(ostream != null) { ostream.close(); }
+		if(ristream != null) { ristream.close(); }
+		if(rostream != null) { rostream.close(); }			
+	}
+%>
Index: playground/arcgis/ags-style.css
===================================================================
--- playground/arcgis/ags-style.css	(revision 0)
+++ playground/arcgis/ags-style.css	(revision 0)
@@ -0,0 +1,98 @@
+.olControlPanel {
+	float:left;
+    right: 436px;
+    top: 5px;
+    height: 24px; 
+    width: 150px;    
+}
+
+.olControlPanel .olControlAgsIdentifyTaskItemActive { 
+   position: absolute;
+   left: 0px;
+   background-image: url("img/identify-on.png");
+   background-repeat: no-repeat;
+   width:  32px;
+   height: 32px;
+}
+
+.olControlPanel .olControlAgsIdentifyTaskItemInactive { 
+   position: absolute;
+   left: 0px;
+   background-image: url("img/identify-off.png");
+   background-repeat: no-repeat;
+   width:  24px;
+   height: 24px;
+}
+
+.olControlPanel .olControlAgsGeometryServiceItemActive { 
+   position: absolute;
+   left: 30px;
+   background-image: url("img/buffer-on.png");
+   background-repeat: no-repeat;
+   width:  32px;
+   height: 32px;
+}
+
+.olControlPanel .olControlAgsGeometryServiceItemInactive { 
+   position: absolute;
+   left: 30px;
+   background-image: url("img/buffer-off.png");
+   background-repeat: no-repeat;
+   width:  24px;
+   height: 24px;
+}
+
+.olControlPanel .olControlAgsGeoprocessorItemActive { 
+   position: absolute;
+   left: 60px;
+   background-image: url("img/driving-on.png");
+   background-repeat: no-repeat;
+   width:  32px;
+   height: 32px;
+}
+
+.olControlPanel .olControlAgsGeoprocessorItemInactive { 
+   position: absolute;
+   left: 60px;
+   background-image: url("img/driving-off.png");
+   background-repeat: no-repeat;
+   width:  24px;
+   height: 24px;
+}
+
+.olControlPanel .olControlAgsLocatorItemActive { 
+   position: absolute;
+   left: 90px;
+   background-image: url("img/locator-on.png");
+   background-repeat: no-repeat;
+   width:  32px;
+   height: 32px;
+}
+
+.olControlPanel .olControlAgsLocatorItemInactive { 
+   position: absolute;
+   left: 90px;
+   background-image: url("img/locator-off.png");
+   background-repeat: no-repeat;
+   width:  24px;
+   height: 24px;
+}
+
+.olControlPanel .olControlAgsQueryTaskItemActive { 
+   position: absolute;
+   left: 120px;
+   background-image: url("img/querytask-on.png");
+   background-repeat: no-repeat;
+   width:  32px;
+   height: 32px;
+}
+
+.olControlPanel .olControlAgsQueryTaskItemInactive { 
+   position: absolute;
+   left: 120px;
+   background-image: url("img/querytask-off.png");
+   background-repeat: no-repeat;
+   width:  24px;
+   height: 24px;
+}
+
Index: playground/arcgis/agsControl.html
===================================================================
--- playground/arcgis/agsControl.html	(revision 0)
+++ playground/arcgis/agsControl.html	(revision 0)
@@ -0,0 +1,26 @@
+<html xmlns="http://www.w3.org/1999/xhtml">
+    <head>
+        <title>agsControl</title>
+        <link rel="stylesheet" href="../../theme/default/style.css" type="text/css"/>       
+        
+        <script src="../../lib/Firebug/firebug.js"></script>
+        <script src="../../lib/OpenLayers.js"></script>
+		
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.2"></script>		
+		
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;        				           	 
+		</script>
+		
+        <script src="agsControl.js"></script>
+    </head>
+    <body onload="init();">        
+        <div id="map" style="width: 1024px; height: 512px; margin-top: 5px; margin-left: 5px; background-color: #ffffff"></div>
+    	<!--
+		<input id="switch1_btn" type="button" value="toggle mode" onclick="toggleAgsControlMode();"/>
+		<input id="test_btn" type="button" value="test" onclick="test();"/>
+		-->
+	</body>
+</html>
Index: playground/arcgis/agsControl.js
===================================================================
--- playground/arcgis/agsControl.js	(revision 0)
+++ playground/arcgis/agsControl.js	(revision 0)
@@ -0,0 +1,152 @@
+var map;
+var wfs_layer;
+var bbox_strategy;
+var ags_control;
+        
+function init() {    
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    
+    /*
+    // use this when there is no internet connection
+    var base_layer = new OpenLayers.Layer.WMS(   
+	 	"sf_blockgroups", 
+		"http://sazabi:8079/geoserver-1.6.5/wms", 
+		{ 											
+			layers: 'esri:sf_blockgroups', // WMS layer name for 'counties' layer
+			styles: '',																											
+			srs: 'EPSG:4326',																																																									
+			format: 'image/png',											
+			transparent: true
+		},
+		{														
+			isBaseLayer: true,
+			singleTile: true,
+			displayOutsideMaxExtent: true														
+		}
+	);
+    */
+    map.addLayer(base_layer);  
+    
+    // consume a WFS 1.1.0 service from ArcGIS Server
+    var lon = -122.838493;
+	var lat = 45.432976;
+    var zoom = 12;
+    
+    bbox_strategy = new OpenLayers.Strategy.BBOX();
+    
+    wfs_layer = new OpenLayers.Layer.Vector(
+    	"arcgis server wfs ", 
+    	{
+    		strategies: [
+    		    bbox_strategy
+    		],
+    		protocol: new OpenLayers.Protocol.WFS2(    			    			    				
+    			{
+    				url: "http://sazabi/arcgis/services/sanfrancisco/GeoDataServer/WFSServer?",    				
+    				format: new OpenLayers.Format.WFST2({
+        				//version: "1.1.0",
+    					srsName: "urn:x-ogc:def:crs:EPSG:6.9:4326",
+    					schema: "http://sazabi/arcgis/services/sanfrancisco/GeoDataServer/WFSServer?service=WFS&request=DescribeFeatureType&version=1.1.0&typename=esri:pizzastores",
+    					featureType: "pizzastores",
+    					//schema: "http://sazabi/arcgis/services/sanfrancisco/GeoDataServer/WFSServer?service=WFS&request=DescribeFeatureType&version=1.1.0&typename=esri:highways",
+    					//featureType: "highways",
+    					//schema: "http://sazabi/arcgis/services/sanfrancisco/GeoDataServer/WFSServer?service=WFS&request=DescribeFeatureType&version=1.1.0&typename=esri:blockgroups",
+    					//featureType: "blockgroups",
+    					geometryName: "Shape",												
+						geometryTypes: OpenLayers.Util.applyDefaults({ // overwrite this.geometryTypes to encode MultiLineString/MultiPolygon geometry in MultiCurve/MultiSurface
+							'OpenLayers.Geometry.MultiLineString': "MultiCurve",
+							'OpenLayers.Geometry.MultiPolygon': "MultiSurface"
+						}, OpenLayers.Format.GML.Base.prototype.geometryTypes),						
+    					featureNS: "http://www.esri.com",
+    					featurePrefix: "esri",
+    					//maxFeatures: 999,
+    					extractAttributes: false,
+    					//xy: false,
+    					lockExpiry: "5",
+        				releaseAction: "ALL",
+    				})
+    			})    			
+    	}
+    );
+    //wfs_layer.setVisibility(false);
+    //map.addLayer(wfs_layer);
+    
+	ags_control = new OpenLayers.Control.AgsGeoprocessor(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Network/ESRI_DriveTime_US/GPServer/CreateDriveTimePolygons",
+		null,		
+		null,
+		{
+			mode: "draw",
+			drawCtrlHandler: OpenLayers.Handler.Point,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {'Drive_Times':"1 2 4"},
+		}
+	);
+	ags_control.geoprocessingParamsEnocoder = function(agsFeatureSet, tasksParameters){	
+		OpenLayers.Console.log("...customized...encode geoprocessing parameters...");
+		var params = {
+			"Input_Location": agsFeatureSet,
+			"Drive_Times": tasksParameters['Drive_Times']
+		};
+		return params;
+	};
+		
+	ags_control.geoprocessingResultsParser = function(agsResults) {     	   
+    	OpenLayers.Console.log("...customized...parse geoprocessing results...");
+		var agsGraphics = agsResults[0].value.features;
+		var olResults = this.adapter.parseAgsGraphics(agsGraphics);    	
+    	return olResults;
+    },
+	
+	map.addControl(ags_control);
+	ags_control.activate();
+	
+    map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+}
+
+function toggleAgsControlMode() {
+	if(ags_control.mode == "select") {
+		ags_control.switchMode("draw");
+	} else if(ags_control.mode == "draw") {
+		ags_control.switchMode("select");
+	}
+}
+
+function test() {
+	
+}
+
Index: playground/arcgis/agsDynamic-mercator.html
===================================================================
--- playground/arcgis/agsDynamic-mercator.html	(revision 0)
+++ playground/arcgis/agsDynamic-mercator.html	(revision 0)
@@ -0,0 +1,88 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsDynamic Layer Sample</title>
+
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+		
+		<!-- Google Earth library -->
+		<script src='http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAA44VqMzKOlUj3kMMbZwNyDRSUwqIfIQ6JFPfFD1ZcfKLPey_q8hQH-euV-MYp4ZdHZgBm9qwNA9FcIA'></script>
+				  
+		<script type="text/javascript"">
+			var map;
+			
+			function init() {
+				var lon = -122.6335; 
+				var lat = 45.4447;
+										
+				var center_mercator = OpenLayers.Layer.SphericalMercator.forwardMercator(lon, lat);
+				center_mercator_x = center_mercator.lon;
+				center_mercator_y = center_mercator.lat;
+				
+				var zoom = 5;
+				
+				var options = 	{									
+					                projection: "EPSG:900913",
+							        units: "m",
+							        maxResolution: 156543.0339,
+							        maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34),
+									tileSize: new OpenLayers.Size(512,512)
+								};	
+											
+				map = new OpenLayers.Map('map', options);
+										
+				var satellite = new OpenLayers.Layer.Google( 
+																"Google Satellite", 
+																{	
+																	type: G_SATELLITE_MAP,
+																	'sphericalMercator': true, 
+																	'maxZoomLevel':18
+																}
+														   );
+					
+				var physical = new OpenLayers.Layer.Google( 
+																"Google Terrain", 
+																{
+																	type: G_PHYSICAL_MAP, 
+																	'sphericalMercator': true,
+																	'maxZoomLevel':18
+																}
+														   );										  																	 
+				
+				map.addLayer(satellite);
+				map.addLayer(physical);	
+				
+				var ags_map_service = new OpenLayers.Layer.AgsDynamic(   
+													"United States", 
+													"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/Export?", 										
+													{ 											
+														LAYERS: 'show:0,1,2',																			
+														IMAGESR: '102113',
+														BBOXSR: '102113',																																																									
+														FORMAT: 'png',											
+														TRANSPARENT: true
+													},
+													{														
+														isBaseLayer: false,
+														singleTile: true												
+													}
+												);												 
+				ags_map_service.setVisibility(false);
+				ags_map_service.setOpacity(0.75);						
+				map.addLayer(ags_map_service);	
+				
+				map.setCenter(new OpenLayers.LonLat(center_mercator_x, center_mercator_y), zoom);
+				
+				map.addControl(new OpenLayers.Control.LayerSwitcher());
+				map.addControl(new OpenLayers.Control.PanZoomBar());
+				map.addControl(new OpenLayers.Control.NavToolbar());		
+			}
+			
+		</script>		
+	</head>
+    <body onload="init();">
+		<div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+    </body>
+</html>
Index: playground/arcgis/agsDynamic-wgs84.html
===================================================================
--- playground/arcgis/agsDynamic-wgs84.html	(revision 0)
+++ playground/arcgis/agsDynamic-wgs84.html	(revision 0)
@@ -0,0 +1,84 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsDynamic Layer Sample</title>
+
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+			  
+		<script type="text/javascript"">
+			var map;
+			
+			function init() {
+				var lon = -122.6335; 
+				var lat = 45.4447;																		
+				var zoom = 5;
+				
+				OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+			var options = 	{
+				//panMethod: null, // set 'panMethod' to null to disable animated panning
+				controls: [
+		       		new OpenLayers.Control.LayerSwitcher(),
+					//new OpenLayers.Control.LayerSwitcher2(),
+		       		new OpenLayers.Control.Navigation(),
+		       		new OpenLayers.Control.PanZoom(),
+					//new OpenLayers.Control.PanZoom2(),
+		       		new OpenLayers.Control.MousePosition()
+		       	],
+		        projection: "EPSG:4326",		        		        	
+		   		maxResolution: 0.3515625,		        	        
+		        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+		        
+		   	};
+		
+		    map = new OpenLayers.Map('map', options);
+			
+		    var base_layer = new OpenLayers.Layer.AgsTiled( 
+				"esri_street_map", 
+				"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+				{					
+					tileSize: new OpenLayers.Size(512, 512),
+					tileFormat:'jpg',
+					tileOrigin: new OpenLayers.LonLat(-180, 90),
+					tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+					isBaseLayer: true,
+					buffer: 0,
+					singleTile: false					 					
+				}
+			); 
+		    map.addLayer(base_layer); 
+				
+				var ags_map_service = new OpenLayers.Layer.AgsDynamic(   
+													"United States", 
+													"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/Export?", 										
+													{ 											
+														LAYERS: 'show:0,1,2',																			
+														IMAGESR: '4326',
+														BBOXSR: '4326',																																																									
+														FORMAT: 'png',											
+														TRANSPARENT: true
+													},
+													{														
+														isBaseLayer: false,
+														singleTile: true												
+													}
+												);												 
+				ags_map_service.setVisibility(false);
+				ags_map_service.setOpacity(0.75);						
+				map.addLayer(ags_map_service);	
+				
+				map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+				
+				map.addControl(new OpenLayers.Control.LayerSwitcher());
+				map.addControl(new OpenLayers.Control.PanZoomBar());
+				map.addControl(new OpenLayers.Control.NavToolbar());		
+			}
+			
+		</script>		
+	</head>
+    <body onload="init();">
+		<div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+    </body>
+</html>
Index: playground/arcgis/agsFindTask.html
===================================================================
--- playground/arcgis/agsFindTask.html	(revision 0)
+++ playground/arcgis/agsFindTask.html	(revision 0)
@@ -0,0 +1,22 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsFindTask Control Sample</title>
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>				
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>							 
+		<script type="text/javascript" src="agsFindTask.js"></script>			
+	</head>
+    <body onload="init();">    	
+		<p>
+			Click "Find" buton to find all cities with name like "San "; 
+			<br>Click "Clean up" button to clean up the find results; 
+			<br>See Firebug console for full list of found cities
+		</p>
+		<div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+		<input id="find_btn" type="button" value="Find" onclick="find();"/>
+		<input id="clean_btn" type="button" value="Clean up" onclick="cleanup();"/>					
+	</body>
+</html>
Index: playground/arcgis/agsFindTask.js
===================================================================
--- playground/arcgis/agsFindTask.js	(revision 0)
+++ playground/arcgis/agsFindTask.js	(revision 0)
@@ -0,0 +1,95 @@
+var map;
+var agsFindTask;
+			
+function init() {
+	
+	var lon = -122.391667;
+	var lat = 37.760628;
+	var zoom = 7;							
+	
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher(),
+			//new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom(),
+			//new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    map.addLayer(base_layer);  		
+						
+	agsFindTask = new OpenLayers.Control.AgsFindTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[
+			callback,
+			function(olfeatures) {
+				OpenLayers.Console.log("...you can pass in multiple callback functions...");
+			}
+		], 
+		{
+			displayResults: true, // default value
+			errback: function(error){
+				OpenLayers.Console.error("...error executing esri.tasks.FindTask...");
+			}
+		}
+	);
+	// IMPORTANT: although there is no map interaction but you still must add it to map
+	map.addControl(agsFindTask);							
+	map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);						
+}
+
+function callback(olFeatures) {				
+	for(var i=0; i<olFeatures.length; i++) {
+		if(olFeatures[i] && olFeatures[i] instanceof OpenLayers.Feature.Vector) {									
+			//OpenLayers.Console.debug("...feature found: " + olFeatures[i].id);
+			OpenLayers.Console.debug("...feature found: " + olFeatures[i].attributes['CITY_NAME'] + " location: " + olFeatures[i].geometry);
+		}
+	}
+} 
+
+function find() {
+	var findParameters = {
+		'outSpatialReference': map['projection'],
+		'layerIds': [0],
+		'searchFields': ["CITY_NAME"],
+		'contains': true,
+		'searchText': "San " // change the Find criterias here
+	};
+	agsFindTask.execute(
+		findParameters, 
+		[
+			function(olFeatures) {
+				OpenLayers.Console.log("...you can pass in multiple callback functions at runtime too...");
+			}		
+		]
+	);
+}
+
+function cleanup() {
+	agsFindTask.cleanupResults();
+};
Index: playground/arcgis/agsGeometryService.html
===================================================================
--- playground/arcgis/agsGeometryService.html	(revision 0)
+++ playground/arcgis/agsGeometryService.html	(revision 0)
@@ -0,0 +1,43 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsGeometryService Control Sample</title>
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>		
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>	
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;			           	 	
+		</script>				  
+		<script type="text/javascript" src="agsGeometryService.js"></script>		
+	</head>
+    <body onload="init();">
+    	<p>					
+			Click 'Buffer' button to do buffer; dbl-click an existing point feature to create buffer polygon; 
+			<br>Click 'Simplify': button to do simplify; dbl-click an existing feature to simplify; hold Ctrl key and draw a feature on map, when finished feature will be simplified;
+			<br>Click 'Project' to project a feature to EPSG:900913: dbl-click an existing feature to project to EPSG:900913; (see results in Firebug console)
+			<br>Click 'AreasAndLengths' or 'Lengths' to calculate lengths and areas of a feature; dbl-click an existing feature to calculate lengths and areas;(see results in Firebug console)
+			<br>Click 'LabelPoints' to label point in polygon; dbl-click an existing polygon feature to label points;
+			<br>For 'MultiPolygon LabelPoints' to label point in multiple polygons, first select muliple polygons on map and click 'MultiPolygon LabelPoints' to label points;
+			<br>For 'Relation' first select any two existing features on map and click button 'Relation' to calculate if they are in INTERSECT relation; (see results in Firebug console)
+			<br>Click "Clean up" to clean up identify results.			
+		</p>
+		<div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+		<!--
+		<input id="toggle_mode_btn" type="button" value="Select Mode (click to toggle)" onclick="toggleMode();" />		
+		<input id="add_features_btn" type="button" value="Add Test Features" onclick="addTestFeatures();"/>
+		-->
+		<input id="clean_btn" type="button" value="Clean up" onclick="cleanup();"/>		
+		<input id="buffer_btn" type="button" value="Buffer" onclick="doBuffer();"/>
+		<input id="simplify_btn" type="button" value="Simplify" onclick="doSimplify();"/>
+		<input id="project_btn" type="button" value="Project" onclick="doProject();"/>
+		<input id="relation_btn" type="button" value="Relation" onclick="doRelation();"/>
+		<br>
+		<input id="lengths_btn" type="button" value="Lengths" onclick="doLengths();"/>
+		<input id="areasAndLengths_btn" type="button" value="AreasAndLengths" onclick="doAreasAndLengths();"/>
+		<input id="labelPoints_btn" type="button" value="LabelPoints" onclick="doLabelPoints();"/>
+		<input id="labelPoints_btn2" type="button" value="MultiPolygon LabelPoints" onclick="doLabelPointsOnMultiPolygons();"/>
+    </body>
+</html>
Index: playground/arcgis/agsGeometryService.js
===================================================================
--- playground/arcgis/agsGeometryService.js	(revision 0)
+++ playground/arcgis/agsGeometryService.js	(revision 0)
@@ -0,0 +1,356 @@
+var map;
+var agsGeometryService;
+
+function init() {
+	var lon = -122.391667;
+	var lat = 37.760628;
+	var zoom = 12;							
+	
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    map.addLayer(base_layer);  	
+			
+	agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(results) {				
+				if(this.geometryServiceType == "buffer") {
+					OpenLayers.Console.debug("...results of esri.tasks.GeometryService 'buffer' operation...");
+					for(var i=0; i<results.length; i++) {
+						if(results[i] && results[i] instanceof OpenLayers.Feature.Vector) {
+							OpenLayers.Console.debug("...buffer polygon feature: " + results[i].id);															
+						}
+					}
+				} else if(this.geometryServiceType == "project") {
+					OpenLayers.Console.debug("...results of esri.tasks.GeometryService 'project' operation...");
+					for(var i=0; i<results.length; i++) {
+						if(results[i] && results[i] instanceof OpenLayers.Feature.Vector) {
+							OpenLayers.Console.debug("...projected feature: " + results[i].geometry);															
+						}
+					}	
+				} else if(this.geometryServiceType == "areasAndLengths") {
+					OpenLayers.Console.debug("...results of esri.tasks.GeometryService 'areasAndLengths' operation...");
+					if(results.areas) OpenLayers.Console.debug("...areas: " + results.areas);
+					if(results.lengths) OpenLayers.Console.debug("...lengths: " + results.lengths);
+				} else if (this.geometryServiceType == "labelPoints") {
+					OpenLayers.Console.debug("...results of esri.tasks.GeometryService 'labelPoints' operation...");
+					for (var i = 0; i < results.length; i++) {
+						if (results[i] && results[i] instanceof OpenLayers.Feature.Vector) {
+							OpenLayers.Console.debug("...labelPoints: " + results[i].geometry);
+						}
+					}
+				} else if(this.geometryServiceType == "lengths") {
+					OpenLayers.Console.debug("...results of esri.tasks.GeometryService 'lengths' operation...");					
+					if(results.lengths) OpenLayers.Console.debug("...lengths: " + results.lengths);
+				} else if(this.geometryServiceType == "relation") {
+					OpenLayers.Console.debug("...results of esri.tasks.GeometryService 'relation' operation...");
+					for(var i=0; i<results.length; i++) {
+						if(results[i]) {
+							OpenLayers.Console.debug("...index of features in that relation: (" + results[i]['geometry1Index'] + "," + results[i]['geometry2Index'] + ")");															
+						}
+					}
+				} else if(this.geometryServiceType == "simplify") {
+					OpenLayers.Console.debug("...results of esri.tasks.GeometryService 'simplify' operation...");
+					for (var i = 0; i < results.length; i++) {
+						if (results[i] && results[i] instanceof OpenLayers.Feature.Vector) {
+							OpenLayers.Console.debug("...simplified feature: " + results[i].geometry);
+						}
+					}
+				} else {
+					OpenLayers.Console.debug("...results of other types of operations...");
+				}	
+			},
+			function(results) {				
+				OpenLayers.Console.log("...you can pass in multiple callback functions...");	
+			}
+		],
+		{
+			mode: "select", 
+			drawCtrlHandler: OpenLayers.Handler.Polygon, 
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			geometryServiceType: "buffer",			
+		}
+	);
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();					
+	
+	map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+	addTestFeatures();		
+}
+
+function callback(olFeatures) {				
+	
+} 
+
+function toggleMode() {
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+		document.getElementById('toggle_mode_btn').value = "Select Mode (click to toggle)";
+	} else if(agsGeometryService.mode == "select") {
+		agsGeometryService.switchMode("draw");
+		document.getElementById('toggle_mode_btn').value = "Draw Mode (click to toggle)";
+	}
+}
+
+function cleanup() {
+	agsGeometryService.cleanupResults();
+};
+
+function addTestFeatures() {
+	var point = new OpenLayers.Geometry.Point(-122.391667, 37.760628);
+	var point_feature = new OpenLayers.Feature.Vector(point);
+	
+	var polygon_points = [];
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4052282487793, 37.77032686779785));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.40067922229004, 37.76234461376953));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4099489366455, 37.7565939576416));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	
+	var polygon_linearring = new OpenLayers.Geometry.LinearRing(polygon_points);
+	var polygon =  new OpenLayers.Geometry.Polygon([polygon_linearring]);
+	var polygon_feature = new OpenLayers.Feature.Vector(polygon);
+	
+	var polygon2_points = [];
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40385495776367, 37.749470010498044));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.39415608996582, 37.75135828564453));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.39467107409668, 37.74577929089355));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40042173022461, 37.743204370239255));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40385495776367,37.749470010498044));
+	
+	var polygon2_linearring = new OpenLayers.Geometry.LinearRing(polygon2_points);
+	var polygon2 =  new OpenLayers.Geometry.Polygon([polygon2_linearring]);
+	var polygon2_feature = new OpenLayers.Feature.Vector(polygon2);
+	
+	var polyline_points = [];
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42788755053711, 37.76861025402832));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42428266162109, 37.771442666748044));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42136441821289, 37.76835276196289));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42119275683594, 37.77401758740234));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.41664373034668, 37.77152849743652));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.415442100708, 37.77676416943359));
+	
+	var polyline_linestring = new OpenLayers.Geometry.LineString(polyline_points);
+	var polyline =  new OpenLayers.Geometry.MultiLineString([polyline_linestring]);
+	var polyline_feature = new OpenLayers.Feature.Vector(polyline);
+	
+	var polyline2_points = [];	
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.41329633349609, 37.77530504772949));
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.41089307421875, 37.77230097363281));
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.40737401599121, 37.77685000012207));
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.40505658740234, 37.773159280517575));
+	
+	var polyline2_linestring = new OpenLayers.Geometry.LineString(polyline2_points);
+	var polyline2 =  new OpenLayers.Geometry.MultiLineString([polyline2_linestring]);
+	var polyline2_feature = new OpenLayers.Feature.Vector(polyline2);
+	
+	var polyline3_points = [];	
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40651570910644, 37.75599314282226));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40282498950195, 37.75779558728027));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40677320117187, 37.760628));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40359746569824,37.76303125927734));
+	
+	var polyline3_linestring = new OpenLayers.Geometry.LineString(polyline3_points);
+	var polyline3 =  new OpenLayers.Geometry.MultiLineString([polyline3_linestring]);
+	var polyline3_feature = new OpenLayers.Feature.Vector(polyline3);
+	
+	var _interlLayer_ = map.getLayersByName("__internal__")[0];	
+	_interlLayer_.addFeatures([point_feature, polygon_feature, polygon2_feature, polyline_feature, polyline2_feature, polyline3_feature]);
+}
+
+function doBuffer() {
+	if(agsGeometryService.geometryServiceType != "buffer") {
+		agsGeometryService.setGeometryServiceType("buffer");
+	}
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+	}
+	agsGeometryService.displayResults = true;
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326"
+		}
+	);	
+}
+
+function doSimplify() {
+	// TODO:
+}
+
+function doProject() {
+	if(agsGeometryService.geometryServiceType != "project") {
+		agsGeometryService.setGeometryServiceType("project");
+	}
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+	}
+	// perform projection from EPSG:4326 to EPSG:102113
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:102113"
+		}
+	);	
+	agsGeometryService.displayResults = false;
+}
+
+function doLengths() {
+	if(agsGeometryService.geometryServiceType != "lengths") {
+		agsGeometryService.setGeometryServiceType("lengths");
+	}
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+	}
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326"
+		}
+	);	
+	agsGeometryService.displayResults = false;
+}
+
+function doAreasAndLengths() {
+	if(agsGeometryService.geometryServiceType != "areasAndLengths") {
+		agsGeometryService.setGeometryServiceType("areasAndLengths");
+	}
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+	}
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326"
+		}
+	);	
+	agsGeometryService.displayResults = false;
+}
+
+function doLabelPoints() {
+	if(agsGeometryService.geometryServiceType != "labelPoints") {
+		agsGeometryService.setGeometryServiceType("labelPoints");
+	}
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+	}
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326"
+		}
+	);	
+	agsGeometryService.displayResults = true;
+}
+
+function doLabelPointsOnMultiPolygons() {
+	if(agsGeometryService.geometryServiceType != "labelPoints") {
+		agsGeometryService.setGeometryServiceType("labelPoints");
+	}
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+	}
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326"
+		}
+	);
+	agsGeometryService.multiple = true;
+	agsGeometryService.displayResults = true;
+	var _interlLayer_ = map.getLayersByName("__internal__")[0];	
+	if(_interlLayer_.selectedFeatures) {
+		agsGeometryService.execute(
+			_interlLayer_.selectedFeatures,
+			{},
+			[]
+		);
+	}
+}
+
+function doRelation() {
+	if(agsGeometryService.geometryServiceType != "relation") {
+		agsGeometryService.setGeometryServiceType("relation");
+	}
+	if(agsGeometryService.mode == "draw") {
+		agsGeometryService.switchMode("select");
+	}
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326",
+			'spatialRelationship': 		"INTERSECTION"
+		}
+	);
+	agsGeometryService.multiple = true;
+	agsGeometryService.displayResults = false;
+	var _interlLayer_ = map.getLayersByName("__internal__")[0];	
+	if(_interlLayer_.selectedFeatures) {
+		agsGeometryService.execute(
+			_interlLayer_.selectedFeatures,
+			{},
+			[]
+		);
+	}
+}
+
+function doSimplify() {
+	if(agsGeometryService.geometryServiceType != "simplify") {
+		agsGeometryService.setGeometryServiceType("simplify");
+	}
+	if(agsGeometryService.mode == "select") {
+		agsGeometryService.switchMode("draw");
+	}
+	OpenLayers.Util.extend(
+		agsGeometryService.taskParameters,
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326"		
+		}
+	);
+	agsGeometryService.multiple = true;
+	agsGeometryService.displayResults = true;
+}
+
+
Index: playground/arcgis/agsGeoprocessor-featureResults-asyn.html
===================================================================
--- playground/arcgis/agsGeoprocessor-featureResults-asyn.html	(revision 0)
+++ playground/arcgis/agsGeoprocessor-featureResults-asyn.html	(revision 0)
@@ -0,0 +1,22 @@
+<html xmlns="http://www.w3.org/1999/xhtml">
+    <head>
+        <title>agsGeoprocessor-featureResults-asyn</title>
+        <link rel="stylesheet" href="../../theme/default/style.css" type="text/css"/>       
+        
+        <script src="../../lib/Firebug/firebug.js"></script>
+        <script src="../../lib/OpenLayers.js"></script>
+		
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>		
+		
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;        				           	 
+		</script>
+		
+        <script src="agsGeoprocessor-featureResults-asyn.js"></script>
+    </head>
+    <body onload="init();">        
+        <div id="map" style="width: 1024px; height: 512px; margin-top: 5px; margin-left: 5px; background-color: #ffffff"></div>
+	</body>
+</html>
Index: playground/arcgis/agsGeoprocessor-featureResults-asyn.js
===================================================================
--- playground/arcgis/agsGeoprocessor-featureResults-asyn.js	(revision 0)
+++ playground/arcgis/agsGeoprocessor-featureResults-asyn.js	(revision 0)
@@ -0,0 +1,156 @@
+var map;
+var agsGeoprocessor2;
+        
+function init() {    
+	
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    map.addLayer(base_layer);  
+    
+	// sample 1
+	var lon = -122.19;
+	var lat = 46.19;							
+	var zoom = 10;
+	
+	agsGeoprocessor2 = new OpenLayers.Control.AgsGeoprocessor(		
+		"http://sazabi/arcgis/rest/services/ogctools_sthelens/GPServer/wcs2Contour",
+		null,		
+		null,
+		{
+			mode: "draw",
+			asynchronous: true,
+			drawCtrlHandler: OpenLayers.Handler.Polygon,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {
+				'service_url': "http://sazabi/arcgis/services/sthelens/GeoDataServer/WCSServer?",
+				'Coverage_Name':"2",
+				'Service_Version':"1.0.0",				
+				'output_raster_name':"rasteroutput4wcscontour",
+				'coverage_extent':"",
+				'env:outSR':"4326"				
+			},
+		}
+	);
+		
+	agsGeoprocessor2.geoprocessingResultsParser = function(agsResults, options) {     	   
+		// result of this gp service is featureSet		
+		var processResultData = dojo.hitch(
+			this,
+			function(result) {
+        		var agsGraphics = result.value.features;
+				var olResults = this.adapter.parseAgsGraphics(agsGraphics); 
+				var evt = {};
+				evt.results = olResults;
+        		this.events.triggerEvent("asynjobcomplete", evt);
+			}
+		);
+		
+		options.agsGeoprocessor.getResultData(
+			agsResults.jobId, 
+			"contour4wcs", 
+			processResultData
+		);
+    },
+	
+	// sample2
+	/*
+	var lon = -122.6335;
+	var lat = 45.4447;							
+	var zoom = 8;
+    
+	agsGeoprocessor2 = new OpenLayers.Control.AgsGeoprocessor(		
+		"http://orthogonal.esri.com/ArcGIS/rest/services/Portland/PortlandMap/GPServer/BufferModel",
+		null,		
+		null,
+		{
+			mode: "draw",
+			asynchronous: true,
+			drawCtrlHandler: OpenLayers.Handler.Point,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {
+				'distance':5,
+				'units':"esriMiles"				
+			},
+		}
+	);
+	
+	agsGeoprocessor2.geoprocessingParamsEnocoder = function(agsFeatureSet, tasksParameters) {     	       	
+		var geoprocessingParams = {};
+		
+		agsFeatureSet.geometryType = "esriGeometryPoint";
+		//agsFeatureSet.spatialReference = new esri.SpatialReference({wkid:"4326"});
+		
+		geoprocessingParams['InputPoints'] = agsFeatureSet;
+		geoprocessingParams['env:outSR'] = "4326";
+		
+		var linearUnits = new esri.tasks.LinearUnit();
+		linearUnits.distance = tasksParameters.distance;
+		linearUnits.units = tasksParameters.units;
+		geoprocessingParams['Distance'] = linearUnits;
+		
+		return geoprocessingParams;
+    };
+	
+	agsGeoprocessor2.geoprocessingResultsParser = function(agsResults, options) {     	   
+		// result of this gp service is featureSet		
+		var processResultData = dojo.hitch(
+			this,
+			function(result) {
+        		var agsGraphics = result.value.features;
+				var olResults = this.adapter.parseAgsGraphics(agsGraphics); 
+				var evt = {};
+				evt.results = olResults;
+        		this.events.triggerEvent("asynjobcomplete", evt);
+			}
+		);
+		
+		options.agsGeoprocessor.getResultData(
+			agsResults.jobId, 
+			"output", 
+			processResultData
+		);
+    };
+	*/
+	map.addControl(agsGeoprocessor2);
+	agsGeoprocessor2.activate();
+	
+    map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+}
+
Index: playground/arcgis/agsGeoprocessor-featureResults.html
===================================================================
--- playground/arcgis/agsGeoprocessor-featureResults.html	(revision 0)
+++ playground/arcgis/agsGeoprocessor-featureResults.html	(revision 0)
@@ -0,0 +1,22 @@
+<html xmlns="http://www.w3.org/1999/xhtml">
+    <head>
+        <title>agsGeoprocessor-featureResults</title>
+        <link rel="stylesheet" href="../../theme/default/style.css" type="text/css"/>       
+        
+        <script src="../../lib/Firebug/firebug.js"></script>
+        <script src="../../lib/OpenLayers.js"></script>
+		
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>		
+		
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;        				           	 
+		</script>
+		
+        <script src="agsGeoprocessor-featureResults.js"></script>
+    </head>
+    <body onload="init();">        
+        <div id="map" style="width: 1024px; height: 512px; margin-top: 5px; margin-left: 5px; background-color: #ffffff"></div>
+	</body>
+</html>
Index: playground/arcgis/agsGeoprocessor-featureResults.js
===================================================================
--- playground/arcgis/agsGeoprocessor-featureResults.js	(revision 0)
+++ playground/arcgis/agsGeoprocessor-featureResults.js	(revision 0)
@@ -0,0 +1,79 @@
+var map;
+var agsGeoprocessor2;
+        
+function init() {    
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    map.addLayer(base_layer);  
+    
+    var lon = -122.838493;
+	var lat = 45.432976;
+    var zoom = 12;
+    
+	agsGeoprocessor2 = new OpenLayers.Control.AgsGeoprocessor(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Network/ESRI_DriveTime_US/GPServer/CreateDriveTimePolygons",
+		null,		
+		null,
+		{
+			mode: "draw",
+			drawCtrlHandler: OpenLayers.Handler.Point,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {'Drive_Times':"1 2 4"},
+		}
+	);
+	
+	agsGeoprocessor2.geoprocessingParamsEnocoder = function(agsFeatureSet, tasksParameters){	
+		OpenLayers.Console.log("...customized...encode geoprocessing parameters...");
+		var params = {
+			"Input_Location": agsFeatureSet,
+			"Drive_Times": tasksParameters['Drive_Times']
+		};
+		return params;
+	};
+		
+	agsGeoprocessor2.geoprocessingResultsParser = function(agsResults) {     	   
+    	OpenLayers.Console.log("...customized...parse geoprocessing results...");
+		var agsGraphics = agsResults[0].value.features;
+		var olResults = this.adapter.parseAgsGraphics(agsGraphics);    	
+    	return olResults;
+    },
+	
+	map.addControl(agsGeoprocessor2);
+	agsGeoprocessor2.activate();
+	
+    map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+}
+
Index: playground/arcgis/agsGeoprocessor-imageResults-asyn.html
===================================================================
--- playground/arcgis/agsGeoprocessor-imageResults-asyn.html	(revision 0)
+++ playground/arcgis/agsGeoprocessor-imageResults-asyn.html	(revision 0)
@@ -0,0 +1,22 @@
+<html xmlns="http://www.w3.org/1999/xhtml">
+    <head>
+        <title>agsGeoprocessor-imageResults</title>
+        <link rel="stylesheet" href="../../theme/default/style.css" type="text/css"/>       
+        
+        <script src="../../lib/Firebug/firebug.js"></script>
+        <script src="../../lib/OpenLayers.js"></script>
+		
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>		
+		
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;        				           	 
+		</script>
+		
+        <script src="agsGeoprocessor-imageResults-asyn.js"></script>
+    </head>
+    <body onload="init();">        
+        <div id="map" style="width: 1024px; height: 512px; margin-top: 5px; margin-left: 5px; background-color: #ffffff"></div>
+	</body>
+</html>
Index: playground/arcgis/agsGeoprocessor-imageResults-asyn.js
===================================================================
--- playground/arcgis/agsGeoprocessor-imageResults-asyn.js	(revision 0)
+++ playground/arcgis/agsGeoprocessor-imageResults-asyn.js	(revision 0)
@@ -0,0 +1,190 @@
+var map;
+var agsGeoprocessor2;
+        
+function init() {    
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer1 = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map",  
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer/tile/",
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+	
+    map.addLayer(base_layer1);  
+    /*
+	var base_layer2 = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		//"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_StreetMap_World_2D/MapServer/tile/",
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+	map.addLayer(base_layer2); 
+	*/
+	// brigham WCS service
+	/*
+	var lon = -112.5;
+	var lat = 41.5;							
+	var zoom = 8;
+   
+	agsGeoprocessor2 = new OpenLayers.Control.AgsGeoprocessor(		
+		"http://sazabi/ArcGIS/rest/services/wcspro2/GPServer/wcs2slope",
+		null,		
+		null,
+		{
+			mode: "draw",
+			asynchronous: true,
+			drawCtrlHandler: OpenLayers.Handler.Polygon,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {
+				'Service_Url':"http://sazabi/arcgis/services/brigham/GeoDataServer/WCSServer?",
+				'Coverage_Name':"1",
+				'Service_Version':"1.0.0",
+				'Z_factor': 0.00002831
+			},
+		}
+	);
+		
+	agsGeoprocessor2.geoprocessingResultsParser = function(agsResults, options) {     	       	
+		// when result of gp service is image
+		var processResultImg = dojo.hitch(
+			this,
+			function(mapImage) {
+				var resultImage = new OpenLayers.Layer.Image(   
+					"wcspro:gpresults", 
+					mapImage.value.href, 
+					this.map.getExtent(),
+	        		this.map.getSize(),
+					{														
+						isBaseLayer: false,
+						numZoomLevels: 3													
+					}
+				); 	
+				var evt = {};
+        		evt.results = [resultImage];
+        		this.events.triggerEvent("asynjobcomplete", evt);
+			}
+		);
+
+		var imageParameters = new esri.layers.ImageParameters();
+		imageParameters.bbox = this.adapter.encodeAgsGeometry.extent.apply(this.adapter, [this.map.getExtent(), "EPSG:4326"]);
+		imageParameters.width = (this.map.getSize()).w;
+		imageParameters.height = (this.map.getSize()).h;
+		imageParameters.format = "png";
+		imageParameters.transparent = true;
+		
+		options.agsGeoprocessor.getResultImage(
+			agsResults.jobId, 
+			"slope4wcs", 
+			imageParameters, 
+			processResultImg
+		);
+    },
+    */
+	
+	// sthelens WCS service
+	var lon = -122.19;
+	var lat = 46.19;							
+	var zoom = 10;
+   
+	agsGeoprocessor2 = new OpenLayers.Control.AgsGeoprocessor(		
+		"http://sazabi/ArcGIS/rest/services/ogctools_sthelens/GPServer/wcs2Hillshade",
+		null,		
+		null,
+		{
+			mode: "draw",
+			asynchronous: true,
+			drawCtrlHandler: OpenLayers.Handler.Polygon,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {
+				'Service_Url':"http://sazabi/arcgis/services/sthelens/GeoDataServer/WCSServer?",
+				'Coverage_Name':"2",
+				'Service_Version':"1.0.0",
+				'output_raster_name':"rasteroutput4wcshillshade",
+				'coverage_extent':""
+			},
+		}
+	);
+		
+	agsGeoprocessor2.geoprocessingResultsParser = function(agsResults, options) {     	       	
+		// when result of gp service is image
+		var processResultImg = dojo.hitch(
+			this,
+			function(mapImage) {
+				var resultImage = new OpenLayers.Layer.Image(   
+					"ogctools:gpresults", 
+					mapImage.value.href, 
+					this.map.getExtent(),
+	        		this.map.getSize(),
+					{														
+						displayInLayerSwitcher: false,
+						isBaseLayer: false,
+						numZoomLevels: 3																			
+					}
+				); 	
+				var evt = {};
+        		evt.results = [resultImage];
+        		this.events.triggerEvent("asynjobcomplete", evt);
+			}
+		);
+
+		var imageParameters = new esri.layers.ImageParameters();
+		imageParameters.bbox = this.adapter.encodeAgsGeometry.extent.apply(this.adapter, [this.map.getExtent(), "EPSG:4326"]);
+		imageParameters.width = (this.map.getSize()).w;
+		imageParameters.height = (this.map.getSize()).h;
+		imageParameters.format = "png";
+		imageParameters.transparent = true;
+		
+		options.agsGeoprocessor.getResultImage(
+			agsResults.jobId, 
+			"hillshade4wcs", 
+			imageParameters, 
+			processResultImg
+		);
+    };
+	
+	map.addControl(agsGeoprocessor2);
+	agsGeoprocessor2.activate();
+	
+    map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+}
+
Index: playground/arcgis/agsIdentifyTask.html
===================================================================
--- playground/arcgis/agsIdentifyTask.html	(revision 0)
+++ playground/arcgis/agsIdentifyTask.html	(revision 0)
@@ -0,0 +1,28 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsIdentifyTask Control Sample</title>
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>		
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+		<script type="text/javascript" src="agsIdentifyTask.js"></script>		
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;	     		
+		</script>				  			
+	</head>
+    <body onload="init();">
+		<p>
+			In "Draw" mode: hold Ctrl key and click on map to draw a polygon, dbl-click to finish and identify all features within the polygon;
+			<br>In "Select" mode: select an existing feature on map and dbl-click to identify all features intersect that existing feature;
+			<br>Click "Draw Mode (click to toggle)" to toggle mode;
+			<br>See Firebug console for full list of identify results;
+			<br>Click "Clean up" to clean up identify results.
+		</p>
+		<div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+		<input id="toggle_mode_btn" type="button" value="Select Mode (click to toggle)" onclick="toggleMode();" />
+		<input id="clean_btn" type="button" value="Clean up" onclick="cleanup();"/>
+    </body>
+</html>
Index: playground/arcgis/agsIdentifyTask.js
===================================================================
--- playground/arcgis/agsIdentifyTask.js	(revision 0)
+++ playground/arcgis/agsIdentifyTask.js	(revision 0)
@@ -0,0 +1,112 @@
+var map;
+var agsIdentifyTask;
+
+function init() {
+	var lon = -122.391667;
+	var lat = 37.760628;
+	var zoom = 5;							
+	
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher(),
+			//new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom(),
+			//new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    map.addLayer(base_layer);  	
+			
+	agsIdentifyTask = new OpenLayers.Control.AgsIdentifyTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[
+			callback,
+			function(olFeatures) {
+				OpenLayers.Console.log("...you can pass in multiple callback functions...");
+			}
+		],
+		{
+			mode: "select", 
+			drawCtrlHandler: OpenLayers.Handler.Polygon, // identify with hand-draw polygon
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL // enable geomerty drawing by holding 'Ctrl' key
+				}
+			}			
+		}
+	);
+	map.addControl(agsIdentifyTask);
+	agsIdentifyTask.activate();
+	
+	var identifyParameters = {					
+		'layerIds': [1], // hard code 'rivers' layer, change to identify on another layer									
+	};	
+	agsIdentifyTask.setTaskParameters(identifyParameters);	
+	map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);			
+	addTestFeatures();
+}
+
+function callback(olFeatures) {
+	//OpenLayers.Console.debug("...callback being called here...");
+	for(var i=0; i<olFeatures.length; i++) {
+		if(olFeatures[i] && olFeatures[i] instanceof OpenLayers.Feature.Vector) {
+			OpenLayers.Console.debug("...feature found: " + olFeatures[i].id);									
+			//OpenLayers.Console.debug("...feature found: " + olFeatures[i].attributes['CITY_NAME'] + " location: " + olFeatures[i].geometry);
+		}
+	}
+} 	
+
+function toggleMode() {
+	if(agsIdentifyTask.mode == "draw") {
+		agsIdentifyTask.switchMode("select");
+		document.getElementById('toggle_mode_btn').value = "Select Mode (click to toggle)";
+	} else if(agsIdentifyTask.mode == "select") {
+		agsIdentifyTask.switchMode("draw");
+		document.getElementById('toggle_mode_btn').value = "Draw Mode (click to toggle)";
+	}
+}
+
+function cleanup() {
+	agsIdentifyTask.cleanupResults();
+};
+
+function addTestFeatures() {
+	var polygon_points = [];
+	polygon_points.push(new OpenLayers.Geometry.Point(-121.81625806445312,38.24196650097656));
+	polygon_points.push(new OpenLayers.Geometry.Point(-120.02548658007812,38.97255732128906));
+	polygon_points.push(new OpenLayers.Geometry.Point(-119.93759595507812,37.92336298535156));
+	polygon_points.push(new OpenLayers.Geometry.Point(-121.01425611132812,37.04994989941406));
+	polygon_points.push(new OpenLayers.Geometry.Point(-121.81625806445312,38.24196650097656));
+	
+	var polygon_linearring = new OpenLayers.Geometry.LinearRing(polygon_points);
+	var polygon =  new OpenLayers.Geometry.Polygon([polygon_linearring]);
+	var polygon_feature = new OpenLayers.Feature.Vector(polygon);
+		
+	var _interlLayer_ = map.getLayersByName("__internal__")[0];	
+	_interlLayer_.addFeatures([polygon_feature]);
+}
Index: playground/arcgis/agsImageService.html
===================================================================
--- playground/arcgis/agsImageService.html	(revision 0)
+++ playground/arcgis/agsImageService.html	(revision 0)
@@ -0,0 +1,71 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsImageService Layer Sample</title>
+
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+				  
+		<script type="text/javascript"">
+			var map;
+			
+			function init() {
+				var lon = -80.95;
+				var lat = 28.50;
+			    var zoom = 9;
+			    
+			    var options = 	{
+					controls: [
+			    		new OpenLayers.Control.LayerSwitcher2(),
+			    		new OpenLayers.Control.Navigation(),
+			    		new OpenLayers.Control.PanZoom2(),
+			    		new OpenLayers.Control.MousePosition()
+			    	],
+			        projection: "EPSG:4326",		        		        	
+					maxResolution: 0.3515625,		        	        
+			        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90)
+				};
+				
+				map = new OpenLayers.Map('map', options);
+				
+				var agsTiledLayer = new OpenLayers.Layer.AgsTiled( 
+					"I3_Imagery_Prime_World (EPSG:4326)", 
+					"http://server.arcgisonline.com/ArcGIS/rest/services/NGS_Topo_US_2D/MapServer/tile/", 
+					{					
+						tileSize: new OpenLayers.Size(512, 512),
+						tileFormat:'jpg',
+						tileOrigin: new OpenLayers.LonLat(-180, 90),
+						tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+						isBaseLayer: true,
+						singleTile: false					 					
+					}
+				);  
+				map.addLayer(agsTiledLayer);
+
+				var ags_map_service = new OpenLayers.Layer.AgsDynamic(   
+						"Iran", 
+						"http://sazabi/ArcGIS/rest/services/iran/ImageServer/exportImage?", 										
+						{ 																																				
+							IMAGESR: '4326',
+							BBOXSR: '4326',																																																									
+							FORMAT: 'png'																
+						},
+						{														
+							isBaseLayer: false,
+							singleTile: true												
+						}
+					);												 
+				ags_map_service.setVisibility(false);
+				ags_map_service.setOpacity(0.75);						
+				map.addLayer(ags_map_service);	
+
+				map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);		
+			}			
+		</script>		
+	</head>
+    <body onload="init();">
+		 <div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff">
+		</div>
+    </body>
+</html>
Index: playground/arcgis/agsLocator.html
===================================================================
--- playground/arcgis/agsLocator.html	(revision 0)
+++ playground/arcgis/agsLocator.html	(revision 0)
@@ -0,0 +1,32 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsLocator Control Sample</title>
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>				
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>		
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;      		
+		</script>
+		<script type="text/javascript" src="agsLocator.js"></script>		
+	</head>
+    <body onload="init();">
+		 <p>
+		 	Click "Geocoding Mode (click to toggle)" to toggle between geocoding and reverse geocoding;
+			<br>In "Draw" mode: hold Ctrl key and single-click on map to do reverse-geocoding at that location;
+			<br>In "Select" mode: select an existing feature on map and dbl-click to do reverse-geocoding at that location;			
+			<br>Click "Do Geocoding" button (you must switch to Geocoding mode first) to do geocoding with address "15960 SW Loon Dr, BEAVERTON, OR, 97007";
+			<br>Click "Draw Mode (click to toggle)" to toggle select/draw mode;
+			<br>See Firebug console for full list of locations and address matchings;
+			<br>Click "Clean up" to clean up results.
+		 </p>
+		 <div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+		 <input id="do_geocoding_btn" type="button" value="Do Geocoding" onclick="doGeocoding();"/>
+		 <input id="toggle_mode_btn" type="button" value="Draw Mode (click to toggle)" onclick="toggleMode();"/>
+		 <input id="toggle_mode_btn2" type="button" value="Geocoding Mode (click to toggle)" onclick="toggleMode2();"/>
+		 <input id="clean_btn" type="button" value="Clean up" onclick="cleanup();"/>
+    </body>
+</html>
Index: playground/arcgis/agsLocator.js
===================================================================
--- playground/arcgis/agsLocator.js	(revision 0)
+++ playground/arcgis/agsLocator.js	(revision 0)
@@ -0,0 +1,133 @@
+var map = null;
+var agsLocator = null;
+
+function init() {
+	// this is where Portland is
+	var lon = -122.838493;
+	var lat = 45.432976;
+	var zoom = 13;							
+	
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher(),
+			//new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom(),
+			//new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    map.addLayer(base_layer); 
+	map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);				
+	
+	// initialize agsLocator
+	agsLocator = new OpenLayers.Control.AgsLocator(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer",
+		null,
+		[
+			function(olFeatures) {			
+				var address = "";
+				for(key in olFeatures[0].attributes) {
+					if(typeof olFeatures[0].attributes[key] === "string") {
+						address = address + " " + olFeatures[0].attributes[key];
+					}
+				}
+				OpenLayers.Console.log("address found: " + address);
+				OpenLayers.Console.log("address match score: " + olFeatures[0].attributes['score']);
+			}, 
+			function(olFeatures) {
+				OpenLayers.Console.log("...you can pass in multiple callback functions...");
+			}
+		],
+		{
+			mode: "draw", // do reverse geocoding by hand drawing a geometry on map 
+			drawCtrlHandler: OpenLayers.Handler.Point, // reverse geocoding with hand-draw polygon
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL // enable geomerty drawing by holding 'Ctrl' key
+				}
+			}
+		}
+	);				
+	map.addControl(agsLocator);
+	agsLocator.activate();
+	agsLocator.setReverseGeocoding(true);
+}
+
+function toggleMode() {
+	if(agsLocator.mode == "draw") {
+		agsLocator.switchMode("select");
+		document.getElementById('toggle_mode_btn').value = "Select Mode (click to toggle)";
+	} else if(agsLocator.mode == "select") {
+		agsLocator.switchMode("draw");
+		document.getElementById('toggle_mode_btn').value = "Draw Mode (click to toggle)";
+	}
+}
+
+function toggleMode2() {
+	if(agsLocator.reverseGeocoding == true) {
+		agsLocator.setReverseGeocoding(false);
+		document.getElementById('toggle_mode_btn2').value = "Geocoding Mode (click to toggle)";
+	} else {
+		agsLocator.setReverseGeocoding(true);
+		document.getElementById('toggle_mode_btn2').value = "Reverse Geocoding Mode (click to toggle)";
+	}
+}
+
+function cleanup() {
+	agsLocator.cleanupResults();
+};
+
+function doGeocoding() {
+	var address = {};
+	address['address'] = "15960 SW LOON DR";
+	address['city'] = "BEAVERTON";
+	address['state'] = "OR";
+	address['zip'] = "97007";
+	
+	var parameters = {};
+	parameters['address'] = address;
+	parameters['outFields'] = ["StreetName", "City", "State", "ZIP"];
+	
+	agsLocator.setReverseGeocoding(false);	
+	agsLocator.execute(
+		null,
+		parameters,
+		[
+			function(olFeatures) {
+				for(var i=0; i<olFeatures.length; i++) {
+					var address = "";							
+					for(key in olFeatures[i].attributes) {
+						if(typeof olFeatures[i].attributes[key] === "string") {
+							address = address + " " + olFeatures[i].attributes[key];
+						}
+					}
+					OpenLayers.Console.debug("address found: " + address);
+					OpenLayers.Console.debug("address match score: " + olFeatures[i].attributes['score']);
+				}								
+			}
+		]
+	);		
+}
Index: playground/arcgis/agsQueryTask.html
===================================================================
--- playground/arcgis/agsQueryTask.html	(revision 0)
+++ playground/arcgis/agsQueryTask.html	(revision 0)
@@ -0,0 +1,32 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>AgsQueryTask Control Sample</title>
+
+		<script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+		<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+				
+		<!-- ArcGIS Server JavaScript library -->
+		<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+		
+		<script type="text/javascript">			
+			esriConfig.defaults.io.proxyUrl = "../../lib/OpenLayers/Util/ags-proxy.jsp";
+        	esriConfig.defaults.io.alwaysUseProxy = false;    		
+		</script>				  
+		<script type="text/javascript" src="agsQueryTask.js"></script>
+				
+	</head>
+    <body onload="init();">
+    	<p>
+			In "Draw" mode: hold Ctrl key and single-click on map to query the state contains the point;
+			<br>In "Select" mode: select an existing feature on map and dbl-click to query the state contains the existing point;
+			<br>Click "Draw Mode (click to toggle)" to toggle mode;
+			<br>See Firebug console for full list of query results;
+			<br>Click "Clean up" to clean up query results.
+		</p>
+		<div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+		<input id="toggle_mode_btn" type="button" value="Draw Mode (click to toggle)" onclick="toggleMode();"/>
+		<input id="clean_btn" type="button" value="Clean up" onclick="cleanup();"/>
+    </body>
+</html>
Index: playground/arcgis/agsQueryTask.js
===================================================================
--- playground/arcgis/agsQueryTask.js	(revision 0)
+++ playground/arcgis/agsQueryTask.js	(revision 0)
@@ -0,0 +1,106 @@
+var map;
+var agsQueryTask;
+
+function init() {
+	var lon = -122.391667;
+	var lat = 37.760628;
+	var zoom = 3;							
+	
+	OpenLayers.ProxyHost= "/openlayers/ApacheProxyServlet?targetUrl=";
+    
+	var options = 	{
+		//panMethod: null, // set 'panMethod' to null to disable animated panning
+		controls: [
+       		new OpenLayers.Control.LayerSwitcher2(),
+       		new OpenLayers.Control.Navigation(),
+       		new OpenLayers.Control.PanZoom2(),
+       		new OpenLayers.Control.MousePosition()
+       	],
+        projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+        
+   	};
+
+    map = new OpenLayers.Map('map', options);
+	
+    var base_layer = new OpenLayers.Layer.AgsTiled( 
+		"esri_street_map", 
+		"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+		{					
+			tileSize: new OpenLayers.Size(512, 512),
+			tileFormat:'jpg',
+			tileOrigin: new OpenLayers.LonLat(-180, 90),
+			tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90), 	
+			isBaseLayer: true,
+			buffer: 0,
+			singleTile: false					 					
+		}
+	); 
+    map.addLayer(base_layer);  
+			
+	agsQueryTask = new OpenLayers.Control.AgsQueryTask(
+		// layer '2' is state layer, change here to query other layers
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2",
+		null,
+		[
+			callback,
+			function(olFeatures) {
+				OpenLayers.Console.log("...you can pass in multiple callback functions...");
+			}
+		],
+		{
+			mode: "draw", // do query by hand drawing a geometry on map 
+			drawCtrlHandler: OpenLayers.Handler.Point, 
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL // enable geomerty drawing by holding 'Ctrl' key
+				}
+			}			
+		}
+	);
+	map.addControl(agsQueryTask);
+	agsQueryTask.activate();
+	
+	var query = {										
+		'outFields': ["STATE_NAME"],
+		'returnGeometry': true,					
+		'spatialRelationship': "WITHIN"									
+	};
+	agsQueryTask.setTaskParameters(query);
+										
+	map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+	addTestFeatures();								
+}
+
+function callback(olFeatures) {
+	//OpenLayers.Console.debug("...callback being called here...");
+	for(var i=0; i<olFeatures.length; i++) {
+		if(olFeatures[i] && olFeatures[i] instanceof OpenLayers.Feature.Vector) {
+			OpenLayers.Console.debug("...feature found: " + olFeatures[i].id);									
+			//OpenLayers.Console.debug("...feature found: " + olFeatures[i].attributes['CITY_NAME'] + " location: " + olFeatures[i].geometry);
+		}
+	}
+} 
+
+function toggleMode() {
+	if(agsQueryTask.mode == "draw") {
+		agsQueryTask.switchMode("select");
+		document.getElementById('toggle_mode_btn').value = "Select Mode (click to toggle)";
+	} else if(agsQueryTask.mode == "select") {
+		agsQueryTask.switchMode("draw");
+		document.getElementById('toggle_mode_btn').value = "Draw Mode (click to toggle)";
+	}
+}
+
+function cleanup() {
+	agsQueryTask.cleanupResults();
+};
+
+function addTestFeatures() {
+	var point = new OpenLayers.Geometry.Point(-122.391667, 37.760628);
+	var point_feature = new OpenLayers.Feature.Vector(point);
+		
+	var _interlLayer_ = map.getLayersByName("__internal__")[0];	
+	_interlLayer_.addFeatures([point_feature]);
+}
\ No newline at end of file
Index: playground/arcgis/agsTiled-mercator.html
===================================================================
--- playground/arcgis/agsTiled-mercator.html	(revision 0)
+++ playground/arcgis/agsTiled-mercator.html	(revision 0)
@@ -0,0 +1,83 @@
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <title>OpenLayers Tiled Map Service Example</title>
+    <link rel="stylesheet" href="../../theme/default/style.css" type="text/css" />
+    <style type="text/css">
+        #map {
+            width: 800px;
+            height: 475px;
+            border: 1px solid black;
+        }
+    </style>
+    
+    <script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+				 
+	<!-- Google Earth library -->
+	<script src='http://maps.google.com/maps?file=api&amp;v=2&amp;key=ABQIAAAA44VqMzKOlUj3kMMbZwNyDRSUwqIfIQ6JFPfFD1ZcfKLPey_q8hQH-euV-MYp4ZdHZgBm9qwNA9FcIA'></script>
+	
+    <script type="text/javascript">
+        function init(){	        	        
+	        
+	        var lon = -122.838493; 
+			var lat = 45.432976;
+			var zoom = 9;
+								
+			var center_mercator = OpenLayers.Layer.SphericalMercator.forwardMercator(lon, lat);
+			center_mercator_x = center_mercator.lon;
+			center_mercator_y = center_mercator.lat;
+	        
+	        var options = 	{
+	            projection: "EPSG:900913",
+		        units: "m",
+		        maxResolution: 156543.039989205,
+		        maxExtent: new OpenLayers.Bounds(-20037508.342789, -20037508.342789, 20037508.342789, 20037508.342789)				
+			};										
+			map = new OpenLayers.Map('map', options);
+			
+			var satellite = new OpenLayers.Layer.Google( 
+				"Google Satellite", 
+				{	
+					type: G_SATELLITE_MAP,
+					'sphericalMercator': true, 
+					'maxZoomLevel':18
+				}
+			);
+		    map.addLayer(satellite);	
+			
+			var agsTiledLayer = new OpenLayers.Layer.AgsTiled( 
+				"AgsTiled Layer (EPSG:900913)", 
+				"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Portland/ESRI_LandBase_WebMercator/MapServer/tile/", 
+				{
+					tileSize: new OpenLayers.Size(256,256),
+					tileFormat:'png',
+					tileOrigin: new OpenLayers.LonLat(-20037508.342789, 20037508.342789),
+					tileFullExtent: new OpenLayers.Bounds(-13758743.4295939, 5591455.28887228, -13531302.3472101, 5757360.4178881),
+					isBaseLayer: false,
+					singleTile: false					 					
+				}
+			);            
+            agsTiledLayer.setVisibility(true);
+			agsTiledLayer.setOpacity(0.75);	
+            map.addLayer(agsTiledLayer);
+            
+            var identify_results_layer = new OpenLayers.Layer.Vector(
+				"identify results", 
+				{
+					// displayInLayerSwitcher: false
+				}
+			);
+			map.addLayer(identify_results_layer);                 
+					
+			map.setCenter(new OpenLayers.LonLat(center_mercator_x, center_mercator_y), zoom);			
+			map.addControl(new OpenLayers.Control.LayerSwitcher());	
+			map.addControl(new OpenLayers.Control.PanZoomBar());	
+			OpenLayers.Console.log("...application initialized...");
+			
+		}
+    </script>
+  </head>
+  <body onload="init();">
+    <div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+  </body>
+</html>
\ No newline at end of file
Index: playground/arcgis/agsTiled-wgs84.html
===================================================================
--- playground/arcgis/agsTiled-wgs84.html	(revision 0)
+++ playground/arcgis/agsTiled-wgs84.html	(revision 0)
@@ -0,0 +1,89 @@
+<html xmlns="http://www.w3.org/1999/xhtml">
+  <head>
+    <title>OpenLayers Tiled Map Service Example</title>
+    <link rel="stylesheet" href="../../theme/default/style.css" type="text/css" />
+    <style type="text/css">
+        #map {
+            width: 800px;
+            height: 475px;
+            border: 1px solid black;
+        }
+    </style>
+    
+    <script type="text/javascript" src="../../lib/Firebug/firebug.js"></script>
+	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+				 	
+    <script type="text/javascript">
+        function init(){
+	        
+	        var lon = -122.838493; 
+			var lat = 45.432976;
+	        var zoom = 5;
+	        
+	        var options = 	{
+	            projection: "EPSG:4326",		        		        	
+				maxResolution: 0.3515625,		        	        
+		        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90)
+			};
+			
+			map = new OpenLayers.Map('map', options);
+			
+			var agsTiledLayer = new OpenLayers.Layer.AgsTiled( 
+				"AgsTiled Layer (EPSG:4326)", 
+				"http://server.arcgisonline.com/ArcGIS/rest/services/ESRI_Imagery_World_2D/MapServer/tile/", 
+				{					
+					tileSize: new OpenLayers.Size(512, 512),
+					tileFormat:'jpg',
+					tileOrigin: new OpenLayers.LonLat(-180, 90),
+					tileFullExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+					isBaseLayer: true,
+					singleTile: false					 					
+				}
+			);  
+			map.addLayer(agsTiledLayer);
+			
+			var agsTiledLayer2 = new OpenLayers.Layer.AgsTiled( 
+				"AgsTiled Layer2 (EPSG:4326)", 
+				"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Portland/Portland_ESRI_LandBase_AGO/MapServer/tile/", 
+				{					
+					tileSize: new OpenLayers.Size(512, 512),
+					tileFormat:'png',
+					tileOrigin: new OpenLayers.LonLat(-180, 90),
+					tileFullExtent: new OpenLayers.Bounds(-123.596895130833, 44.8091202495904, -121.553757125412, 45.8567792045506), 	
+					isBaseLayer: false,
+					singleTile: false					 					
+				}
+			);  
+			agsTiledLayer2.setVisibility(false);
+			agsTiledLayer2.setOpacity(0.75);
+			map.addLayer(agsTiledLayer2);
+			
+			var agsDaynamicLayer = new OpenLayers.Layer.AgsDynamic(   
+				"AgsDynamic Layer (EPSG:4326)", 
+				"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Population_World/MapServer/Export?", 										
+				{ 											
+					LAYERS: 'show:0',																			
+					IMAGESR: '4326',
+					BBOXSR: '4326',																																																									
+					FORMAT: 'png',											
+					TRANSPARENT: true
+				},
+				{														
+					isBaseLayer: false,
+					singleTile: true												
+				}
+			);												 
+			agsDaynamicLayer.setVisibility(false);
+			agsDaynamicLayer.setOpacity(0.5);						
+			map.addLayer(agsDaynamicLayer);
+			
+			map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);			
+			map.addControl(new OpenLayers.Control.LayerSwitcher());		
+			map.addControl(new OpenLayers.Control.PanZoomBar());        	     
+		}
+    </script>
+  </head>
+  <body onload="init();">
+    <div id="map" style="width:1024px;height:512px;margin-top:5px;margin-left:5px;background-color:#ffffff"></div>
+  </body>
+</html>
\ No newline at end of file
Index: playground/arcgis/index.html
===================================================================
--- playground/arcgis/index.html	(revision 0)
+++ playground/arcgis/index.html	(revision 0)
@@ -0,0 +1,23 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
+<html>
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>OpenLayers Plugin for ArcGIS Server Samples</title>			
+	</head>
+    <body>    	 
+		<table border="0" cellspacing="0" style="margin-top:0px;margin-left:0px;">
+			<tr><td><a href="agsDynamic-mercator.html"><b>agsDynamic-mercator</b></a></td></tr>
+			<tr><td><a href="agsDynamic-wgs84.html"><b>agsDynamic-wgs84</b></a></td></tr>
+			<tr><td><a href="agsTiled-mercator.html"><b>agsTiled-mercator</b></a></td></tr>
+			<tr><td><a href="agsTiled-wgs84.html"><b>agsTiled-wgs84</b></a></td></tr>
+			<tr><td><a href="agsFindTask.html"><b>agsFindTask</b></a></td></tr>			
+			<tr><td><a href="agsGeometryService.html"><b>agsGeometryService</b></a></td></tr>						
+			<tr><td><a href="agsGeoprocessor-featureResults.html"><b>agsGeoprocessor-featureResults</b></a></td></tr>
+			<tr><td><a href="agsGeoprocessor-featureResults-asyn.html"><b>agsGeoprocessor-featureResults-asyn</b></a></td></tr>
+			<tr><td><a href="agsGeoprocessor-imageResults-asyn.html"><b>agsGeoprocessor-imageResults-asyn</b></a></td></tr>
+			<tr><td><a href="agsIdentifyTask.html"><b>agsIdentifyTask</b></a></td></tr>			
+			<tr><td><a href="agsLocator.html"><b>agsLocator</b></a></td></tr>			
+			<tr><td><a href="agsQueryTask.html"><b>agsQueryTask</b></a></td></tr>					
+		</table>
+    </body>
+</html>
Index: playground/index.html
===================================================================
--- playground/index.html	(revision 0)
+++ playground/index.html	(revision 0)
@@ -0,0 +1,12 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN">
+<html>
+	<head>
+		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
+		<title>OpenLayers 2.8+ Samples</title>			
+	</head>
+    <body>    	 
+		<table border="0" cellspacing="0" style="margin-top:0px;margin-left:0px;">
+			<tr><td><a href="arcgis/index.html"><b>arcgis plugin samples</b></a></td></tr>							
+		</table>
+    </body>
+</html>
Index: tests/Control/AgsControl.html
===================================================================
--- tests/Control/AgsControl.html	(revision 0)
+++ tests/Control/AgsControl.html	(revision 0)
@@ -0,0 +1,17 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>
+	    -->
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+    	
+    	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>	
+	    <script type="text/javascript" src="AgsControl.js"></script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Control/AgsControl.js
===================================================================
--- tests/Control/AgsControl.js	(revision 0)
+++ tests/Control/AgsControl.js	(revision 0)
@@ -0,0 +1,458 @@
+var map = null;
+var vectorLayer = null;
+
+function setUp() {
+	if(map) {
+		map.destroy();
+		map = null;
+		vectorLayer = null;
+	}
+
+    var lon = -122.838493;
+	var lat = 45.432976;
+    var zoom = 12;
+
+	var options = {		                
+		projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+	};									
+	map = new OpenLayers.Map('map', options);
+
+	vectorLayer = new OpenLayers.Layer.Vector(
+		"vectorLayer", 
+		{
+			isBaseLayer: true
+		}
+	);
+	map.addLayer(vectorLayer);
+	map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+}
+
+function tearDown() {
+	map.destroy();
+	vectorLayer = null;
+	map = null;
+}
+
+function createTestFeatures() {
+	var point = new OpenLayers.Geometry.Point(-122.391667, 37.760628);
+	var point_feature = new OpenLayers.Feature.Vector(point);
+	
+	var polygon_points = [];
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4052282487793, 37.77032686779785));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.40067922229004, 37.76234461376953));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4099489366455, 37.7565939576416));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	
+	var polygon_linearring = new OpenLayers.Geometry.LinearRing(polygon_points);
+	var polygon =  new OpenLayers.Geometry.Polygon([polygon_linearring]);
+	var polygon_feature = new OpenLayers.Feature.Vector(polygon);
+	
+	var polygon2_points = [];
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40385495776367, 37.749470010498044));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.39415608996582, 37.75135828564453));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.39467107409668, 37.74577929089355));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40042173022461, 37.743204370239255));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40385495776367,37.749470010498044));
+	
+	var polygon2_linearring = new OpenLayers.Geometry.LinearRing(polygon2_points);
+	var polygon2 =  new OpenLayers.Geometry.Polygon([polygon2_linearring]);
+	var polygon2_feature = new OpenLayers.Feature.Vector(polygon2);
+	
+	var polyline_points = [];
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42788755053711, 37.76861025402832));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42428266162109, 37.771442666748044));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42136441821289, 37.76835276196289));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42119275683594, 37.77401758740234));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.41664373034668, 37.77152849743652));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.415442100708, 37.77676416943359));
+	
+	var polyline_linestring = new OpenLayers.Geometry.LineString(polyline_points);
+	var polyline =  new OpenLayers.Geometry.MultiLineString([polyline_linestring]);
+	var polyline_feature = new OpenLayers.Feature.Vector(polyline);
+	
+	var polyline2_points = [];	
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.41329633349609, 37.77530504772949));
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.41089307421875, 37.77230097363281));
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.40737401599121, 37.77685000012207));
+	polyline2_points.push(new OpenLayers.Geometry.Point(-122.40505658740234, 37.773159280517575));
+	
+	var polyline2_linestring = new OpenLayers.Geometry.LineString(polyline2_points);
+	var polyline2 =  new OpenLayers.Geometry.MultiLineString([polyline2_linestring]);
+	var polyline2_feature = new OpenLayers.Feature.Vector(polyline2);
+	
+	var polyline3_points = [];	
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40651570910644, 37.75599314282226));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40282498950195, 37.75779558728027));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40677320117187, 37.760628));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40359746569824,37.76303125927734));
+	
+	var polyline3_linestring = new OpenLayers.Geometry.LineString(polyline3_points);
+	var polyline3 =  new OpenLayers.Geometry.MultiLineString([polyline3_linestring]);
+	var polyline3_feature = new OpenLayers.Feature.Vector(polyline3);
+	
+	return [point_feature, polygon_feature, polygon2_feature, polyline_feature, polyline2_feature, polyline3_feature];
+}
+
+function createTestImageLayers() {
+	var imageLayer1 = new OpenLayers.Layer.Image(   
+		"__gpImgResults1__", 
+		"http://www.google.com", 
+		map.getExtent(),
+	    map.getSize(),
+		{														
+			displayInLayerSwitcher: false,
+			isBaseLayer: false,
+			numZoomLevels: 3																			
+		}
+	); 
+	
+	var imageLayer2 = new OpenLayers.Layer.Image(   
+		"__gpImgResults2__", 
+		"http://www.google.com", 
+		map.getExtent(),
+	    map.getSize(),
+		{														
+			displayInLayerSwitcher: false,
+			isBaseLayer: false,
+			numZoomLevels: 3																			
+		}
+	);	
+	
+	return [imageLayer1, imageLayer2];
+}
+
+function test_Control_AgsControl_addResults(t){
+	setUp();
+	t.plan(2);
+	
+	var agsControl1 = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsControl1);
+	agsControl1.activate();
+	
+	var featureResults = createTestFeatures(); // hard code 6 vector features
+	agsControl1.addResults(featureResults);
+		
+	t.eq(agsControl1._resultFeatures.length, 6, "...add correct number of result features...");
+	for(var i=0; i<agsControl1._resultFeatures.length; i++) {
+		if(!(agsControl1._resultFeatures[i] instanceof OpenLayers.Feature.Vector)) {
+			t.ok(false, "...individual result feature is not added correctly...");
+		}
+	}
+	agsControl1.cleanupResults();
+	var imageResults = createTestImageLayers(); // hard code 2 image layers
+	agsControl1.addResults(imageResults);
+	t.eq(agsControl1._resultImages.length, 2, "...add correct number of result images...");
+	for(var i=0; i<agsControl1._resultImages.length; i++) {
+		if(!(agsControl1._resultImages[i] instanceof OpenLayers.Layer.Image)) {
+			t.ok(false, "...individual image feature is not added correctly...");
+		}
+	}
+}
+
+function test_Control_AgsControl_showResults(t){
+	setUp();
+	t.plan(2);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	
+	var featureResults = createTestFeatures(); // hard code 6 vector features
+	agsControl.addResults(featureResults);
+	var imageResults = createTestImageLayers(); // hard code 6 vector features
+	agsControl.addResults(imageResults);
+	agsControl.showResults();
+	if(agsControl.layer.features.length == 6) {
+		t.ok(true, "...result features exist in map...");
+	}
+	if(map.getLayersByName("__gpImgResults1__").length == 1 && map.getLayersByName("__gpImgResults2__").length == 1) {
+		t.ok(true, "...result images exist in map...");	
+	}
+	if(map.getLayersByName("__gpImgResults1__")[0].visibility == false || map.getLayersByName("__gpImgResults2__")[0].visibility == false) {
+		t.ok(false, "...result images are not visible in map...");
+	}
+}
+
+function test_Control_AgsControl_hideResults(t){
+	setUp();
+	t.plan(4);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	
+	var featureResults = createTestFeatures(); // hard code 6 vector features
+	agsControl.addResults(featureResults);
+	var imageResults = createTestImageLayers(); // hard code 2 image layers
+	agsControl.addResults(imageResults);
+	agsControl.showResults();
+	if(agsControl.layer.features.length == 6) {
+		t.ok(true, "...result features exist in map before hide...");
+	}
+	if(map.getLayersByName("__gpImgResults1__").length == 1 && map.getLayersByName("__gpImgResults2__").length == 1) {
+		t.ok(true, "...result images exist in map before hide...");	
+	}	
+	agsControl.hideResults();
+	if(map.getLayersByName("__gpImgResults1__")[0].visibility == false && map.getLayersByName("__gpImgResults2__")[0].visibility == false) {
+		t.ok(true, "...result images are hidden in map correctly...");
+	}
+	if(agsControl.layer.features.length == 0) {
+		t.ok(true, "...result features are removed from map correctly...");
+	}
+}
+
+function test_Control_AgsControl_cleanupResults(t){
+	setUp();
+	t.plan(4);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	
+	var featureResults = createTestFeatures(); // hard code 6 vector features
+	agsControl.addResults(featureResults);
+	var imageResults = createTestImageLayers(); // hard code 6 vector features
+	agsControl.addResults(imageResults);
+	agsControl.showResults();
+	if(agsControl.layer.features.length == 6) {
+		t.ok(true, "...result features exist in map before cleanup...");
+	}
+	if(map.getLayersByName("__gpImgResults1__").length == 1 && map.getLayersByName("__gpImgResults2__").length == 1) {
+		t.ok(true, "...result images exist in map before cleanup...");	
+	}
+	
+	agsControl.cleanupResults();
+	t.eq(agsControl._resultImages.length, 0, "...remove result images from control correctly...");
+	if(map.getLayersByName("__gpImgResults1__").length == 0 && map.getLayersByName("__gpImgResults2__").length == 0) {
+		t.ok(true, "...remove result images from map correctly...");	
+	}	
+	if(agsControl.layer.features.length == 6) {
+		t.ok(true, "...remove result features from map correctly...");
+	}
+}
+
+function test_Control_AgsControl_switchMode(t){
+	setUp();
+	t.plan(4);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[
+			function(){},
+			function(){},
+		],
+		{
+			//mode: "select", // default mode is 'select' 
+		}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	
+	agsControl.switchMode("draw");
+	t.eq(agsControl.mode, "draw", "...switch to draw mode correctly...");
+	t.eq(agsControl.drawControl.active, true, "...switch to draw mode activate drawControl...");
+	
+	agsControl.switchMode("select");
+	t.eq(agsControl.mode, "select", "...switch select mode correctly...");
+	t.eq(agsControl.selectControl.active, true, "...switch to select mode activate selectControl...");	
+}
+
+function test_Control_AgsControl_switchDrawCtrlHandler(t){
+	setUp();
+	t.plan(5);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[
+			function(){},
+			function(){},
+		],
+		{
+			mode: "draw", // default mode is 'select' 
+		}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	
+	t.ok(agsControl.drawControl.handler instanceof OpenLayers.Handler.Polygon, "...default drawControl handler is OpenLayers.Handler.Polygon...");
+	agsControl.switchDrawCtrlHandler(OpenLayers.Handler.Point);
+	t.ok(agsControl.drawControl.handler instanceof OpenLayers.Handler.Point, "...switch drawControl handler correctly...");
+	t.ok(agsControl.drawCtrlHandler instanceof OpenLayers.Handler.Point, "...reset drawCtrlHandler correctly...");
+	t.eq(agsControl.drawControl.active, true, "...switch drawControl handler correctly does not deactivate draw control...");
+	
+	agsControl.deactivate();
+	agsControl.switchDrawCtrlHandler(OpenLayers.Handler.MultiPath);	
+	t.eq(agsControl.drawControl.active, false, "...switch drawControl handler correctly does not activate draw control...");
+	
+}
+
+function test_Control_AgsControl_execute(t){
+	setUp();
+	t.plan(1);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[
+			function(){},
+			function(){},
+		],
+		{
+			//mode: "select", // default mode is 'select' 
+		}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	
+	try{
+		agsControl.execute();
+	} catch(e) {
+		t.ok(true, "...can not call execute() directly...");
+	}
+}
+
+function test_Control_AgsControl_activate(t){
+	setUp();
+	t.plan(4);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[
+			function(){},
+			function(){},
+		],
+		{
+			//mode: "select", // default mode is 'select' 
+		}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	
+	t.ok(agsControl.selectControl.active, "...in 'select' mode...this.selectControl is activated correctly...");
+	t.eq(agsControl.drawControl.active, null, "...in 'select' mode...this.drawControl is not activated...");
+	
+	var agsControl2 = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[
+			function(){},
+			function(){},
+		],
+		{
+			mode: "draw", // default mode is 'select' 
+		}
+	);
+	map.addControl(agsControl2);
+	agsControl2.activate();
+	
+	t.ok(agsControl2.drawControl.active, "...in 'draw' mode...this.drawControl is activated correctly...");
+	t.eq(agsControl2.selectControl.active, null, "...in 'draw' mode...this.selectControl is not activated...");	
+}
+
+function test_Control_AgsControl_deactivate(t){
+	setUp();
+	t.plan(2);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[
+			function(){},
+			function(){},
+		],
+		{
+			//mode: "select", // default mode is 'select' 
+		}
+	);
+	map.addControl(agsControl);
+	agsControl.activate();
+	agsControl.switchMode("draw");
+	
+	agsControl.deactivate();
+	
+	t.eq(agsControl.selectControl.active, false, "...this.selectControl is deactivated correctly...");
+	t.eq(agsControl.drawControl.active, false, "...this.drawControl is deactivated correctly...");
+}
+
+
+function test_Control_AgsControl_initialize(t){
+	setUp();
+	t.plan(19);
+	
+	var agsControl = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		null,
+		[
+			function(){},
+			function(){},
+		],
+		{}
+	);
+	map.addControl(agsControl);
+	t.eq(agsControl.url, "http://www.google.com/", "...initialize url correctly...");
+	t.ok(agsControl.layer instanceof OpenLayers.Layer.Vector, "...initialize an internal vector layer if not passed in as parameter...");
+	var isPass = false;
+	if(agsControl.taskCallbacks.length == 2) {
+		if(typeof agsControl.taskCallbacks[0] == "function" && typeof agsControl.taskCallbacks[1] == "function") {
+			isPass = true;
+		}
+	}
+	t.ok(isPass, "...initialize task callback functions correctly...");	
+	t.ok(agsControl.selectControl instanceof OpenLayers.Control.SelectFeature, "...initialize select control correctly...");
+	t.ok(agsControl.drawControl instanceof OpenLayers.Control.DrawFeature, "...initialize draw control correctly...");
+	
+	t.ok(agsControl.selectControl.map instanceof OpenLayers.Map, "...hook select control to map correctly...");
+	t.ok(agsControl.drawControl.map instanceof OpenLayers.Map, "...hook draw control to map correctly...");
+		
+	t.eq(agsControl.mode, "select", "...initial mode is 'select'...");
+	t.eq(agsControl.asynchronous, false, "...initial asynchronous mode is false...");	
+	t.ok(agsControl.adapter instanceof OpenLayers.Format.AgsJsAdapter, "...initialize adapter correctly...");
+	t.eq(agsControl.adapter.config['defaultEncodeWkid'], "EPSG:4326", "...use projection of map as 'defaultEncodeWkid' of adapter...");
+	
+	t.ok(agsControl._resultFeatures instanceof Array, "...initialize _resultFeatures correctly...");
+	t.ok(agsControl._resultImages instanceof Array, "...initialize _resultImages correctly...");
+	
+	t.eq(typeof agsControl._isDefined, "function", "...initialize utility _isDefined correctly...");
+	t.eq(typeof agsControl._isAgsGeometry, "function", "...initialize utility _isAgsGeometry correctly...");
+	t.eq(typeof agsControl._isOLGeometry, "function", "...initialize utility _isOLGeometry correctly...");
+	t.eq(typeof agsControl._bindFunction, "function", "...initialize utility _bindFunction correctly...");
+	
+	var agsControl2 = new OpenLayers.Control.AgsControl(
+		"http://www.google.com/",
+		vectorLayer,
+		[],
+		{}
+	);
+	map.addControl(agsControl2);
+	t.ok(agsControl2.layer instanceof OpenLayers.Layer.Vector, "...initialize control with an external vector layer passed in as parameter...");
+	t.eq(agsControl2.layer.name, "vectorLayer", "...initialize control with an external vector layer passed in as parameter...");
+}
+
+
+
Index: tests/Control/AgsFindTask.html
===================================================================
--- tests/Control/AgsFindTask.html	(revision 0)
+++ tests/Control/AgsFindTask.html	(revision 0)
@@ -0,0 +1,16 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>
+	    -->
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>    	
+    	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>	
+	    <script type="text/javascript" src="AgsFindTask.js"></script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Control/AgsFindTask.js
===================================================================
--- tests/Control/AgsFindTask.js	(revision 0)
+++ tests/Control/AgsFindTask.js	(revision 0)
@@ -0,0 +1,174 @@
+var map = null;
+var vectorLayer = null;
+
+function setUp() {	
+	if(map) {
+		map.destroy();
+		map = null;
+		vectorLayer = null;
+	}	
+	var lon = -122.391667;
+	var lat = 37.760628;
+	var zoom = 7;
+	
+	var options = {		                
+		projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+		tileSize: new OpenLayers.Size(512,512)
+	};	
+								
+	map = new OpenLayers.Map('map', options);
+
+	vectorLayer = new OpenLayers.Layer.Vector(
+		"vectorLayer", 
+		{
+			displayInLayerSwitcher: false
+		}
+	);
+	map.addLayer(vectorLayer);
+}
+
+function tearDown() {
+	map.destroy();
+	vectorLayer = null;
+	map = null;
+}
+
+function test_Control_AgsFindTask_initialize(t) {
+	setUp();
+	t.plan(11);
+	
+	var agsFindTask = new OpenLayers.Control.AgsFindTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsFindTask);
+	agsFindTask.activate();
+	
+	t.eq(typeof agsFindTask._resultsParser['parser'], "function", "...initialize _resultsParser['parser'] correctly...");
+	t.ok(agsFindTask._resultsParser['context'] instanceof OpenLayers.Format.AgsJsAdapter, "...initialize _resultsParser['context'] correctly...");	
+	//t.eq(agsFindTask.active, false, "...disable map interaction correctly...");
+	t.ok(agsFindTask.layer instanceof OpenLayers.Layer.Vector, "...initialize an internal vector layer if not passed in as parameter...");
+		 
+	t.eq(agsFindTask.taskParameters['contains'], false, "...default 'contains' value is correct...");
+	t.eq(agsFindTask.taskParameters['outSpatialReference'], null, "...default 'outSpatialReference' value is correct...");
+	t.eq(agsFindTask.taskParameters['returnGeometry'], true, "...default 'returnGeometry' value is correct...");
+	t.eq(agsFindTask.taskParameters['layerIds'], [], "...default 'layerIds' value is correct...");
+	t.eq(agsFindTask.taskParameters['searchFields'], [], "...default 'searchFields' value is correct...");
+	t.eq(agsFindTask.taskParameters['searchText'], "", "...default 'searchText' value is correct...");
+	
+	var agsFindTask2 = new OpenLayers.Control.AgsFindTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		vectorLayer,
+		[],
+		{}
+	);
+	map.addControl(agsFindTask2);
+	t.ok(agsFindTask2.layer instanceof OpenLayers.Layer.Vector, "...initialize task with an external vector layer passed in as parameter...");
+	t.eq(agsFindTask2.layer.name, "vectorLayer", "...initialize task with an external vector layer passed in as parameter...");
+	
+	//tearDown();
+}
+
+function test_Control_AgsFindTask_destroy(t){
+	setUp();
+	t.plan(0);
+	
+	var agsFindTask = new OpenLayers.Control.AgsFindTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsFindTask);
+	
+	try {
+		agsFindTask.destroy();	
+	} catch(e) {
+		t.ok(false, "...OpenLayers.Control.AgsFindTask doesn't destroy itself correctly...");
+	}	
+}
+
+function test_Control_AgsFindTask_execute_1(t) {		
+	setUp();
+	t.plan(5);		
+	var agsFindTask = new OpenLayers.Control.AgsFindTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[
+			function(olFeatures) {				
+				var count = 0;
+				for(var i=0; i<32; i++) { // hard coded find operation should return 32 cities features
+					if(olFeatures[i] instanceof OpenLayers.Feature.Vector) {
+						count++;
+					}
+				}
+				t.eq(32, count, "...callback being called with correct number of find results...");
+				t.eq(this.layer.features.length, 32, "...this.addResults() adds find results to this.layer correctly...");
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up find results from this.layer correctly...");						
+			},
+			function(olFeatures) {				
+				var count = 0;
+				for(var i=0; i<32; i++) { // hard coded find operation should return 32 cities features
+					if(olFeatures[i] instanceof OpenLayers.Feature.Vector) {
+						count++;
+					}
+				}
+				t.eq(32, count, "...multiple callback functions are called correctly...");						
+			},
+		],
+		{
+			errback: function(error) {
+				t.ok(true, "...error callback is being called correctly...");
+			}
+		}
+	);
+	map.addControl(agsFindTask);
+	//agsFindTask.activate();
+	
+	// this hard coded find operation returns 32 cities 	
+	var findParameters = {
+		'outSpatialReference': map['projection'], // wkid:102113
+		'layerIds': [0],
+		'searchFields': ["CITY_NAME"],
+		'contains': true,
+		'searchText': "San "
+	};
+	
+	// send a valid request and expect valid find results
+	agsFindTask.execute(
+		findParameters, 
+		[
+			function(olFeatures) {				
+				var count = 0;
+				for(var i=0; i<32; i++) { // hard coded find operation should return 32 cities features
+					if(olFeatures[i] instanceof OpenLayers.Feature.Vector) {
+						count++;
+					}
+				}
+				t.eq(32, count, "...callback function passed in at runtime is called correctly...");
+			}
+		]
+	);
+	
+	// send an invalid request and expect error callback
+	/*
+	agsFindTask.execute(
+		{
+			'outSpatialReference': map['projection'], // wkid:102113
+			'layerIds': [-99],
+			'searchFields': ["CITY_NAME"],
+			'contains': true,
+			'searchText': "San "
+		}, 
+		[]
+	);
+	*/
+	t.wait_result(8);
+}
+
+
Index: tests/Control/AgsGeometryService.html
===================================================================
--- tests/Control/AgsGeometryService.html	(revision 0)
+++ tests/Control/AgsGeometryService.html	(revision 0)
@@ -0,0 +1,17 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>
+	    -->
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+    	
+    	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>	
+	    <script type="text/javascript" src="AgsGeometryService.js"></script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Control/AgsGeometryService.js
===================================================================
--- tests/Control/AgsGeometryService.js	(revision 0)
+++ tests/Control/AgsGeometryService.js	(revision 0)
@@ -0,0 +1,468 @@
+var map = null;
+var vectorLayer = null;
+
+function setUp() {
+	if(map) {
+		map.destroy();
+		map = null;
+		vectorLayer = null;
+	}	
+	var lon = -122.391667;
+	var lat = 37.760628;						
+	var zoom = 7;
+	
+	var center_mercator = OpenLayers.Layer.SphericalMercator.forwardMercator(lon, lat);
+	center_mercator_x = center_mercator.lon;
+	center_mercator_y = center_mercator.lat;
+
+	var options = {		                
+		projection: "EPSG:900913",
+		units: "m",
+		maxResolution: 156543.0339,
+		maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34),
+		tileSize: new OpenLayers.Size(512,512)
+	};									
+	map = new OpenLayers.Map('map', options);
+
+	vectorLayer = new OpenLayers.Layer.Vector(
+		"vectorLayer", 
+		{
+			isBaseLayer: true
+		}
+	);
+	map.addLayer(vectorLayer);
+	map.setCenter(new OpenLayers.LonLat(center_mercator_x, center_mercator_y), zoom);
+}
+
+function tearDown() {
+	map.destroy();
+	vectorLayer = null;
+	map = null;
+}
+
+function test_Control_AgsGeometryService_initialize(t) {
+	setUp();
+	t.plan(20);
+	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();
+	
+	t.eq(typeof agsGeometryService._resultsParser['parser'], "function", "...initialize _resultsParser['parser'] correctly...");
+	t.ok(agsGeometryService._resultsParser['context'] instanceof OpenLayers.Format.AgsJsAdapter, "...initialize _resultsParser['context'] correctly...");	
+	t.ok(agsGeometryService.selectControl instanceof OpenLayers.Control.SelectFeature, "...initialize select control correctly...");
+	t.ok(agsGeometryService.drawControl instanceof OpenLayers.Control.DrawFeature, "...initialize draw control correctly...");
+	t.eq(agsGeometryService.mode, "select", "...initial mode is 'select'...");
+	t.eq(agsGeometryService.geometryServiceType, "buffer", "...initial geometry service operation is 'buffer'...");
+	t.eq(agsGeometryService.asynchronous, false, "...geometry service control is always synchronous...");
+	t.eq(agsGeometryService.multiple, true, "...multiple feature selection is allowed...");
+	t.ok(agsGeometryService.layer instanceof OpenLayers.Layer.Vector, "...initialize an internal vector layer if not passed in as parameter...");
+		
+	t.eq(agsGeometryService.taskParameters['bufferSpatialReference'], null, "...default 'bufferSpatialReference' value is correct...");
+	t.eq(agsGeometryService.taskParameters['distances'], [1], "...default 'distances' value is correct...");
+	t.eq(agsGeometryService.taskParameters['features'], null, "...default 'features' value is correct...");
+	t.eq(agsGeometryService.taskParameters['outSpatialReference'], null, "...default 'outSpatialReference' value is correct...");
+	t.eq(agsGeometryService.taskParameters['unionResults'], false, "...default 'unionResults' value is correct...");
+	t.eq(agsGeometryService.taskParameters['unit'], "UNIT_KILOMETER", "...default 'unit' value is correct...");
+	t.eq(agsGeometryService.taskParameters['spatialRelationship'], "INTERSECTION", "...default 'spatialRelationship' value is correct...");
+	t.eq(agsGeometryService.taskParameters['inSpatialReference'], "EPSG:4326", "...default 'inSpatialReference' value is correct...");
+	t.eq(agsGeometryService.taskParameters['comparisonString'], null, "...default 'comparisonString' value is correct...");
+	
+	var agsGeometryService2 = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		vectorLayer,
+		[],
+		{}
+	);
+	map.addControl(agsGeometryService2);
+	t.ok(agsGeometryService2.layer instanceof OpenLayers.Layer.Vector, "...initialize task with an external vector layer passed in as parameter...");
+	t.eq(agsGeometryService2.layer.name, "vectorLayer", "...initialize task with an external vector layer passed in as parameter...");
+}
+
+function test_Control_AgsGeometryService_execute_buffer(t) {
+	setUp();
+	t.plan(6);
+	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(olFeatures) {						
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...buffer results are passed in callback correctly...");	
+				t.ok(olFeatures[0].geometry instanceof OpenLayers.Geometry.Polygon, "...buffer result is a polygon...");			
+				t.eq(this.layer.features.length, 1, "...this.addResults() adds buffer results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up buffer results from this.layer correctly...");
+			},
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...multiple callbacks are called correctly...");
+			}
+		],
+		{}
+	);	
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();	
+	agsGeometryService.setGeometryServiceType("buffer");
+	
+	var point = new OpenLayers.Geometry.Point(-13624578.045883348, 4545665.546829987);
+	var feature = new OpenLayers.Feature.Vector(point);
+	agsGeometryService.execute(
+		[feature],
+		{
+			'inSpatialReference':		"EPSG:900913",
+			'outSpatialReference':		"EPSG:900913"
+		},
+		[
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...callback passed in at runtime is called correctly...");
+			}
+		]
+	);
+	t.wait_result(5);
+}
+
+function test_Control_AgsGeometryService_execute_project(t) {
+	setUp();
+	t.plan(6);	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(olFeatures) {						
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...project results are passed in callback correctly...");		
+				var isPass = false;
+				if(olFeatures[0].geometry.x == -122.391666982963 && olFeatures[0].geometry.y == 37.7606279955062) {
+					isPass = true;
+				}	
+				t.ok(isPass, "...coordinates in project result are correct...");				
+				t.eq(this.layer.features.length, 1, "...this.addResults() adds project results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up project results from this.layer correctly...");				
+			},
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...multiple callbacks are called correctly...");
+			}
+		],
+		{}
+	);	
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();	
+	agsGeometryService.setGeometryServiceType("project");
+	
+	var point = new OpenLayers.Geometry.Point(-13624578.045883348, 4545665.546829987);
+	var feature = new OpenLayers.Feature.Vector(point);
+	agsGeometryService.execute(
+		[feature],
+		{
+			'inSpatialReference':		"EPSG:900913",
+			'outSpatialReference':		"EPSG:4326"
+		},
+		[
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...callback passed in at runtime is called correctly...");
+			}
+		]
+	);	
+	t.wait_result(5);
+}
+
+function test_Control_AgsGeometryService_execute_lengths(t) {
+	setUp();
+	t.plan(3);	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(olResults) {						
+				t.eq(olResults.lengths, [0.0250593528484165], "...lengths operation calculated the lengths correctly...");			
+			},
+			function(olResults) {
+				t.eq(olResults.lengths, [0.0250593528484165], "...multiple callbacks are called correctly...");
+			}
+		],
+		{
+			displayResults: false
+		}
+	);	
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();	
+	agsGeometryService.setGeometryServiceType("lengths");
+	
+	var polyline_points = [];
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42788755053711, 37.76861025402832));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42428266162109, 37.771442666748044));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42136441821289, 37.76835276196289));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.42119275683594, 37.77401758740234));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.41664373034668, 37.77152849743652));
+	polyline_points.push(new OpenLayers.Geometry.Point(-122.415442100708, 37.77676416943359));
+	
+	var polyline_linestring = new OpenLayers.Geometry.LineString(polyline_points);
+	var polyline =  new OpenLayers.Geometry.MultiLineString([polyline_linestring]);
+	var polyline_feature = new OpenLayers.Feature.Vector(polyline);
+	
+	// force map.projection to be null, so that input geometry can carry projection "EPSG:4326"
+	map.projection = null;
+	agsGeometryService.execute(
+		[polyline_feature],
+		{
+			'inSpatialReference': 	"EPSG:4326",			
+		},
+		[
+			function(olResults) {				
+				t.eq(olResults.lengths, [0.0250593528484165], "...callback passed in at runtime is called correctly...");	
+			}
+		]
+	);
+	t.wait_result(5);
+}
+
+function test_Control_AgsGeometryService_execute_areasAndLengths(t) {
+	setUp();
+	t.plan(4);	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(olResults) {						
+				t.eq(olResults.lengths, [0.0407861328248037], "...areasAndLengths operation calculated the lengths correctly...");
+				t.eq(olResults.areas, [0.000103578713606112], "...areasAndLengths operation calculated the areas correctly...");			
+			},
+			function(olResults) {
+				t.ok(true, "...multiple callbacks are called correctly...");
+			}
+		],
+		{
+			displayResults: false
+		}
+	);	
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();	
+	agsGeometryService.setGeometryServiceType("areasAndLengths");
+	
+	var polygon_points = [];
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4052282487793, 37.77032686779785));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.40067922229004, 37.76234461376953));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4099489366455, 37.7565939576416));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	
+	var polygon_linearring = new OpenLayers.Geometry.LinearRing(polygon_points);
+	var polygon =  new OpenLayers.Geometry.Polygon([polygon_linearring]);
+	var polygon_feature = new OpenLayers.Feature.Vector(polygon);
+	
+	// force map.projection to be null, so that input geometry can carry projection "EPSG:4326"
+	map.projection = null;
+	agsGeometryService.execute(
+		[polygon_feature],
+		{
+			'inSpatialReference': "EPSG:4326",
+		},
+		[
+			function(olResults) {				
+				t.ok(true, "...callback passed in at runtime is called correctly...");	
+			}
+		]
+	);
+	t.wait_result(5);
+}
+
+function test_Control_AgsGeometryService_execute_labelPoints(t) {
+	setUp();
+	t.plan(4);	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(olFeatures) {						
+				var isPass = false;
+				if(olFeatures[0].geometry.x == -122.407631508057 && olFeatures[0].geometry.y == 37.7635949661042) {
+					isPass = true;
+				}
+				t.ok(isPass, "...first label point is calculated correctly...");
+				isPass = false;
+				if(olFeatures[1].geometry.x == -122.399005523865 && olFeatures[1].geometry.y == 37.7471263202808) {
+					isPass = true;
+				}
+				t.ok(isPass, "...second label point is calculated correctly...");						
+			},
+			function(olFeatures) {
+				t.ok(true, "...multiple callbacks are called correctly...");
+			}
+		],
+		{}
+	);	
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();	
+	agsGeometryService.setGeometryServiceType("labelPoints");
+	
+	var polygon_points = [];
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4052282487793, 37.77032686779785));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.40067922229004, 37.76234461376953));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4099489366455, 37.7565939576416));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	
+	var polygon_linearring = new OpenLayers.Geometry.LinearRing(polygon_points);
+	var polygon =  new OpenLayers.Geometry.Polygon([polygon_linearring]);
+	var polygon_feature = new OpenLayers.Feature.Vector(polygon);
+	
+	var polygon2_points = [];
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40385495776367, 37.749470010498044));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.39415608996582, 37.75135828564453));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.39467107409668, 37.74577929089355));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40042173022461, 37.743204370239255));
+	polygon2_points.push(new OpenLayers.Geometry.Point(-122.40385495776367,37.749470010498044));
+	
+	var polygon2_linearring = new OpenLayers.Geometry.LinearRing(polygon2_points);
+	var polygon2 =  new OpenLayers.Geometry.Polygon([polygon2_linearring]);
+	var polygon2_feature = new OpenLayers.Feature.Vector(polygon2);
+	
+	// force map.projection to be null, so that input geometry can carry projection "EPSG:4326"
+	map.projection = null;
+	agsGeometryService.execute(
+		[polygon_feature, polygon2_feature],
+		{
+			'inSpatialReference': "EPSG:4326"
+		},
+		[
+			function(olFeatures) {				
+				t.ok(true, "...callback passed in at runtime is called correctly...");	
+			}
+		]
+	);
+	t.wait_result(5);
+}
+
+function test_Control_AgsGeometryService_execute_relation(t){
+	setUp();
+	t.plan(5);	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(results) {										
+				var isPass = false;
+				if(results[0]['geometry1Index'] == 0 && results[0]['geometry2Index'] == 0) {
+					isPass = true;
+				}						
+				t.ok(isPass, "...relation is calculated correctly...");				
+				t.ok(results[0]['feature1'] instanceof OpenLayers.Feature.Vector, "...first feature of the relation returned correctly...");
+				t.ok(results[0]['feature2'] instanceof OpenLayers.Feature.Vector, "...second feature of the relation returned correctly...");										
+			},
+			function(results) {
+				t.ok(true, "...multiple callbacks are called correctly...");
+			}
+		],
+		{
+			multiple: true,
+			displayResults: false
+		}
+	);	
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();	
+	agsGeometryService.setGeometryServiceType("relation");
+	
+	var polyline3_points = [];	
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40651570910644, 37.75599314282226));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40282498950195, 37.75779558728027));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40677320117187, 37.760628));
+	polyline3_points.push(new OpenLayers.Geometry.Point(-122.40359746569824,37.76303125927734));
+	
+	var polyline3_linestring = new OpenLayers.Geometry.LineString(polyline3_points);
+	var polyline3 =  new OpenLayers.Geometry.MultiLineString([polyline3_linestring]);
+	var polyline3_feature = new OpenLayers.Feature.Vector(polyline3);
+	
+	var polygon_points = [];
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4052282487793, 37.77032686779785));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.40067922229004, 37.76234461376953));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4099489366455, 37.7565939576416));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	
+	var polygon_linearring = new OpenLayers.Geometry.LinearRing(polygon_points);
+	var polygon =  new OpenLayers.Geometry.Polygon([polygon_linearring]);
+	var polygon_feature = new OpenLayers.Feature.Vector(polygon);
+	
+	
+	// force map.projection to be null, so that input geometry can carry projection "EPSG:4326"
+	map.projection = null;
+	agsGeometryService.execute(
+		[polygon_feature, polyline3_feature],
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326",
+			'spatialRelationship': 		"INTERSECTION"
+		},
+		[
+			function(results) {				
+				t.ok(true, "...callback passed in at runtime is called correctly...");	
+			}
+		]
+	);
+	t.wait_result(5);
+}
+
+function test_Control_AgsGeometryService_execute_simplify(t){
+	setUp();
+	t.plan(6);	
+	var agsGeometryService = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		null,
+		[
+			function(olFeatures) {																		
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...simplify results are passed in callback correctly...");	
+				t.ok(olFeatures[0].geometry instanceof OpenLayers.Geometry.Polygon, "...simplify result is correct...");			
+				t.eq(this.layer.features.length, 1, "...this.addResults() adds simplify results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up simplify results from this.layer correctly...");											
+			},
+			function(olFeatures) {
+				t.ok(true, "...multiple callbacks are called correctly...");
+			}
+		],
+		{
+			multiple: true,
+			displayResults: true
+		}
+	);	
+	map.addControl(agsGeometryService);
+	agsGeometryService.activate();	
+	agsGeometryService.setGeometryServiceType("simplify");
+		
+	var polygon_points = [];
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4052282487793, 37.77032686779785));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.40067922229004, 37.76234461376953));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.4099489366455, 37.7565939576416));
+	polygon_points.push(new OpenLayers.Geometry.Point(-122.41458379382324, 37.76577784130859));
+	
+	var polygon_linearring = new OpenLayers.Geometry.LinearRing(polygon_points);
+	var polygon =  new OpenLayers.Geometry.Polygon([polygon_linearring]);
+	var polygon_feature = new OpenLayers.Feature.Vector(polygon);
+	
+	
+	// force map.projection to be null, so that input geometry can carry projection "EPSG:4326"
+	map.projection = null;
+	agsGeometryService.execute(
+		[polygon_feature],
+		{
+			'inSpatialReference':		"EPSG:4326",
+			'outSpatialReference':		"EPSG:4326"
+		},
+		[
+			function(olFeatures) {				
+				t.ok(true, "...callback passed in at runtime is called correctly...");	
+			}
+		]
+	);
+	t.wait_result(5);
+}
+
+
+
+
Index: tests/Control/AgsGeoprocessor.html
===================================================================
--- tests/Control/AgsGeoprocessor.html	(revision 0)
+++ tests/Control/AgsGeoprocessor.html	(revision 0)
@@ -0,0 +1,17 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>
+	    -->
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+    	
+    	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>	
+	    <script type="text/javascript" src="AgsGeoprocessor.js"></script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Control/AgsGeoprocessor.js
===================================================================
--- tests/Control/AgsGeoprocessor.js	(revision 0)
+++ tests/Control/AgsGeoprocessor.js	(revision 0)
@@ -0,0 +1,303 @@
+var map = null;
+var vectorLayer = null;
+
+function setUp() {
+	if(map) {
+		map.destroy();
+		map = null;
+		vectorLayer = null;
+	}
+
+    var lon = -122.838493;
+	var lat = 45.432976;
+    var zoom = 12;
+
+	var options = {		                
+		projection: "EPSG:4326",		        		        	
+   		maxResolution: 0.3515625,		        	        
+        maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
+	};									
+	map = new OpenLayers.Map('map', options);
+
+	vectorLayer = new OpenLayers.Layer.Vector(
+		"vectorLayer", 
+		{
+			isBaseLayer: true
+		}
+	);
+	map.addLayer(vectorLayer);
+	map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
+}
+
+function tearDown() {
+	map.destroy();
+	vectorLayer = null;
+	map = null;
+}
+
+function test_Control_AgsGeoprocessor_initialize(t) {
+	setUp();
+	t.plan(7);
+	
+	var agsGeoprocessor = new OpenLayers.Control.AgsGeoprocessor(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_Currents_World/GPServer/MessageInABottle",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsGeoprocessor);
+	agsGeoprocessor.activate();
+	
+	t.eq(typeof agsGeoprocessor.geoprocessingParamsEnocoder, "function", "...initialize default geoprocessingParamsEnocoder correctly...");
+	t.eq(typeof agsGeoprocessor.geoprocessingResultsParser, "function", "...initialize default geoprocessingResultsParser correctly...");	
+	t.ok(agsGeoprocessor.selectControl instanceof OpenLayers.Control.SelectFeature, "...initialize select control correctly...");
+	t.ok(agsGeoprocessor.drawControl instanceof OpenLayers.Control.DrawFeature, "...initialize draw control correctly...");
+	t.eq(agsGeoprocessor.mode, "select", "...initial mode is 'select'...");
+	
+	var agsGeoprocessor2 = new OpenLayers.Control.AgsGeometryService(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer",
+		vectorLayer,
+		[],
+		{}
+	);
+	map.addControl(agsGeoprocessor2);
+	t.ok(agsGeoprocessor2.layer instanceof OpenLayers.Layer.Vector, "...initialize task with an external vector layer passed in as parameter...");
+	t.eq(agsGeoprocessor2.layer.name, "vectorLayer", "...initialize task with an external vector layer passed in as parameter...");
+}
+
+function test_Control_AgsGeoprocessor_execute_asyn_1(t) {
+	setUp();
+	t.plan(4);
+	
+	var agsGeoprocessor = new OpenLayers.Control.AgsGeoprocessor(		
+		"http://orthogonal.esri.com/ArcGIS/rest/services/Portland/PortlandMap/GPServer/BufferModel",
+		null,		
+		[
+			function(evt) {								
+				t.ok(evt.results[0].geometry instanceof OpenLayers.Geometry.Polygon, "...asynchronous geoprocessing task completed successfully and callback function is called correctly...");
+			},
+			function(evt) {
+				t.ok(true, "...multiple callback functions are called correctly...");
+			},
+		],
+		{
+			mode: "draw",
+			asynchronous: true,
+			drawCtrlHandler: OpenLayers.Handler.Point,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {
+				'distance':5,
+				'units':"esriMiles"				
+			},
+		}
+	);
+	
+	agsGeoprocessor.geoprocessingParamsEnocoder = function(agsFeatureSet, tasksParameters) {     	       	
+		var geoprocessingParams = {};
+		
+		agsFeatureSet.geometryType = "esriGeometryPoint";
+		//agsFeatureSet.spatialReference = new esri.SpatialReference({wkid:"4326"});
+		
+		geoprocessingParams['InputPoints'] = agsFeatureSet;
+		geoprocessingParams['env:outSR'] = "4326";
+		
+		var linearUnits = new esri.tasks.LinearUnit();
+		linearUnits.distance = tasksParameters.distance;
+		linearUnits.units = tasksParameters.units;
+		geoprocessingParams['Distance'] = linearUnits;
+		t.ok(true, "...customized geoprocessingParamsEnocoder is called correctly...");
+		return geoprocessingParams;
+    };
+	
+	agsGeoprocessor.geoprocessingResultsParser = function(agsResults, options) {     	   
+		// result of this gp service is featureSet		
+		var processResultData = dojo.hitch(
+			this,
+			function(result) {
+        		var agsGraphics = result.value.features;
+				var olResults = this.adapter.parseAgsGraphics(agsGraphics); 
+				var evt = {};
+				evt.results = olResults;				
+        		this.events.triggerEvent("asynjobcomplete", evt);
+			}
+		);
+		t.ok(true, "...customized geoprocessingResultsParser is called correctly...");
+		// esri JSAPI call to get asynchronous gp job results
+		options.agsGeoprocessor.getResultData(
+			agsResults.jobId, 
+			"output", 
+			processResultData
+		);
+    };
+	
+	map.addControl(agsGeoprocessor);
+	agsGeoprocessor.activate();
+	
+	var olPoint = new OpenLayers.Geometry.Point(-122.838493, 45.432976);
+	var olFeature = new OpenLayers.Feature.Vector(olPoint);
+	agsGeoprocessor.execute(
+		[olFeature],
+		{},
+		[]
+	);			
+	t.wait_result(30);
+}
+
+function test_Control_AgsGeoprocessor_execute_asyn_2(t) {
+	setUp();
+	t.plan(3);
+	
+	var agsGeoprocessor = new OpenLayers.Control.AgsGeoprocessor(		
+		"http://sazabi/ArcGIS/rest/services/ogctools_sthelens/GPServer/wcs2Hillshade",
+		null,		
+		[
+			function(evt) {								
+				t.ok(evt.results[0] instanceof OpenLayers.Layer.Image, "...asynchronous geoprocessing task completed successfully and callback function is called correctly...");
+			},
+			function(evt) {
+				t.ok(true, "...multiple callback functions are called correctly...");
+			}
+		],
+		{
+			mode: "draw",
+			asynchronous: true,
+			drawCtrlHandler: OpenLayers.Handler.Point,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			taskParameters: {
+				'Service_Url':"http://sazabi/arcgis/services/sthelens/GeoDataServer/WCSServer?",
+				'Coverage_Name':"2",
+				'Service_Version':"1.0.0",
+				'output_raster_name':"rasteroutput4wcshillshade",
+				'coverage_extent':""
+			},
+		}
+	);
+		
+	agsGeoprocessor.geoprocessingResultsParser = function(agsResults, options) {     	       	
+		var processResultImg = dojo.hitch(
+			this,
+			function(mapImage) {
+				var resultImage = new OpenLayers.Layer.Image(   
+					"__gpImgResults__", 
+					mapImage.value.href, 
+					this.map.getExtent(),
+	        		this.map.getSize(),
+					{														
+						displayInLayerSwitcher: false,
+						isBaseLayer: false,
+						numZoomLevels: 3																			
+					}
+				); 	
+				var evt = {};
+        		evt.results = [resultImage];
+        		this.events.triggerEvent("asynjobcomplete", evt);
+			}
+		);
+
+		var imageParameters = new esri.layers.ImageParameters();
+		imageParameters.bbox = this.adapter.encodeAgsGeometry.extent.apply(this.adapter, [this.map.getExtent(), "EPSG:4326"]);
+		imageParameters.width = (this.map.getSize()).w;
+		imageParameters.height = (this.map.getSize()).h;
+		imageParameters.format = "png";
+		imageParameters.transparent = true;
+		t.ok(true, "...customized geoprocessingResultsParser is called correctly...");
+		options.agsGeoprocessor.getResultImage(
+			agsResults.jobId, 
+			"hillshade4wcs", 
+			imageParameters, 
+			processResultImg
+		);
+    };
+	
+	map.addControl(agsGeoprocessor);
+	agsGeoprocessor.activate();
+	
+	//var olPoint = new OpenLayers.Geometry.Point(-122.838493, 45.432976);
+	//var olFeature = new OpenLayers.Feature.Vector(olPoint);
+	agsGeoprocessor.execute(
+		[],
+		{},
+		[]
+	);			
+	t.wait_result(45);
+}
+
+function test_Control_AgsGeoprocessor_execute_syn_1(t) {
+	setUp();
+	t.plan(5);
+	
+	var agsGeoprocessor = new OpenLayers.Control.AgsGeoprocessor(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Network/ESRI_DriveTime_US/GPServer/CreateDriveTimePolygons",
+		null,		
+		[
+			function(olResults) {
+				var isPass = false;
+				if(olResults[0].geometry instanceof OpenLayers.Geometry.Polygon && olResults[1].geometry instanceof OpenLayers.Geometry.Polygon && olResults[2].geometry instanceof OpenLayers.Geometry.Polygon) {
+					isPass = true;
+				}
+				t.ok(isPass, "...synchronous geoprocessing task completed successfully and callback function is called correctly...");				
+			},
+			function(olResults) {
+				t.ok(true, "...multiple callback functions are called correctly...");
+			},
+		],
+		{
+			mode: "draw",
+			drawCtrlHandler: OpenLayers.Handler.Point,
+			drawCtrlHandlerOptions: {
+				handlerOptions: {
+					keyMask: OpenLayers.Handler.MOD_CTRL
+				}
+			},
+			//taskParameters: {'Drive_Times':"1 2 4"},
+		}
+	);
+	
+	agsGeoprocessor.geoprocessingParamsEnocoder = function(agsFeatureSet, tasksParameters){	
+		//OpenLayers.Console.log("...customized...encode geoprocessing parameters...");
+		var params = {
+			"Input_Location": agsFeatureSet,
+			"Drive_Times": tasksParameters['Drive_Times']
+		};
+		t.ok(true, "...customized geoprocessingParamsEnocoder is called correctly...");
+		return params;
+	};
+		
+	agsGeoprocessor.geoprocessingResultsParser = function(agsResults) {     	   
+    	//OpenLayers.Console.log("...customized...parse geoprocessing results...");
+		var agsGraphics = agsResults[0].value.features;
+		var olResults = this.adapter.parseAgsGraphics(agsGraphics); 
+		t.ok(true, "...customized geoprocessingResultsParser is called correctly...");   	
+    	return olResults;
+    },
+	
+	map.addControl(agsGeoprocessor);
+	agsGeoprocessor.activate();
+	
+	var olPoint = new OpenLayers.Geometry.Point(-122.838493, 45.432976);
+	var olFeature = new OpenLayers.Feature.Vector(olPoint);
+	agsGeoprocessor.execute(
+		[olFeature],
+		{
+			'Drive_Times':"1 2 4"
+		},
+		[
+			function(olResults) {
+				t.ok(true, "...callback function passed in at runtime is called correctly...");
+			},
+		]
+	);
+			
+	t.wait_result(30);
+}
+
+
+
Index: tests/Control/AgsIdentifyTask.html
===================================================================
--- tests/Control/AgsIdentifyTask.html	(revision 0)
+++ tests/Control/AgsIdentifyTask.html	(revision 0)
@@ -0,0 +1,17 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>
+	    -->
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+    	
+    	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+	    <script type="text/javascript" src="AgsIdentifyTask.js"></script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Control/AgsIdentifyTask.js
===================================================================
--- tests/Control/AgsIdentifyTask.js	(revision 0)
+++ tests/Control/AgsIdentifyTask.js	(revision 0)
@@ -0,0 +1,191 @@
+var map = null;
+var vectorLayer = null;
+
+function setUp() {
+	if(map) {
+		map.destroy();
+		map = null;
+		vectorLayer = null;
+	}	
+	var lon = -122.391667;
+	var lat = 37.760628;
+	var zoom = 7;
+								
+	var center_mercator = OpenLayers.Layer.SphericalMercator.forwardMercator(lon, lat);
+	center_mercator_x = center_mercator.lon;
+	center_mercator_y = center_mercator.lat;
+		
+	var options = {
+		projection: "EPSG:900913",
+		units: "m",
+		maxResolution: 156543.0339,
+		maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34),
+		tileSize: new OpenLayers.Size(512,512)
+	};								
+	map = new OpenLayers.Map('map', options);
+	
+	vectorLayer = new OpenLayers.Layer.Vector(
+		"vectorLayer", 
+		{			
+			isBaseLayer: true
+		}
+	);
+	map.addLayer(vectorLayer);
+	map.setCenter(new OpenLayers.LonLat(center_mercator_x, center_mercator_y), zoom);
+}
+
+function tearDown() {
+	map.destroy();
+	vectorLayer = null;
+	map = null;
+}
+
+function test_Control_AgsIdentifyTask_initialize(t) {
+	setUp();
+	t.plan(18);
+	
+	var agsIdentifyTask = new OpenLayers.Control.AgsIdentifyTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsIdentifyTask);
+	agsIdentifyTask.activate();
+	
+	t.eq(typeof agsIdentifyTask._resultsParser['parser'], "function", "...initialize _resultsParser['parser'] correctly...");
+	t.ok(agsIdentifyTask._resultsParser['context'] instanceof OpenLayers.Format.AgsJsAdapter, "...initialize _resultsParser['context'] correctly...");	
+	t.ok(agsIdentifyTask.selectControl instanceof OpenLayers.Control.SelectFeature, "...initialize select control correctly...");
+	t.ok(agsIdentifyTask.drawControl instanceof OpenLayers.Control.DrawFeature, "...initialize draw control correctly...");
+	t.eq(agsIdentifyTask.mode, "select", "...initial mode is 'select'...");
+	
+	t.ok(agsIdentifyTask.layer instanceof OpenLayers.Layer.Vector, "...initialize an internal vector layer if not passed in as parameter...");
+		 
+	t.eq(agsIdentifyTask.taskParameters['dpi'], 96, "...default 'dpi' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['geometry'], null, "...default 'geometry' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['height'], 0, "...default 'height' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['layerIds'], [0], "...default 'layerIds' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['layerOption'], "all", "...default 'layerOption' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['mapExtent'], null, "...default 'mapExtent' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['returnGeometry'], true, "...default 'returnGeometry' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['spatialReference'], null, "...default 'spatialReference' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['tolerance'], 1, "...default 'tolerance' value is correct...");
+	t.eq(agsIdentifyTask.taskParameters['width'], 0, "...default 'width' value is correct...");
+	
+	var agsIdentifyTask2 = new OpenLayers.Control.AgsIdentifyTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		vectorLayer,
+		[],
+		{}
+	);
+	map.addControl(agsIdentifyTask2);
+	t.ok(agsIdentifyTask2.layer instanceof OpenLayers.Layer.Vector, "...initialize task with an external vector layer passed in as parameter...");
+	t.eq(agsIdentifyTask2.layer.name, "vectorLayer", "...initialize task with an external vector layer passed in as parameter...");	
+}
+
+function test_Control_AgsIdentifyTask_execute_1(t) {
+	setUp();
+	t.plan(5);
+	
+	var agsIdentifyTask = new OpenLayers.Control.AgsIdentifyTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[
+			function(olFeatures) {						
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...identify results are passed in callback correctly...");			
+				t.eq(this.layer.features.length, 1, "...this.addResults() adds identify results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up identify results from this.layer correctly...");
+			},
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...multiple callbacks are called correctly...");
+			}
+		],
+		{}
+	);	
+	map.addControl(agsIdentifyTask);
+	agsIdentifyTask.activate();
+	
+	// hard code identifyParameter will only find one polygon feature which state "California"
+	var sr = {};
+	sr['wkid'] = "102113";
+	var agsSr = new esri.SpatialReference(sr);
+	var identifyParameters = {					
+		'layerIds': [2],			
+		'mapExtent': new OpenLayers.Bounds(-13781121.079783348, 4467394.029879987, -13468035.011983348, 4623937.063779987)							
+	};	
+	// this point is where San Francisco is
+	var olGeometry = new OpenLayers.Geometry.Point(-13624578.045883348, 4545665.546829987);	
+	var olFeature = new OpenLayers.Feature.Vector(olGeometry);
+	agsIdentifyTask.execute(
+		[olFeature],
+		identifyParameters,		
+		[			
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...callback passed in at runtime is called correctly...");
+			}
+		]
+	);	
+	t.wait_result(5);
+}
+
+function test_Control_AgsIdentifyTask_execute_2(t) {	
+	t.plan(5);	
+	var options = 	{		                
+		                projection: "EPSG:900913",
+				        units: "m",
+				        maxResolution: 156543.0339,
+				        maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34)									
+					};	
+	
+	var map1 = new OpenLayers.Map('map', options);
+	var vectorLayer1 = new OpenLayers.Layer.Vector("vectorLayer");
+	map1.addLayer(vectorLayer1);
+	
+	var agsIdentifyTask = new OpenLayers.Control.AgsIdentifyTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		vectorLayer1,
+		[
+			function(olFeatures) {						
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...identify results are passed in callback correctly...");			
+				t.eq(this.layer.features.length, 1, "...this.addResults() adds identify results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up identify results from this.layer correctly...");
+			},
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...multiple callbacks are called correctly...");
+			}
+		],
+		{}
+	);	
+	map1.addControl(agsIdentifyTask);
+	agsIdentifyTask.activate();
+	
+	// hard code identifyParameter will only find one polygon feature which state "California"
+	var sr = {};
+	sr['wkid'] = "102113";
+	var agsSr = new esri.SpatialReference(sr);
+	var identifyParameters = {					
+		'layerIds': [2],			
+		'mapExtent': new OpenLayers.Bounds(-13781121.079783348, 4467394.029879987, -13468035.011983348, 4623937.063779987)							
+	};	
+	// this point is where San Francisco is
+	var olGeometry = new OpenLayers.Geometry.Point(-13624578.045883348, 4545665.546829987);	
+	var olFeature = new OpenLayers.Feature.Vector(olGeometry);
+	agsIdentifyTask.execute(
+		[olFeature],
+		identifyParameters,		
+		[			
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...callback passed in at runtime is called correctly...");
+			}
+		]
+	);	
+	t.wait_result(5);
+}
+
+
+
+
+
+
Index: tests/Control/AgsLocator.html
===================================================================
--- tests/Control/AgsLocator.html	(revision 0)
+++ tests/Control/AgsLocator.html	(revision 0)
@@ -0,0 +1,17 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>
+	    -->
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+    	
+    	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+	    <script type="text/javascript" src="AgsLocator.js"></script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Control/AgsLocator.js
===================================================================
--- tests/Control/AgsLocator.js	(revision 0)
+++ tests/Control/AgsLocator.js	(revision 0)
@@ -0,0 +1,224 @@
+var map = null;
+var vectorLayer = null;
+
+function setUp() {
+	if(map) {
+		map.destroy();
+		map = null;
+		vectorLayer = null;
+	}
+	var lon = -122.391667;
+	var lat = 37.760628;
+							
+	var center_mercator = OpenLayers.Layer.SphericalMercator.forwardMercator(lon, lat);
+	center_mercator_x = center_mercator.lon;
+	center_mercator_y = center_mercator.lat;
+	
+	var zoom = 7;
+	
+	var options = 	{		                
+		                projection: "EPSG:900913",
+				        units: "m",
+				        maxResolution: 156543.0339,
+				        maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34),
+						tileSize: new OpenLayers.Size(512,512)
+					};	
+								
+	map = new OpenLayers.Map('map', options);
+	
+	vectorLayer = new OpenLayers.Layer.Vector(
+		"vectorLayer", 
+		{
+			isBaseLayer: true
+		}
+	);
+	map.addLayer(vectorLayer);
+	map.setCenter(new OpenLayers.LonLat(center_mercator_x, center_mercator_y), zoom);
+}
+
+function tearDown() {
+	map.destroy();
+	vectorLayer = null;
+	map = null;
+}
+
+function test_Control_AgsLocator_initialize(t) {
+	setUp();
+	t.plan(12);
+	
+	var agsLocator = new OpenLayers.Control.AgsLocator(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsLocator);
+	agsLocator.activate();
+	
+	t.eq(typeof agsLocator._resultsParser['parser'], "function", "...initialize _resultsParser['parser'] correctly...");
+	t.ok(agsLocator._resultsParser['context'] instanceof OpenLayers.Format.AgsJsAdapter, "...initialize _resultsParser['context'] correctly...");	
+	t.ok(agsLocator.selectControl instanceof OpenLayers.Control.SelectFeature, "...initialize select control correctly...");
+	t.ok(agsLocator.drawControl instanceof OpenLayers.Control.DrawFeature, "...initialize draw control correctly...");
+	t.eq(agsLocator.mode, "select", "...initial mode is 'select'...");
+	
+	this.taskParameters = {
+			'address': 		{},
+			'distance':		50, // in 'meters'
+			'outFields':	[],	
+			'location':		null			
+		};	
+	
+	t.eq(agsLocator.taskParameters['address'], {}, "...default 'address' value is correct...");
+	t.eq(agsLocator.taskParameters['distance'], 50, "...default 'distance' value is correct...");
+	t.eq(agsLocator.taskParameters['outFields'], [], "...default 'outFields' value is correct...");
+	t.eq(agsLocator.taskParameters['location'], null, "...default 'location' value is correct...");
+	
+	t.ok(agsLocator.layer instanceof OpenLayers.Layer.Vector, "...initialize an internal vector layer if not passed in as parameter...");
+	
+	var agsLocator2 = new OpenLayers.Control.AgsLocator(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer",
+		vectorLayer,
+		[],
+		{}
+	);
+	map.addControl(agsLocator2);
+	t.ok(agsLocator2.layer instanceof OpenLayers.Layer.Vector, "...initialize task with an external vector layer passed in as parameter...");
+	t.eq(agsLocator2.layer.name, "vectorLayer", "...initialize task with an external vector layer passed in as parameter...");
+}
+
+function test_Control_AgsLocator_execute_addressToLocations(t) {
+	setUp();
+	t.plan(5);
+	
+	var agsLocator = new OpenLayers.Control.AgsLocator(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer",
+		null,
+		[
+			function(olFeatures) {					
+				t.eq(olFeatures.length, 10, "...callbacks are called with correct number of features...");
+				t.eq(this.layer.features.length, 10, "...this.addResults() adds locator results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up locator results from this.layer correctly...");
+			},
+			function(olFeatures) {
+				t.eq(olFeatures.length, 10, "...multiple callbacks are called correctly...");
+			},
+		],
+		{
+			errback: function(error) {
+				t.ok(true, "...error callback is being called correctly...");
+			}
+		}
+	);	
+	map.addControl(agsLocator);
+	
+	var address = {};
+	address['address'] = "380 New York Str";
+	address['city'] = "Redlands";
+	address['state'] = "CA";
+	address['zip'] = "92373";
+	
+	var parameters = {};
+	parameters['address'] = address;
+	parameters['outFields'] = ["StreetName", "City", "State", "ZIP"];
+		
+	agsLocator.execute(
+		null,
+		parameters,
+		[
+			function(olFeatures) {
+				t.eq(olFeatures.length, 10, "...callback passed in at runtime is called correctly...");
+			}
+		]
+	);	
+	t.wait_result(5);
+}
+
+function test_Control_AgsLocator_execute_locationToAddress(t) {
+	//setUp();
+	t.plan(10);
+	
+	var options = {projection: "EPSG:4326"};	
+	var map1 = new OpenLayers.Map('map', options);
+	var vectorLayer1 = new OpenLayers.Layer.Vector("vectorLayer");
+	map1.addLayer(vectorLayer1);
+	
+	var agsLocator = new OpenLayers.Control.AgsLocator(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer",
+		null,
+		[
+			function(olFeatures) {					
+				if(olFeatures[0].attributes['addr_Address'] === "381 NEW YORK ST" && 
+					olFeatures[0].attributes['addr_City'] === "REDLANDS" &&
+					olFeatures[0].attributes['addr_State'] === "CA" &&
+					olFeatures[0].attributes['addr_Zip'] === "92373") {
+					t.ok(true, "...callback is called with correct address...");
+				}
+				t.eq(this.layer.features.length, 1, "...this.addResults() adds address results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up address results from this.layer correctly...");				
+			},
+			function(olFeatures) {
+				if(olFeatures[0].attributes['addr_Address'] === "381 NEW YORK ST" && 
+					olFeatures[0].attributes['addr_City'] === "REDLANDS" &&
+					olFeatures[0].attributes['addr_State'] === "CA" &&
+					olFeatures[0].attributes['addr_Zip'] === "92373") {
+					t.ok(true, "..multiple callbacks are called correctly...");
+				}				
+			},
+		],
+		{
+			reverseGeocoding: true,
+			errback: function(error) {
+				//t.ok(true, "...error callback is being called correctly...");
+			}
+		}
+	);	
+	map1.addControl(agsLocator);
+	//agsLocator.activate();
+	//agsLocator.setReverseGeocoding(true);
+	
+	var parameters = {};
+	
+	parameters['location'] = new OpenLayers.Geometry.Point(-117.195681386, 34.0575170970001);
+	parameters['distance'] = 50;
+		
+	agsLocator.execute(
+		[],
+		parameters,
+		[
+			function(olFeatures) {
+				if(olFeatures[0].attributes['addr_Address'] === "381 NEW YORK ST" && 
+					olFeatures[0].attributes['addr_City'] === "REDLANDS" &&
+					olFeatures[0].attributes['addr_State'] === "CA" &&
+					olFeatures[0].attributes['addr_Zip'] === "92373") {
+					t.ok(true, "...callback passed in at runtime is called correctly...");
+				}
+			},
+		]
+	);
+	
+	t.wait_result(5);
+	
+	var olFeature = new OpenLayers.Feature.Vector(parameters['location']);
+	agsLocator.execute(
+		[olFeature],
+		parameters,
+		[
+			function(olFeatures) {					
+				if(olFeatures[0].attributes['addr_Address'] === "381 NEW YORK ST" && 
+					olFeatures[0].attributes['addr_City'] === "REDLANDS" &&
+					olFeatures[0].attributes['addr_State'] === "CA" &&
+					olFeatures[0].attributes['addr_Zip'] === "92373") {
+					t.ok(true, "...callback passed in at runtime is called correctly...");
+				}		
+			}	
+		]		
+	);	
+	t.wait_result(5);
+}
+
+
+
+
+
Index: tests/Control/AgsQueryTask.html
===================================================================
--- tests/Control/AgsQueryTask.html	(revision 0)
+++ tests/Control/AgsQueryTask.html	(revision 0)
@@ -0,0 +1,17 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>
+	    -->
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+    	
+    	<script type="text/javascript" src="../../lib/OpenLayers.js"></script>
+	    <script type="text/javascript" src="AgsQueryTask.js"></script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Control/AgsQueryTask.js
===================================================================
--- tests/Control/AgsQueryTask.js	(revision 0)
+++ tests/Control/AgsQueryTask.js	(revision 0)
@@ -0,0 +1,132 @@
+var map = null;
+var vectorLayer = null;
+
+function setUp() {
+	if(map) {
+		map.destroy();
+		map = null;
+		vectorLayer = null;
+	}	
+	var lon = -122.391667;
+	var lat = 37.760628;						
+	var zoom = 7;
+	
+	var center_mercator = OpenLayers.Layer.SphericalMercator.forwardMercator(lon, lat);
+	center_mercator_x = center_mercator.lon;
+	center_mercator_y = center_mercator.lat;
+
+	var options = {		                
+		projection: "EPSG:900913",
+		units: "m",
+		maxResolution: 156543.0339,
+		maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34),
+		tileSize: new OpenLayers.Size(512,512)
+	};									
+	map = new OpenLayers.Map('map', options);
+
+	vectorLayer = new OpenLayers.Layer.Vector(
+		"vectorLayer", 
+		{
+			isBaseLayer: true
+		}
+	);
+	map.addLayer(vectorLayer);
+	map.setCenter(new OpenLayers.LonLat(center_mercator_x, center_mercator_y), zoom);
+}
+
+function tearDown() {
+	map.destroy();
+	vectorLayer = null;
+	map = null;
+}
+
+function test_Control_AgsQueryTask_initialize(t){
+	setUp();
+	t.plan(15);
+	
+	var agsQueryTask = new OpenLayers.Control.AgsQueryTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		null,
+		[],
+		{}
+	);
+	map.addControl(agsQueryTask);
+	agsQueryTask.activate();
+	
+	t.eq(typeof agsQueryTask._resultsParser['parser'], "function", "...initialize _resultsParser['parser'] correctly...");
+	t.ok(agsQueryTask._resultsParser['context'] instanceof OpenLayers.Format.AgsJsAdapter, "...initialize _resultsParser['context'] correctly...");	
+	t.ok(agsQueryTask.selectControl instanceof OpenLayers.Control.SelectFeature, "...initialize select control correctly...");
+	t.ok(agsQueryTask.drawControl instanceof OpenLayers.Control.DrawFeature, "...initialize draw control correctly...");
+	t.eq(agsQueryTask.mode, "select", "...initial mode is 'select'...");
+	
+	t.ok(agsQueryTask.layer instanceof OpenLayers.Layer.Vector, "...initialize an internal vector layer if not passed in as parameter...");
+		
+	t.eq(agsQueryTask.taskParameters['geometry'], null, "...default 'geometry' value is correct...");
+	t.eq(agsQueryTask.taskParameters['outFields'], [0], "...default 'height' value is correct...");
+	t.eq(agsQueryTask.taskParameters['returnGeometry'], true, "...default 'returnGeometry' value is correct...");
+	t.eq(agsQueryTask.taskParameters['outSpatialReference'], null, "...default 'outSpatialReference' value is correct...");
+	t.eq(agsQueryTask.taskParameters['spatialRelationship'], null, "...default 'spatialRelationship' value is correct...");
+	t.eq(agsQueryTask.taskParameters['text'], "", "...default 'text' value is correct...");
+	t.eq(agsQueryTask.taskParameters['where'], "", "...default 'where' value is correct...");
+	
+	var agsQueryTask2 = new OpenLayers.Control.AgsQueryTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer",
+		vectorLayer,
+		[],
+		{}
+	);
+	map.addControl(agsQueryTask2);
+	t.ok(agsQueryTask2.layer instanceof OpenLayers.Layer.Vector, "...initialize task with an external vector layer passed in as parameter...");
+	t.eq(agsQueryTask2.layer.name, "vectorLayer", "...initialize task with an external vector layer passed in as parameter...");	
+}
+
+function test_Control_AgsQueryTask_execute_1(t) {
+	setUp();
+	t.plan(5);
+			
+	var agsQueryTask = new OpenLayers.Control.AgsQueryTask(
+		"http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/2",
+		null,
+		[
+			function(olFeatures) {						
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...query results are passed in callback correctly...");			
+				t.eq(this.layer.features.length, 1, "...this.addResults() adds query results to this.layer correctly...");				
+				this.cleanupResults();
+				t.eq(this.layer.features.length, 0, "...this.cleanupResults() cleans up query results from this.layer correctly...");
+			},
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...multiple callbacks are called correctly...");
+			}
+		],
+		{}
+	);	
+	map.addControl(agsQueryTask);
+	agsQueryTask.activate();
+	
+	// this point is where San Francisco is
+	var olGeometry = new OpenLayers.Geometry.Point(-13624578.045883348, 4545665.546829987);	
+	var olFeature = new OpenLayers.Feature.Vector(olGeometry);
+	var query = {					
+		'outFields': ["STATE_NAME"],
+		'returnGeometry': true,
+		'outSpatialReference': "EPSG:900913",
+		'spatialRelationship': "WITHIN"								
+	};
+	agsQueryTask.setTaskParameters(query);
+		
+	agsQueryTask.execute(
+		[olFeature],
+		query,
+		[
+			function(olFeatures) {
+				t.ok(olFeatures[0] instanceof OpenLayers.Feature.Vector, "...callback passed in at runtime is called correctly...");
+			}
+		]
+	);	
+	t.wait_result(5);
+}
+
+
+
+
+
Index: tests/Format/AgsJsAdapter.html
===================================================================
--- tests/Format/AgsJsAdapter.html	(revision 0)
+++ tests/Format/AgsJsAdapter.html	(revision 0)
@@ -0,0 +1,24 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml">
+	<head>
+	    <!--  
+	    <link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.0/js/dojo/dijit/themes/tundra/tundra.css">
+	    <script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1"></script>    
+		<link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.1/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.1"></script>
+	    -->
+		<link rel="stylesheet" type="text/css" href="http://serverapi.arcgisonline.com/jsapi/arcgis/1.3/js/dojo/dijit/themes/tundra/tundra.css">
+    	<script type="text/javascript" src="http://serverapi.arcgisonline.com/jsapi/arcgis/?v=1.3"></script>
+		
+	    <script type="text/javascript" src="../../lib/OpenLayers.js"></script>	    
+	    <script type="text/javascript" src="AgsJsAdapter.js"></script>
+	    <script type="text/javascript">
+	    	dojo.require("dojo.parser");	    
+      		dojo.require("esri.tasks.query");
+      		dojo.require("esri.tasks.identify");      		
+	    </script>
+	</head>
+	<body>
+	    <div id="map" style="width:400px;height:250px;"/>
+	</body>
+</html>
Index: tests/Format/AgsJsAdapter.js
===================================================================
--- tests/Format/AgsJsAdapter.js	(revision 0)
+++ tests/Format/AgsJsAdapter.js	(revision 0)
@@ -0,0 +1,1853 @@
+var adapter = null;
+var _error = -99;
+
+function setUp() {
+	adapter = new OpenLayers.Format.AgsJsAdapter();
+}
+
+function tearDown() {
+	adapter = null;
+}
+
+function test_Format_AgsJsAdapter_constructor(t) {
+	setUp();
+	t.plan(2);
+	t.ok(adapter instanceof OpenLayers.Format.AgsJsAdapter, "...adapter is an instance of OpenLayers.Format.AgsJsAdapter...");
+	t.eq(adapter.config['defaultEncodeWkid'], "EPSG:900913", "...config option 'defaultEncodeWkid' is set to 'EPSG:900913'...");
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsGeometry_point(t) {
+	setUp()
+	t.plan(7);
+	var agsSpatialReference = {};
+    agsSpatialReference['wkid'] = "4326";		
+	var agsPoint = new esri.geometry.Point(34.49, 49.34, new esri.SpatialReference(agsSpatialReference));
+	
+	// parses agsPoint to olPoint
+	var olPoint = adapter.parseAgsGeometry['point'].apply(adapter, [agsPoint]);
+	t.ok(olPoint instanceof OpenLayers.Geometry.Point, "...olPoint is instance of OpenLayers.Geometry.Point...");
+	t.eq(olPoint.x, 34.49, "...olPoint.x equals to agsPoint.x...");
+	t.eq(olPoint.y, 49.34, "...olPoint.y equals to agsPoint.y...");
+	
+	// throws exception when input agsPoint.x is null
+	agsPoint.x = null;
+	try {
+		olPoint = adapter.parseAgsGeometry['point'].apply(adapter, [agsPoint]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input agsPoint.x is null...");
+	}
+	
+	// throws exception when input agsPoint.y is null
+	agsPoint.x = 34.49;
+	agsPoint.y = null;
+	try {
+		olPoint = adapter.parseAgsGeometry['point'].apply(adapter, [agsPoint]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input agsPoint.y is null...");
+	}
+	
+	// throws exception when input agsPoint.x is not number
+	agsPoint.x = "34.49";
+	agsPoint.y = 49.34;
+	try {
+		olPoint = adapter.parseAgsGeometry['point'].apply(adapter, [agsPoint]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input agsPoint.x is not number...");
+	}
+	
+	// throws exception when input agsPoint.y is not number
+	agsPoint.x = 34.49;
+	agsPoint.y = "49.34";
+	try {
+		olPoint = adapter.parseAgsGeometry['point'].apply(adapter, [agsPoint]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input agsPoint.y is not number...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsGeometry_coordinate(t) {
+	setUp();	
+	t.plan(7);
+	
+	var agsCoordinate = [34.49, 49.34];
+	var olPoint = adapter.parseAgsGeometry['coordinate'].apply(adapter, [agsCoordinate]);
+	
+	// parses agsCoordinate to olPoint
+	t.ok(olPoint instanceof OpenLayers.Geometry.Point, "...olPoint is instance of OpenLayers.Geometry.Point...");
+	t.eq(olPoint.x, 34.49, "...olPoint.x equals to x of [x, y]...");
+	t.eq(olPoint.y, 49.34, "...olPoint.y equals to y of [x, y]...");
+	
+	// throws exception when x of [x, y] is null
+	var agsCoordinate = [null, 49.34];
+	try {
+		olPoint = adapter.parseAgsGeometry['coordinate'].apply(adapter, [agsCoordinate]);
+	} catch(e) {
+		t.ok(true, "...throws exception when x of [x, y] is null...");
+	}
+	
+	// throws exception when y of [x, y] is null
+	var agsCoordinate = [34.49, null];
+	try {
+		olPoint = adapter.parseAgsGeometry['coordinate'].apply(adapter, [agsCoordinate]);
+	} catch(e) {
+		t.ok(true, "...throws exception when y of [x, y] is null...");
+	}
+	
+	// throws exception when x of [x, y] is not number
+	var agsCoordinate = [34.49, "49.34"];
+	try {
+		olPoint = adapter.parseAgsGeometry['coordinate'].apply(adapter, [agsCoordinate]);
+	} catch(e) {
+		t.ok(true, "...throws exception when x of [x, y] is not number...");
+	}
+	
+	// throws exception when y of [x, y] is not number
+	var agsCoordinate = ["34.49", 49.34];
+	try {
+		olPoint = adapter.parseAgsGeometry['coordinate'].apply(adapter, [agsCoordinate]);
+	} catch(e) {
+		t.ok(true, "...throws exception when y of [x, y] is not number...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsGeometry_path(t) {
+	setUp();	
+	t.plan(6);
+	
+	var agsPointArray = [];
+	agsPointArray.push([0,0]);
+	agsPointArray.push([1,1]);
+	agsPointArray.push([2,2]);
+	agsPointArray.push([3,3]);
+	
+	var olLineString = adapter.parseAgsGeometry['path'].apply(adapter, [agsPointArray]);
+	
+	t.ok(olLineString instanceof OpenLayers.Geometry.LineString, "...olLineString is instance of OpenLayers.Geometry.LineString...");
+	t.eq(olLineString.components.length, agsPointArray.length, "...olLineString has correct number of OpenLayers.Geometry.Point...");
+	
+	var isPass = 0;
+	for(var i=0; i<olLineString.components.length; i++) {
+		var agsCoordinate = agsPointArray[i];
+		var olPoint = olLineString.components[i];
+		if(olPoint.x === agsCoordinate[0] && olPoint.y === agsCoordinate[1]){
+			isPass++;
+		} else {
+			isPass = _error;
+		}
+	}
+	t.eq(agsPointArray.length, olLineString.components.length, "...parses every [x,y] in the path to a point in OpenLayers.Geometry.LineString...");
+	t.eq(isPass, olLineString.components.length, "...parses every [x,y] in the path to a point in OpenLayers.Geometry.LineString...");
+	
+	agsPointArray[3] = [34.49, "49.34"];
+	try {
+		olLineString = adapter.parseAgsGeometry['path'].apply(adapter, [agsPointArray]);
+	} catch(e) {
+		t.ok(true, "...throws exception if any element in input array is not [x, y]...");
+	}
+	
+	agsPointArray = {};
+	try {
+		olLineString = adapter.parseAgsGeometry['path'].apply(adapter, [agsPointArray]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is not an array...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsGeometry_ring(t) {
+	setUp();	
+	t.plan(7);
+	
+	var agsPointArray = [];
+	agsPointArray.push([0,0]);
+	agsPointArray.push([0,1]);
+	agsPointArray.push([1,1]);
+	agsPointArray.push([1,0]);
+	agsPointArray.push([0,0]);
+	
+	var olLinearRing = adapter.parseAgsGeometry['ring'].apply(adapter, [agsPointArray]);
+	
+	t.ok(olLinearRing instanceof OpenLayers.Geometry.LinearRing, "...olLinearRing is instance of OpenLayers.Geometry.LinearRing...");
+	t.eq(olLinearRing.components.length, agsPointArray.length, "...olLinearRing has correct number of OpenLayers.Geometry.Point...");
+	
+	var isPass = 0;
+	for(var i=0; i<olLinearRing.components.length; i++) {
+		var agsCoordinate = agsPointArray[i];
+		var olPoint = olLinearRing.components[i];
+		if(olPoint.x === agsCoordinate[0] && olPoint.y === agsCoordinate[1]){
+			isPass++;			
+		} else {
+			isPass = _error;
+			break;
+		}
+	}
+	t.eq(agsPointArray.length, olLinearRing.components.length, "...parses every [x,y] to a point in OpenLayers.Geometry.LinearRing...");
+	t.eq(isPass, olLinearRing.components.length, "...parses every [x,y] to a point in OpenLayers.Geometry.LinearRing...");
+	
+	agsPointArray[4] = [1, "0"];
+	try {
+		olLineString = adapter.parseAgsGeometry['ring'].apply(adapter, [agsPointArray]);
+	} catch(e) {
+		t.ok(true, "...throws exception if any element in input array is not [x, y]...");
+	}
+	
+	agsPointArray = {};
+	try {
+		olLineString = adapter.parseAgsGeometry['ring'].apply(adapter, [agsPointArray]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is not an array...");
+	}
+	
+	var agsPointArray2 = [];
+	agsPointArray2.push([0,0]);
+	agsPointArray2.push([0,1]);
+	agsPointArray2.push([1,1]);
+	agsPointArray2.push([1,0]);
+	agsPointArray2.push([0,3]);
+	
+	try {
+		olLineString = adapter.parseAgsGeometry['ring'].apply(adapter, [agsPointArray2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is not a closed ring...");
+	}
+	
+	tearDown();	
+}
+
+function test_Format_AgsJsAdapter_parseAgsGeometry_polyline(t) {
+	setUp();
+	t.plan(4);
+	
+	var findTask = new esri.tasks.FindTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/");
+    findParams = new esri.tasks.FindParameters();
+    findParams.layerIds = [1];
+    findParams.searchFields = ["NAME"];
+    findParams.returnGeometry = true;
+    
+    findParams.searchText = "Rio Grande";
+    findTask.execute(
+    	findParams, 
+    	function(findResults) {
+    		var adapter = new OpenLayers.Format.AgsJsAdapter({});
+    		var agsPolyline = findResults[0].feature.geometry;
+    		var olMultiLineString = adapter.parseAgsGeometry['polyline'].apply(adapter, [agsPolyline]);
+    		
+    		t.ok(olMultiLineString instanceof OpenLayers.Geometry.MultiLineString, "...olMultiLineString is instance of OpenLayers.Geometry.MultiLineString...");
+    		
+    		var isPass = 0;
+    		var length = agsPolyline.paths[0].length;
+    		for(var i=0; i<length; i++) {
+    			var x1 = olMultiLineString.components[0].components[i].x;
+    			var y1 = olMultiLineString.components[0].components[i].y;
+    			var x2 = agsPolyline.paths[0][i][0];
+    			var y2 = agsPolyline.paths[0][i][1];
+    			if(x1 === x2 && y1 === y2) {
+    				isPass++;    				
+    			} else {
+    				isPass = _error;
+    				break;
+    			}    			
+    		}	
+    		t.eq(olMultiLineString.components[0].components.length, length, "...parses correct number of [x,y] to points in OpenLayers.Geometry.MultiLineString...");
+    		t.eq(isPass, length, "...parses every [x,y] to a point in OpenLayers.Geometry.MultiLineString correctly...");    		
+    	}
+    );
+    t.wait_result(3);
+    
+    var agsPolyline2 = {};
+   	agsPolyline2['paths'] = {};
+	try {
+		var olMultiLineString2 = adapter.parseAgsGeometry['polyline'].apply(adapter, [agsPolyline2]);
+	} catch(e) {    			
+		t.ok(true, "...throws exception if input is not array or not valid...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsGeometry_polygon(t) {
+	setUp();	
+	t.plan(4);
+	
+	var findTask = new esri.tasks.FindTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/");
+    findParams = new esri.tasks.FindParameters();
+    findParams.layerIds = [2];
+    findParams.searchFields = ["STATE_NAME"];
+    findParams.returnGeometry = true;
+    
+    findParams.searchText = "Nevada";
+    findTask.execute(
+    	findParams, 
+    	function(findResults) {
+    		var adapter = new OpenLayers.Format.AgsJsAdapter({});
+    		var agsPolygon = findResults[0].feature.geometry;
+    		var olPolygon = adapter.parseAgsGeometry['polygon'].apply(adapter, [agsPolygon]);
+    		
+    		t.ok(olPolygon instanceof OpenLayers.Geometry.Polygon, "...returns instance of OpenLayers.Geometry.Polygon...");
+    		
+    		var isPass = 0;
+    		var length = agsPolygon.rings[0].length;
+    		for(var i=0; i<length; i++) {
+    			var x1 = olPolygon.components[0].components[i].x;
+    			var y1 = olPolygon.components[0].components[i].y;
+    			var x2 = agsPolygon.rings[0][i][0];
+    			var y2 = agsPolygon.rings[0][i][1];
+    			if(x1 === x2 && y1 === y2) {
+    				isPass++;    				    			
+    			} else {
+    				isPass = _error;
+    				break;
+    			}    			
+    		}	
+    		t.eq(olPolygon.components[0].components.length, length, "...parses correct number of [x,y] to points in OpenLayers.Geometry.Polygon...");
+    		t.eq(isPass, length, "...parses every [x,y] to a point in OpenLayers.Geometry.Polygon correctly...");    		
+    	}
+    );
+    t.wait_result(3);
+    
+    var agsPolygon2 = {};
+   	agsPolygon2['rings'] = {};
+	try {
+		var olPolygon2 = adapter.parseAgsGeometry['polygon'].apply(adapter, [agsPolygon2]);
+	} catch(e) {    			
+		t.ok(true, "...throws exception if input is not array or not valid...");
+	}	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsGeometry_multipoint(t) {
+	setUp();
+	t.plan(4);
+	
+	var agsSpatialReference = {};
+    agsSpatialReference['wkid'] = "4326";
+	var agsMultiPoint = new esri.geometry.Multipoint(new esri.SpatialReference(agsSpatialReference));
+	
+	agsMultiPoint.addPoint(new esri.geometry.Point(1, 1, new esri.SpatialReference(agsSpatialReference)));
+	agsMultiPoint.addPoint(new esri.geometry.Point(2, 2, new esri.SpatialReference(agsSpatialReference)));
+	agsMultiPoint.addPoint(new esri.geometry.Point(3, 3, new esri.SpatialReference(agsSpatialReference)));
+	
+	var olPoints = adapter.parseAgsGeometry['multipoint'].apply(adapter, [agsMultiPoint]);
+	
+	t.ok(olPoints instanceof Array, "...olPoints is instance of Array of OpenLayers.Geometry.Point...");
+    		
+    var isPass = 0;
+    var length = agsMultiPoint.points.length;
+    for(var i=0; i<length; i++) {
+    	var x1 = olPoints[i].x;
+    	var y1 = olPoints[i].y;
+    	var x2 = agsMultiPoint.points[i][0];
+    	var y2 = agsMultiPoint.points[i][1];
+    	
+		if(x1 === x2 && y1 === y2) {
+    		isPass++;    				    			
+		} else {
+    		isPass = _error;
+			//t.debug_print("x1:" + x1 + " x2:" + x2 + " y1:" + y1 + " y2:" + y2);
+    		break;
+    	}    			
+    }	
+    t.eq(olPoints.length, length, "...parses correct number of [x,y] to points in Array of OpenLayers.Geometry.Point...");
+    t.eq(isPass, length, "...parses every [x,y] to a point in Array of OpenLayers.Geometry.Polygon correctly..."); 
+	
+	var agsMultiPoint2 = {};
+   	agsMultiPoint2['points'] = {};
+	try {
+		var olPoints2 = adapter.parseAgsGeometry['multipoint'].apply(adapter, [agsMultiPoint2]);
+	} catch(e) {    			
+		t.ok(true, "...throws exception if input is not array or not valid...");
+	}
+	tearDown();
+}
+
+function test_Format_AGSJSAdapter_parseAgsGeometry_extent(t) {
+	setUp();	
+	t.plan(3);
+	
+	var agsSpatialReference = {};
+    agsSpatialReference['wkid'] = "4326";		
+	var agsExtent = new esri.geometry.Extent(-180, -90, 180, 90, new esri.SpatialReference(agsSpatialReference));
+	
+	var olBounds = adapter.parseAgsGeometry['extent'].apply(adapter, [agsExtent]);
+	t.ok(olBounds instanceof OpenLayers.Bounds, "...olBounds is instance of OpenLayers.Bounds...");
+	
+	var isPass = true;
+	var bounds = olBounds.toArray();
+	if(bounds[0] !== agsExtent.xmin) {
+		isPass = false;
+	}
+	if(bounds[1] !== agsExtent.ymin) {
+		isPass = false;
+	}
+	if(bounds[2] !== agsExtent.xmax) {
+		isPass = false;
+	}
+	if(bounds[3] !== agsExtent.ymax) {
+		isPass = false;
+	}
+	t.ok(isPass, "...parses minx, miny, maxx, maxy correctly to OpenLayers.Bounds...");
+	
+	agsExtent.xmin = null;
+	try {
+		var olBounds2 = adapter.parseAgsGeometry['extent'].apply(adapter, [agsExtent]);
+	} catch(e) {
+		t.ok(true, "...throws exception if xmin, ymin, xmax, or ymax of agsExtent is null or not valid...");
+	}	
+	tearDown();
+}
+
+function test_Format_AGSJSAdapter_parseAgsSymbol_SimpleMarkerSymbol(t) {
+	setUp();	
+	t.plan(10);
+	
+    var simpleMarkerSymbol1 = new esri.symbol.SimpleMarkerSymbol(
+    	"STYLE_CIRCLE", 
+    	8,
+    	new esri.symbol.SimpleLineSymbol(
+			"STYLE_DASHDOT",
+			null, // set null for default color (0,0,0,1) 
+			2
+		),
+    	null // set null for default color (0,0,0,1)
+    );
+	simpleMarkerSymbol1.setOffset(34, 49);
+	
+	var olStyle1 = adapter.parseAgsSymbol['SimpleMarkerSymbol'].apply(adapter, [simpleMarkerSymbol1]);
+	
+	t.eq(olStyle1['pointRadius'], 8, "...parses 'pointRadius' correctly...");
+	t.eq(olStyle1['fillColor'], "#000000", "...parses 'fillColor' correctly...");
+	t.eq(olStyle1['fillOpacity'], 1, "...parses 'fillOpacity' correctly...");
+	t.eq(olStyle1['graphicXOffset'], 34, "...parses 'graphicXOffset' correctly...");
+	t.eq(olStyle1['graphicYOffset'], 49, "...parses 'graphicYOffset' correctly...");
+	t.eq(olStyle1['strokeDashstyle'], "dashdot", "...parses 'strokeDashstyle' correctly...");
+	t.eq(olStyle1['strokeWidth'], 2, "...parses 'strokeWidth' correctly...");
+	t.eq(olStyle1['strokeColor'], "#000000", "...parses 'strokeColor' correctly...");
+	t.eq(olStyle1['strokeOpacity'], 1, "...parses 'strokeOpacity' correctly...");
+	
+	var simpleMarkerSymbol2 = {
+		'name': "name",
+		'value': "value"
+	};
+	
+	try {
+		var olStyle2 = adapter.parseAgsSymbol['SimpleMarkerSymbol'].apply(adapter, [simpleMarkerSymbol2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid esri.symbol.SimpleMarkerSymbol...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AGSJSAdapter_parseAgsSymbol_SimpleLineSymbol(t) {
+	setUp();	
+	t.plan(5);
+	
+    var simpleLineSymbol1 = new esri.symbol.SimpleLineSymbol(
+    	"STYLE_DASH", 
+    	null, // set null for default color (0,0,0,1)
+    	2
+    );
+	
+	var olStyle1 = adapter.parseAgsSymbol['SimpleLineSymbol'].apply(adapter, [simpleLineSymbol1]);
+		
+	t.eq(olStyle1['strokeDashstyle'], "dash", "...parses 'strokeDashstyle' correctly...");
+	t.eq(olStyle1['strokeWidth'], 2, "...parses 'strokeWidth' correctly...");
+	t.eq(olStyle1['strokeColor'], "#000000", "...parses 'strokeColor' correctly...");
+	t.eq(olStyle1['strokeOpacity'], 1, "...parses 'strokeOpacity' correctly...");
+	
+	var simpleLineSymbol2 = {
+		'name': "name",
+		'value': "value"
+	};
+		
+	try {
+		var olStyle2 = adapter.parseAgsSymbol['SimpleLineSymbol'].apply(adapter, [simpleLineSymbol2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid esri.symbol.SimpleLineSymbol...");
+	}	
+	tearDown();
+}
+
+function test_Format_AGSJSAdapter_parseAgsSymbol_PictureMarkerSymbol(t) {
+	setUp();	
+	t.plan(7);
+	
+    var pictureMarkerSymbol1 = new esri.symbol.PictureMarkerSymbol(
+    	"http://www.google.com/pictures/marker.png",
+		34,
+		49
+    );
+	pictureMarkerSymbol1.setOffset(34, 49);
+	pictureMarkerSymbol1.setSize(8);
+	
+	var olStyle1 = adapter.parseAgsSymbol['PictureMarkerSymbol'].apply(adapter, [pictureMarkerSymbol1]);
+		
+	t.eq(olStyle1['externalGraphic'], "http://www.google.com/pictures/marker.png", "...parses 'externalGraphic' correctly...");
+	t.eq(olStyle1['graphicWidth'], 34, "...parses 'strokeWidth' correctly...");
+	t.eq(olStyle1['graphicHeight'], 49, "...parses 'strokeHeight' correctly...");
+	t.eq(olStyle1['graphicXOffset'], 34, "...parses 'graphicXOffset' correctly...");
+	t.eq(olStyle1['graphicYOffset'], 49, "...parses 'graphicYOffset' correctly...");
+	t.eq(olStyle1['pointRadius'], 8, "...parses 'pointRadius' correctly...");
+	
+	var pictureMarkerSymbol2 = {
+		'name': "name",
+		'value': "value"
+	};
+		
+	try {
+		var olStyle2 = adapter.parseAgsSymbol['PictureMarkerSymbol'].apply(adapter, [pictureMarkerSymbol2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid esri.symbol.PictureMarkerSymbol...");
+	}	
+	tearDown();
+}
+
+function test_Format_AGSJSAdapter_parseAgsSymbol_SimpleFillSymbol(t) {
+	setUp();	
+	t.plan(7);
+	
+    var simpleFillSymbol1 = new esri.symbol.SimpleFillSymbol(
+    	"STYLE_SOLID", 
+    	new esri.symbol.SimpleLineSymbol(
+			"STYLE_DASHDOT",
+			null, // set null for default color (0,0,0,1) 
+			2
+		),
+    	new dojo.Color([255,255,255]) // set null for default color (0,0,0,1)
+    );
+	
+	var olStyle1 = adapter.parseAgsSymbol['SimpleFillSymbol'].apply(adapter, [simpleFillSymbol1]);
+	
+	t.eq(olStyle1['fillColor'], "#ffffff", "...parses 'fillColor' correctly...");
+	t.eq(olStyle1['fillOpacity'], 1, "...parses 'fillOpacity' correctly...");	
+	t.eq(olStyle1['strokeDashstyle'], "dashdot", "...parses 'strokeDashstyle' correctly...");
+	t.eq(olStyle1['strokeWidth'], 2, "...parses 'strokeWidth' correctly...");
+	t.eq(olStyle1['strokeColor'], "#000000", "...parses 'strokeColor' correctly...");
+	t.eq(olStyle1['strokeOpacity'], 1, "...parses 'strokeOpacity' correctly...");
+	
+	var simpleFillSymbol2 = {
+		'name': "name",
+		'value': "value"
+	};
+	
+	try {
+		var olStyle2 = adapter.parseAgsSymbol['SimpleFillSymbol'].apply(adapter, [simpleFillSymbol2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid esri.symbol.SimpleFillSymbol...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsSpatialReference(t) {
+	setUp();
+	t.plan(3);
+	
+	var agsSpatialReference = {};
+    agsSpatialReference['wkid'] = "4326";		
+    
+    var olSpatialReference = adapter.parseAgsSpatialReference(new esri.SpatialReference(agsSpatialReference));
+	t.eq("EPSG:4326", olSpatialReference, "...parses esri.SpatialReference 4326 correctly...");
+	
+	var agsSpatialReference1 = {};
+    agsSpatialReference1['wkid'] = "102113";		
+    
+    var olSpatialReference1 = adapter.parseAgsSpatialReference(new esri.SpatialReference(agsSpatialReference1));
+	t.eq("EPSG:900913", olSpatialReference1, "...parses esri.SpatialReference 102113 correctly...");
+	
+	var agsSpatialReference2 = {};
+	agsSpatialReference2['wkid'] = null;
+	try {
+		var olSpatialReference2 = adapter.parseAgsSpatialReference(agsSpatialReference2);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid esri.SpatialReference...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AGSJSAdapter_parseAgsGraphic(t) {
+	setUp();
+	t.plan(15);
+	
+	var findTask = new esri.tasks.FindTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/");
+    findParams = new esri.tasks.FindParameters();
+    findParams.layerIds = [0];
+    findParams.searchFields = ["CITY_NAME"];
+    findParams.returnGeometry = true;
+    
+    findParams.searchText = "Los Angeles";
+    findTask.execute(
+    	findParams, 
+    	function(findResults) {
+    		var adapter = new OpenLayers.Format.AgsJsAdapter({});
+    		var agsGraphic = findResults[0].feature;
+    		
+    		//infoTemplate 
+    		agsGraphic.infoTemplate = new esri.InfoTemplate("title", "<html>content</html>");
+    		
+    		//symbol
+    		agsGraphic.symbol = new esri.symbol.SimpleMarkerSymbol(
+		    	"STYLE_CIRCLE", 
+		    	8,
+		    	new esri.symbol.SimpleLineSymbol(
+					"STYLE_DASHDOT",
+					null, // set null for default color (0,0,0,1) 
+					2
+				),
+		    	null // set null for default color (0,0,0,1)
+		    );
+			agsGraphic.symbol.setOffset(34, 49);	
+    		
+    		var olFeature = adapter.parseAgsGraphic.apply(adapter, [agsGraphic]);  
+    		//t.debug_print("Geometry of OpenLayers.Feature.Vector" + olFeature.geometry);
+    		t.ok(olFeature instanceof OpenLayers.Feature.Vector, "...olFeature is an instance of OpenLayers.Feature.Vector...");		
+    		t.ok(olFeature.geometry instanceof OpenLayers.Geometry.Point, "...parses geometry of esri.Graphic correctly...");
+			
+			var isPass = true;
+			for(key in agsGraphic.attributes) {
+				var value1 = agsGraphic.attributes[key];
+				var value2 = olFeature.attributes[key];
+				if(value1 !== value2) {
+					isPass = false;
+					break;
+				}
+			}
+			t.ok(isPass, "...parses attributes of esri.Graphic correctly...");
+    	
+    		t.eq(olFeature.attributes['infoTemplateTitle'], "title", "...parses infoTemplateTitle correctly...");
+    		t.eq(olFeature.attributes['infoTemplateContent'], "<html>content</html>", "...parses infoTemplateContent correctly...");
+    		
+			t.eq(olFeature.style['pointRadius'], 8, "...parses 'pointRadius' correctly...");
+			t.eq(olFeature.style['fillColor'], "#000000", "...parses 'fillColor' correctly...");
+			t.eq(olFeature.style['fillOpacity'], 1, "...parses 'fillOpacity' correctly...");
+			t.eq(olFeature.style['graphicXOffset'], 34, "...parses 'graphicXOffset' correctly...");
+			t.eq(olFeature.style['graphicYOffset'], 49, "...parses 'graphicYOffset' correctly...");
+			t.eq(olFeature.style['strokeDashstyle'], "dashdot", "...parses 'strokeDashstyle' correctly...");
+			t.eq(olFeature.style['strokeWidth'], 2, "...parses 'strokeWidth' correctly...");
+			t.eq(olFeature.style['strokeColor'], "#000000", "...parses 'strokeColor' correctly...");
+			t.eq(olFeature.style['strokeOpacity'], 1, "...parses 'strokeOpacity' correctly...");
+    	}
+    );
+    t.wait_result(3);	
+    
+    var agsGraphic1 = {};
+    agsGraphic1['geometry'] = "invalid";
+    try {
+    	var olFeature1 = adapter.parseAgsGraphic.apply(adapter, [agsGraphic]);
+    } catch(e) {
+    	t.ok(true, "...throws exception if input agsGraphic does not have a valid geometry...");
+    }
+	
+	tearDown();
+}
+
+function test_Format_AGSJSAdapter_parseAgsGraphics(t) {
+	setUp();
+	t.plan(2);
+
+	var findTask = new esri.tasks.FindTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/");
+    findParams = new esri.tasks.FindParameters();
+    findParams.layerIds = [0];
+    findParams.searchFields = ["CITY_NAME"];
+    findParams.returnGeometry = true;
+    
+    findParams.searchText = "San ";
+    findParams.contain = true;
+    findTask.execute(
+    	findParams, 
+    	function(findResults) {
+    		var adapter = new OpenLayers.Format.AgsJsAdapter({});
+    		var agsGraphics = [];
+    		for(var i=0; i<findResults.length; i++) {
+    			agsGraphics.push(findResults[i].feature);
+    		}
+    		var olFeatures = adapter.parseAgsGraphics.apply(adapter, [agsGraphics]);
+    		//t.debug_print("number of esri.Graphic in the array: " + olFeatures.length);
+	    	var isPass = 0;
+    		for(var j=0; j<olFeatures.length; j++) {    			
+    			if(olFeatures[j] instanceof OpenLayers.Feature.Vector) {
+    				isPass++;
+    			} else {
+    				isPass = _error;
+    				break;
+    			}
+    		}
+    		t.eq(isPass, olFeatures.length, "...parses array of esri.Graphic and returns an array of OpenLayers.Feature.Vector correctly...");
+    	}
+    );
+	t.wait_result(3);
+	
+	var agsGraphics1 = {};
+    try {
+    	var olFeatures1 = adapter.parseAgsGraphics.apply(adapter, [agsGraphics1]);
+    } catch(e) {
+    	t.ok(true, "...throws exception if input agsGraphics is not an array...");
+    }
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsIdentifyResult(t) {
+	setUp();
+	t.plan(5);
+	
+	var identifyTask = new esri.tasks.IdentifyTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer");
+	
+	var agsSpatialReference = {};
+    agsSpatialReference['wkid'] = "4326";		
+	var agsPoint = new esri.geometry.Point(-118.41211440542, 34.1121065382343, new esri.SpatialReference(agsSpatialReference));
+	var agsExtent = new esri.geometry.Extent(-118.41211440543, 34.1121065382342, -118.41211440541, 34.1121065382344, new esri.SpatialReference(agsSpatialReference));
+	
+	identifyParams = new esri.tasks.IdentifyParameters();
+    identifyParams.dpi = 96;
+    identifyParams.width = 1024;
+    identifyParams.dpi = 512;
+    identifyParams.layerId = [0]; // hard coded identify will return 8 identifyResult
+    identifyParams.layerOption = "visible";    
+    identifyParams.tolerance = 1;
+    identifyParams.returnGeometry = true;
+	identifyParams.geometry = agsPoint; 
+	identifyParams.mapExtent = agsExtent;
+	identifyParams.spatialReference = new esri.SpatialReference(agsSpatialReference);
+	
+	identifyTask.execute(
+		identifyParams,
+		function(identifyResults) {
+			var adapter = new OpenLayers.Format.AgsJsAdapter({});
+			var identifyResult = identifyResults[0];			
+			var olFeature = adapter.parseAgsResults['identifyResult'].apply(adapter, [identifyResult]);
+			t.ok(olFeature instanceof OpenLayers.Feature.Vector, "...olFeature is an instance of OpenLayers.Feature.Vector...");		
+			//t.debug_print("city found: " + olFeature.attributes['CITY_NAME']);
+			t.ok(olFeature.attributes['displayFieldName'], "...parses 'displayFieldName' attribute correctly...");
+			var isPass = true;
+			if(olFeature.attributes['layerId'] === null || olFeature.attributes['layerId'] === "undefined") {
+				isPass = false;
+			}
+			t.ok(isPass, "...parses 'layerId' attribute correctly...");
+			t.ok(olFeature.attributes['layerName'], "...parses 'layerName' attribute correctly...");
+		}
+	);
+	t.wait_result(3);
+	
+	var identifyResult1 = {};
+	identifyResult1['feature'] = null;
+	try {
+		var olFeature1 = adapter.parseAgsResults['identifyResult'].apply(adapter, [identifyResult1]);
+	} catch(e) {
+		t.ok(true, "...throws exception when the input is invalid esri.Graphic...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsIdentifyResults(t) {
+	setUp();
+	t.plan(3);
+	
+	var identifyTask = new esri.tasks.IdentifyTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer");
+	
+	var agsSpatialReference = {};
+    agsSpatialReference['wkid'] = "4326";		
+	var agsPoint = new esri.geometry.Point(-118.41211440542, 34.1121065382343, new esri.SpatialReference(agsSpatialReference));
+	var agsExtent = new esri.geometry.Extent(-118.41211440543, 34.1121065382342, -118.41211440541, 34.1121065382344, new esri.SpatialReference(agsSpatialReference));
+	
+	identifyParams = new esri.tasks.IdentifyParameters();
+    identifyParams.dpi = 96;
+    identifyParams.width = 1024;
+    identifyParams.dpi = 512;
+    identifyParams.layerId = [0]; // hard coded identify will return 8 identifyResult
+    identifyParams.layerOption = "visible";    
+    identifyParams.tolerance = 1;
+    identifyParams.returnGeometry = true;
+	identifyParams.geometry = agsPoint; 
+	identifyParams.mapExtent = agsExtent;
+	identifyParams.spatialReference = new esri.SpatialReference(agsSpatialReference);
+	
+	identifyTask.execute(
+		identifyParams,
+		function(identifyResults) {
+			var adapter = new OpenLayers.Format.AgsJsAdapter({});
+			var olFeatures = adapter.parseAgsResults['identifyResults'].apply(adapter, [identifyResults]);			
+			var isPass = true;
+			var count = 0;
+			for(var i=0; i<8; i++) {				
+				if(!(olFeatures[i] instanceof OpenLayers.Feature.Vector)) {
+					isPass = false;
+				} else {
+					//t.debug_print("city found: " + olFeatures[i].attributes['CITY_NAME']);
+					count++;
+				}
+			}
+			t.eq(count, 8, "...parses number of esri.tasks.IdentifyResult correctly...");
+			t.ok(isPass, "...parses array of esri.tasks.IdentifyResult and returns an array of instance of OpenLayers.Feature.Vector correctly...");
+		}
+	);	
+	t.wait_result(3);
+	
+	var identifyResults1 = {};
+	try {
+		var olFeatures = adapter.parseAgsResults['identifyResults'].apply(adapter, [identifyResults1]);	
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid array of esri.tasks.IdentifyResult...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsAddressCandidate(t) {
+	setUp();
+	t.plan(4);
+	
+	var locator = new esri.tasks.Locator("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer");
+	
+	var address = {};
+	address['address'] = "380 New York Str";
+	address['city'] = "Redlands";
+	address['state'] = "CA";
+	address['zip'] = "92373";
+	
+	var outFields = null;
+	
+	locator.addressToLocations(
+		address,
+		["StreetName", "City", "State", "ZIP"],		
+		function(addressCandidates) {
+			var adapter = new OpenLayers.Format.AgsJsAdapter({});
+			var olFeature = adapter.parseAgsResults['addressCandidate'].apply(adapter, [addressCandidates[0]]);
+			t.ok(olFeature instanceof OpenLayers.Feature.Vector, "...olFeature is an instance of OpenLayers.Feature.Vector...");
+
+			t.eq("380 NEW YORK ST, REDLANDS, CA, 92373", olFeature.attributes['address'], "...parses 'address' attribute correctly...");
+			//t.debug_print("address found: " + olFeature.attributes['address']);
+			t.eq(100, olFeature.attributes['score'], "...parses 'score' attribute correctly...");
+			//t.debug_print("score of found address: " + olFeature.attributes['score']);
+		}
+	);
+	t.wait_result(3);
+	
+	var addressCandidate1 = {};
+	addressCandidate1['location'] = null;
+	try {
+		var olFeature = adapter.parseAgsResults['addressCandidate'].apply(adapter, [addressCandidate1]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input addressCandidate has invalid location...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsAddressCandidates(t) {
+	setUp();
+	t.plan(3);
+	
+	var locator = new esri.tasks.Locator("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer");
+	
+	var address = {};
+	address['address'] = "380 New York Str";
+	address['city'] = "Redlands";
+	address['state'] = "CA";
+	address['zip'] = "92373";
+	
+	var outFields = null;
+	
+	// hard coded geocoding request returns 		
+	locator.addressToLocations(
+		address,
+		["StreetName", "City", "State", "ZIP"],	
+		function(addressCandidates) {
+			var adapter = new OpenLayers.Format.AgsJsAdapter({});
+			var olFeatures = adapter.parseAgsResults['addressCandidates'].apply(adapter, [addressCandidates]);
+			var isPass = true;
+			var count = 0;
+			for(var i=0; i<olFeatures.length; i++) {
+				if(!(olFeatures[i] instanceof OpenLayers.Feature.Vector)) {
+					isPass = false;				
+				} else {
+					count++;
+				}
+			}
+			t.ok(isPass, "...returns an array of instance of OpenLayers.Feature.Vector...");
+			t.eq(count, 10, "...parses array of esri.tasks.AddressCandidate...");
+		}
+	);
+	t.wait_result(3);
+	
+	var addressCandidates1 = {};
+	try {
+		var olFeatures1 = adapter.parseAgsResults['addressCandidates'].apply(adapter, [addressCandidates1]);		
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid array of esri.tasks.AddressCandidate...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsFindResult(t) {
+	setUp();
+	t.plan(6);
+	
+	var findTask = new esri.tasks.FindTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/");
+    findParams = new esri.tasks.FindParameters();
+    findParams.layerIds = [0];
+    findParams.searchFields = ["CITY_NAME"];
+    findParams.returnGeometry = true;
+    
+    findParams.searchText = "Los Angeles";
+    findTask.execute(
+    	findParams,
+    	function(findResults) {
+    		var adapter = new OpenLayers.Format.AgsJsAdapter({});
+    		var olFeature = adapter.parseAgsResults['findResult'].apply(adapter, [findResults[0]]);
+    		t.ok(olFeature instanceof OpenLayers.Feature.Vector, "...olFeature is an instance of OpenLayers.Feature.Vector...");
+    		t.eq("CITY_NAME", olFeature.attributes['displayFieldName'], "...parses 'displayFieldName' attribute...");
+    		//t.debug_print("displayFieldName of findResult: " + olFeature.attributes['displayFieldName']);
+    		t.eq("CITY_NAME", olFeature.attributes['foundFieldName'], "...parses 'foundFieldName' attribute...");
+    		//t.debug_print("foundFieldName of findResult: " + olFeature.attributes['foundFieldName']);
+    		t.eq(0, olFeature.attributes['layerId'], "...parses'layerId' attribute...");
+    		//t.debug_print("layerId of findResult: " + olFeature.attributes['layerId']);
+    		t.eq("Cities", olFeature.attributes['layerName'], "...parses 'layerName' attribute...");		
+    		//t.debug_print("layerName of findResult: " + olFeature.attributes['layerName']);
+    	}
+    );
+	
+	t.wait_result(3);
+	
+	var findResult1 = {};
+	findResult1['feature'] = null;
+	
+	try {
+		var olFeature1 = adapter.parseAgsResults['findResult'].apply(adapter, [findResult1]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input findResult has invalid feature esri.Graphic...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsFindResults(t) {
+	setUp();
+	t.plan(3);
+	
+	var findTask = new esri.tasks.FindTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/");
+    findParams = new esri.tasks.FindParameters();
+    findParams.layerIds = [0];
+    findParams.searchFields = ["CITY_NAME"];
+    findParams.returnGeometry = true;
+    
+    findParams.searchText = "San ";
+    findParams.contain = true;
+    findTask.execute(
+    	findParams, 
+    	function(findResults) {
+    		var adapter = new OpenLayers.Format.AgsJsAdapter({});
+    		var olFeatures = adapter.parseAgsResults['findResults'].apply(adapter, [findResults]); 
+    		var isPass = true;
+    		var count = 0;
+    		for(var i=0; i<olFeatures.length; i++) {
+    			if(!(olFeatures[i] instanceof OpenLayers.Feature.Vector)) {
+    				isPass = false;
+    			} else {
+    				count++;
+    			}
+    		}
+    		t.ok(isPass, "...olFeatures is an array of instance of OpenLayers.Feature.Vector...");
+    		t.eq(32, count, "...parses array of findResult into OpenLayers.Feature.Vector array correctly...");
+    		//t.debug_print("cities found: " + olFeatures.length);
+    	}
+    );	
+	t.wait_result(3);
+	
+	var findResults1 = {};
+	try {
+		adapter.parseAgsResults['findResults'].apply(adapter, [findResults1]); 
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid array of esri.tasks.FindResult...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsFeatureSet(t) {
+	setUp();
+	t.plan(3);
+	
+	var queryTask = new esri.tasks.QueryTask("http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StatesCitiesRivers_USA/MapServer/0");
+	var query = new esri.tasks.Query();
+	query.returnGeometry = true;
+    query.outFields = ["CITY_NAME"];
+    query.text = "San ";
+    
+    queryTask.execute(
+    	query,
+    	function(featureSet) {
+    		var adapter = new OpenLayers.Format.AgsJsAdapter({});
+    		var olFeatures = adapter.parseAgsResults['featureSet'].apply(adapter, [featureSet]); 
+    		
+    		var isPass = true;
+    		var count = 0;
+    		for(var i=0; i<olFeatures.length; i++) {
+    			if(!(olFeatures[i] instanceof OpenLayers.Feature.Vector)) {
+    				isPass = false;
+    			} else {
+    				count++;
+    			}
+    		}
+    		t.ok(isPass, "...olFeatures is an array of instance of OpenLayers.Feature.Vector...");
+    		t.eq(32, count, "...parses array of esri.Graphic in esri.tasks.FeatureSet correctly to array of OpenLayers.Feature.Vector...");
+    	}
+    );
+    
+    var featureSet1 = {};
+	try {
+		adapter.parseAgsResults['featureSet'].apply(adapter, [featureSet1]); 
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid instanceof of esri.tasks.FeatureSet...");
+	}
+	
+	t.wait_result(3);
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_parseAgsAreasAndLengths(t){
+	setUp();
+	t.plan(3);
+	
+	var agsAreasAndLengths1 = {
+		areas: [0,1],
+		lengths: [1,0]
+	};
+	var olAreasAndLengths = adapter.parseAgsResults['areasAndLengths'].apply(adapter, [agsAreasAndLengths1]);
+	t.eq(olAreasAndLengths.areas, [0,1], "...parses agsAreasAndLengths.areas correctly...");
+	t.eq(olAreasAndLengths.lengths, [1,0], "...parses agsAreasAndLengths.lengths correctly...");
+	
+	var agsAreasAndLengths2 = {
+		address: [0,1],
+		country: [0,1]
+	};
+	try {
+		adapter.parseAgsResults['areasAndLengths'].apply(adapter, [agsAreasAndLengths2]); 
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid instanceof of esri areasAndLengths...");
+	}
+	tearDown();
+}
+
+/*
+function test_Format_AgsJsAdapter_parseAgsRelation(t){
+
+}
+
+function test_Format_AgsJsAdapter_parseAgsRelations(t){
+
+}
+*/
+
+function test_Format_AgsJsAdapter_encodeAgsUnit(t) {
+	setUp();
+	t.plan(6);
+	
+	t.eq(adapter.encodeAgsUnit("UNIT_METER"), 9001, "...encode UNIT_METER to 9001...");
+	t.eq(adapter.encodeAgsUnit("UNIT_KILOMETER"), 9036, "...encode UNIT_KILOMETER to 9036...");
+	t.eq(adapter.encodeAgsUnit("UNIT_FOOT"), 9002, "...encode FOOT to 9002...");
+	t.eq(adapter.encodeAgsUnit("UNIT_DEGREE"), 9102, "...encode UNIT_DEGREE to 9102...");
+	
+	try {
+		var agsUnit = adapter.encodeAgsUnit("UNIT_UNSUPPORTED");
+	} catch(e) {
+		t.ok(true, "...throws exception with unsupported unit string...");
+	}
+	
+	try {
+		var agsUnit = adapter.encodeAgsUnit(null);
+	} catch(e) {
+		t.ok(true, "...throws exception with null input unit string...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsSpatialReference(t) {
+	setUp();
+	t.plan(5);
+	
+	var agsSr = adapter.encodeAgsSpatialReference("EPSG:4326");	
+	t.ok(agsSr instanceof esri.SpatialReference, "...agsSr instance of esri.SpatialReference...");
+	t.eq(agsSr.wkid, "4326", "...encodes 'wkid' 4326 correctly...");
+	
+	var agsSr1 = adapter.encodeAgsSpatialReference("EPSG:900913");	
+	t.eq(agsSr1.wkid, "102113", "...encodes 'wkid' 900913 correctly...");
+	
+	try {
+		var agsSr2 = adapter.encodeAgsSpatialReference("AUTO:1001");
+	} catch(e) {
+		t.ok(true, "...throws exception if not in 'EPSG' namespace...");
+	}
+	
+	try {
+		var agsSr3 = adapter.encodeAgsSpatialReference("EPSG:");
+	} catch(e) {
+		t.ok(true, "...throws exception if invalid identifier...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGeometry_point(t) {
+	setUp();
+	t.plan(3);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var olSpatialReference = "EPSG:4326";
+	
+	var agsPoint = adapter.encodeAgsGeometry['point'].apply(adapter, [olPoint, olSpatialReference]);
+	
+	t.ok(agsPoint instanceof esri.geometry.Point, "...agsPoint is an instance of esri.geometry.Point...");
+	
+	var isPass = true;
+	if(agsPoint.x !== 34.49 || agsPoint.y !== 49.34) {
+		isPass = false;
+	}
+	t.ok(isPass, "...encodes x, y coordinates from esri.geometry.Point correctly...");
+	
+	var olPoint1 = [34.49, 49.34];
+	
+	try {
+		var agsPoint1 = adapter.encodeAgsGeometry['point'].apply(adapter, [olPoint1, olSpatialReference]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid OpenLayers.Geometry.Point...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGeometry_coordinate(t) {
+	setUp();
+	t.plan(3);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var agsCoordinate = adapter.encodeAgsGeometry['coordinate'].apply(adapter, [olPoint]);
+	
+	t.ok(agsCoordinate instanceof Array, "...returns an instance of array [x, y]...");
+	
+	var isPass = true;
+	if(agsCoordinate[0] !== 34.49 || agsCoordinate[1] !== 49.34) {
+		isPass = false;
+	}
+	t.ok(isPass, "...enocodes x, y coordinates from esri.geometry.Point...");
+	
+	var olPoint1 = [34.49, 49.34];
+	try {
+		var agsCoordinate1 = adapter.encodeAgsGeometry['coordinate'].apply(adapter, [olPoint1]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid OpenLayers.Geometry.Point...");
+	}
+	tearDown();
+}	
+
+function test_Format_AgsJsAdapter_encodeAgsGeometry_path(t) {
+	setUp();
+	t.plan(5);
+	
+	var olPoints = [];
+	var olPoint1 = new OpenLayers.Geometry.Point(1, 1);
+	var olPoint2 = new OpenLayers.Geometry.Point(2, 2);
+	var olPoint3 = new OpenLayers.Geometry.Point(3, 3);
+	var olPoint4 = new OpenLayers.Geometry.Point(4, 4);
+	var olPoint5 = new OpenLayers.Geometry.Point(5, 5); 
+	
+	olPoints.push(olPoint1);
+	olPoints.push(olPoint2);
+	olPoints.push(olPoint3);
+	olPoints.push(olPoint4);
+	olPoints.push(olPoint5);
+	
+	var olLineString = new OpenLayers.Geometry.LineString(olPoints);	
+	var agsPath = adapter.encodeAgsGeometry['path'].apply(adapter, [olLineString]);
+	
+	t.ok(agsPath instanceof Array, "...returns an instance of array of [x, y]...");
+	t.eq(5, agsPath.length, "...encodes points from OpenLayers.Geometry.LineString...");
+	
+	var isPass = 0;
+	for(var i=0; i<agsPath.length; i++) {
+		if(agsPath[i][0] === olPoints[i].x && agsPath[i][1] === olPoints[i].y) {
+			isPass++;
+		} else {
+			isPass = _error;
+			break;
+		}
+	}
+	t.eq(agsPath.length, olPoints.length, "...encodes point from OpenLayers.Geometry.LineString...");
+	t.eq(isPass, agsPath.length, "...encodes point from OpenLayers.Geometry.LineString...");
+	
+	var olLineString1 = [];
+	try {
+		var agsPath1 = adapter.encodeAgsGeometry['path'].apply(adapter, [olLineString1]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid instanceof OpenLayers.Geometry.LineString...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGeometry_linearring(t) {
+	setUp();
+	t.plan(5);
+	
+	var olPoints = [];
+	var olPoint1 = new OpenLayers.Geometry.Point(1, 1);
+	var olPoint2 = new OpenLayers.Geometry.Point(2, 2);
+	var olPoint3 = new OpenLayers.Geometry.Point(3, 3);
+	var olPoint4 = new OpenLayers.Geometry.Point(4, 4);
+	var olPoint5 = new OpenLayers.Geometry.Point(5, 5); 
+	var olPoint6 = new OpenLayers.Geometry.Point(1, 1);
+	
+	olPoints.push(olPoint1);
+	olPoints.push(olPoint2);
+	olPoints.push(olPoint3);
+	olPoints.push(olPoint4);
+	olPoints.push(olPoint5);
+	olPoints.push(olPoint6);
+	
+	var olLinearRing = new OpenLayers.Geometry.LinearRing(olPoints);	
+	var agsLinearRing = adapter.encodeAgsGeometry['linearring'].apply(adapter, [olLinearRing]);
+	
+	t.ok(agsLinearRing instanceof Array, "...returns an instance of array of [x, y]...");
+	t.eq(6, agsLinearRing.length, "...encodes points from OpenLayers.Geometry.LinearRing...");
+	
+	var isPass = 0;
+	for(var i=0; i<agsLinearRing.length; i++) {
+		if(agsLinearRing[i][0] === olPoints[i].x && agsLinearRing[i][1] === olPoints[i].y) {
+			isPass++;
+		} else {
+			isPass = _error;
+			break;
+		}
+	}
+	t.eq(olPoints.length, agsLinearRing.length, "...encodes every point from OpenLayers.Geometry.LinearRing...");
+	t.eq(isPass, agsLinearRing.length, "...encodes every point from OpenLayers.Geometry.LinearRing...");
+	
+	var olLinearRing1 = [];
+	try {
+		var agsLinearRing1 = adapter.encodeAgsGeometry['linearring'].apply(adapter, [olLinearRing1]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid instanceof OpenLayers.Geometry.LinearRing...");
+	}
+	
+	var olPoints2 = [];
+	var olPoint12 = new OpenLayers.Geometry.Point(1, 1);
+	var olPoint22 = new OpenLayers.Geometry.Point(2, 2);
+	var olPoint32 = new OpenLayers.Geometry.Point(3, 3);
+	var olPoint42 = new OpenLayers.Geometry.Point(4, 4);
+	var olPoint52 = new OpenLayers.Geometry.Point(5, 5); 
+	var olPoint62 = new OpenLayers.Geometry.Point(1, 8);
+	
+	olPoints2.push(olPoint12);
+	olPoints2.push(olPoint22);
+	olPoints2.push(olPoint32);
+	olPoints2.push(olPoint42);
+	olPoints2.push(olPoint52);
+	olPoints2.push(olPoint62);
+	
+	// smart OpenLayers.Geometry.LinearRing can automatically fix itself when it's not a closed ring
+	var olLinearRing2 = new OpenLayers.Geometry.LinearRing(olPoints2);
+	olLinearRing2.components[6].y = 8;
+	try {
+		var agsLinearRing2 = adapter.encodeAgsGeometry['linearring'].apply(adapter, [olLinearRing2]);
+	} catch(e) {
+		//t.ok(true, "...throws exception when input is not a closed OpenLayers.Geometry.LinearRing...");
+	}
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGeometry_polyline(t) {
+	setUp();
+	t.plan(3);
+	
+	var olPoints1 = [];
+	var olPoint11 = new OpenLayers.Geometry.Point(1, 1);
+	var olPoint12 = new OpenLayers.Geometry.Point(2, 2);
+	var olPoint13 = new OpenLayers.Geometry.Point(3, 3);
+	var olPoint14 = new OpenLayers.Geometry.Point(4, 4);
+	var olPoint15 = new OpenLayers.Geometry.Point(5, 5); 
+	
+	olPoints1.push(olPoint11);
+	olPoints1.push(olPoint12);
+	olPoints1.push(olPoint13);
+	olPoints1.push(olPoint14);
+	olPoints1.push(olPoint15);
+	
+	var olPoints2 = [];
+	var olPoint21 = new OpenLayers.Geometry.Point(-1, -1);
+	var olPoint22 = new OpenLayers.Geometry.Point(-2, -2);
+	var olPoint23 = new OpenLayers.Geometry.Point(-3, -3);
+	var olPoint24 = new OpenLayers.Geometry.Point(-4, -4);
+	var olPoint25 = new OpenLayers.Geometry.Point(-5, -5); 
+	
+	olPoints2.push(olPoint21);
+	olPoints2.push(olPoint22);
+	olPoints2.push(olPoint23);
+	olPoints2.push(olPoint24);
+	olPoints2.push(olPoint25);
+	
+	var olLineString1 = new OpenLayers.Geometry.LineString(olPoints1);
+	var olLineString2 = new OpenLayers.Geometry.LineString(olPoints2);
+	var olMultiLineString = new OpenLayers.Geometry.MultiLineString([olLineString1, olLineString2]);
+	var olSpatialReference = "EPSG:4326";
+	
+	var agsPolyline = adapter.encodeAgsGeometry['polyline'].apply(adapter, [olMultiLineString, olSpatialReference]);
+	t.ok(agsPolyline instanceof esri.geometry.Polyline, "...returns an instance of esri.geometry.Polyline...");
+	
+	var isPass = true;
+	if(agsPolyline.paths.length !== 2) {
+		isPass = false;
+	}
+	if(agsPolyline.paths[0].length !== 5) {
+		isPass = false;
+	}
+	if(agsPolyline.paths[1].length !== 5) {
+		isPass = false;
+	}
+	t.ok(isPass, "...encodes paths and points from OpenLayers.Geometry.MultiLineString...");
+	
+	var olMultiLineString1 = {};
+	try {
+		var agsPolyline1 = adapter.encodeAgsGeometry['polyline'].apply(adapter, [olMultiLineString1, olSpatialReference]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid instanceof OpenLayers.Geometry.MultiLineString...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGeometry_polygon(t) {
+	setUp();
+	t.plan(3);
+	
+	var olPoints1 = [];
+	var olPoint11 = new OpenLayers.Geometry.Point(1, 1);
+	var olPoint12 = new OpenLayers.Geometry.Point(2, 2);
+	var olPoint13 = new OpenLayers.Geometry.Point(3, 3);
+	var olPoint14 = new OpenLayers.Geometry.Point(4, 4);
+	var olPoint15 = new OpenLayers.Geometry.Point(5, 5);
+	var olPoint16 = new OpenLayers.Geometry.Point(1, 1); 
+	
+	olPoints1.push(olPoint11);
+	olPoints1.push(olPoint12);
+	olPoints1.push(olPoint13);
+	olPoints1.push(olPoint14);
+	olPoints1.push(olPoint15);
+	olPoints1.push(olPoint16);
+	
+	var olPoints2 = [];
+	var olPoint21 = new OpenLayers.Geometry.Point(-1, -1);
+	var olPoint22 = new OpenLayers.Geometry.Point(-2, -2);
+	var olPoint23 = new OpenLayers.Geometry.Point(-3, -3);
+	var olPoint24 = new OpenLayers.Geometry.Point(-4, -4);
+	var olPoint25 = new OpenLayers.Geometry.Point(-5, -5); 
+	var olPoint26 = new OpenLayers.Geometry.Point(-1, -1); 
+	
+	olPoints2.push(olPoint21);
+	olPoints2.push(olPoint22);
+	olPoints2.push(olPoint23);
+	olPoints2.push(olPoint24);
+	olPoints2.push(olPoint25);
+	olPoints2.push(olPoint26);
+	
+	var olLinearRing1 = new OpenLayers.Geometry.LinearRing(olPoints1);
+	var olLinearRing2 = new OpenLayers.Geometry.LinearRing(olPoints2);
+	var olPolygon = new OpenLayers.Geometry.Polygon([olLinearRing1, olLinearRing1]);
+	var olSpatialReference = "EPSG:4326";
+	
+	var agsPolygon = adapter.encodeAgsGeometry['polygon'].apply(adapter, [olPolygon, olSpatialReference]);
+	t.ok(agsPolygon instanceof esri.geometry.Polygon, "...returns an instance of esri.geometry.Polygon...");
+	
+	var isPass = true;
+	if(agsPolygon.rings.length !== 2) {
+		isPass = false;
+	}
+	if(agsPolygon.rings[0].length !== 6) {
+		isPass = false;
+	}
+	if(agsPolygon.rings[1].length !== 6) {
+		isPass = false;
+	}
+	t.ok(isPass, "...encodes rings and points from OpenLayers.Geometry.Polygon...");
+	
+	var olPolygon1 = {};
+	try {
+		var agsPolygon1 = adapter.encodeAgsGeometry['polygon'].apply(adapter, [olPolygon1, olSpatialReference]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid instanceof OpenLayers.Geometry.Polygon...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGeometry_extent(t) {
+	setUp();
+	t.plan(3);
+	
+	var olBounds = new OpenLayers.Bounds(-180, -90, 180, 90);
+	var olSpatialReference = "EPSG:4326";
+	
+	var agsExtent = adapter.encodeAgsGeometry['extent'].apply(adapter, [olBounds, olSpatialReference]);
+	t.ok(agsExtent instanceof esri.geometry.Extent, "...returns an instance of esri.geometry.Extent...");
+	
+	var isPass = true;
+	if(agsExtent.xmin !== -180 || agsExtent.xmax !== 180 || agsExtent.ymin !== -90  || agsExtent.ymax !== 90) {
+		isPass = false;
+	}	
+	t.ok(isPass, "...encodes xmin, ymin, xmax, ymax from OpenLayers.Bounds...");
+	
+	var olBounds1 = {};
+	try {
+		var agsExtent1 = adapter.encodeAgsGeometry['extent'].apply(adapter, [olBounds1, olSpatialReference]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid instanceof OpenLayers.Bounds...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsSymbol_SimpleMarkerSymbol(t) {
+	setUp();	
+	t.plan(11);
+	
+	var olStyle = {
+		'pointRadius': 8,
+		'fillColor': "#000000",
+		'fillOpacity': 0.75,
+		'graphicXOffset': 34,
+		'graphicYOffset': 49,
+		'strokeDashstyle': "dashdot",
+		'strokeWidth': 2,
+		'strokeColor': "#000000",
+		'strokeOpacity': 0.49
+	};
+	
+	var agsSimpleMarkerSymbol = adapter.encodeAgsSymbol['SimpleMarkerSymbol'].apply(adapter, [olStyle]);
+	
+    t.ok(agsSimpleMarkerSymbol instanceof esri.symbol.SimpleMarkerSymbol, "...agsSimpleMarkerSymbol is an instance of esri.symbol.SimpleMarkerSymbol...");
+	t.eq(agsSimpleMarkerSymbol.size, 8, "...encodes pointRadius to size correctly...");
+	t.eq(agsSimpleMarkerSymbol.color.toHex(), "#000000", "...encodes fillColor to color correctly...");
+	t.eq(agsSimpleMarkerSymbol.color.toRgba()[3], 0.75, "...encodes fillOpacity to opacity correctly...");
+	t.eq(agsSimpleMarkerSymbol.xoffset, 34, "...encodes graphicXOffset to xoffset correctly...");
+	t.eq(agsSimpleMarkerSymbol.yoffset, 49, "...encodes graphicYOffset to yoffset correctly...");
+	t.eq(agsSimpleMarkerSymbol.outline.style, "STYLE_DASHDOT", "...encodes strokeDashstyle to outline style correctly...");
+	t.eq(agsSimpleMarkerSymbol.outline.color.toHex(), "#000000", "...encodes strokeColor to outline color correctly...");
+	t.eq(agsSimpleMarkerSymbol.outline.color.toRgba()[3], 0.49, "...encodes strokeOpacity to outline transparency correctly...");
+	t.eq(agsSimpleMarkerSymbol.outline.width, 2, "...encodes strokeWidth to outline width correctly...");
+	
+	var olStyle2 = null;
+	
+	try {
+		var agsSimpleMarkerSymbol2 = adapter.encodeAgsSymbol['SimpleMarkerSymbol'].apply(adapter, [olStyle2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid OpenLayers style...");
+	}
+	
+	tearDown();	
+}
+
+function test_Format_AgsJsAdapter_encodeAgsSymbol_PictureMarkerSymbol(t) {
+	setUp();	
+	t.plan(7);
+	
+	var olStyle = {
+		'pointRadius': 8,
+		'externalGraphic': "http://www.google.com/marker.png",
+		'graphicXOffset': 34,
+		'graphicYOffset': 49,
+		'graphicWidth': 34,
+		'graphicHeight': 49,
+	};
+	
+	var agsPictureMarkerSymbol = adapter.encodeAgsSymbol['PictureMarkerSymbol'].apply(adapter, [olStyle]);
+	
+    t.ok(agsPictureMarkerSymbol instanceof esri.symbol.PictureMarkerSymbol, "...agsPictureMarkerSymbol is an instance of esri.symbol.PictureMarkerSymbol...");
+	t.eq(agsPictureMarkerSymbol.size, 8, "...encodes pointRadius to size correctly...");
+	t.eq(agsPictureMarkerSymbol.xoffset, 34, "...encodes graphicXOffset to xoffset correctly...");
+	t.eq(agsPictureMarkerSymbol.yoffset, 49, "...encodes graphicYOffset to yoffset correctly...");
+	t.eq(agsPictureMarkerSymbol.width, 34, "...encodes graphicWidth to width style correctly...");
+	t.eq(agsPictureMarkerSymbol.height, 49, "...encodes graphicHeight to height correctly...");
+	
+	var olStyle2 = null;
+	
+	try {
+		var agsPictureMarkerSymbol2 = adapter.encodeAgsSymbol['PictureMarkerSymbol'].apply(adapter, [olStyle2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid OpenLayers style...");
+	}
+	
+	tearDown();	
+}
+
+function test_Format_AgsJsAdapter_encodeAgsSymbol_SimpleLineSymbol(t) {
+	setUp();	
+	t.plan(6);
+	
+	var olStyle = {		
+		'strokeDashstyle': "dashdot",
+		'strokeWidth': 2,
+		'strokeColor': "#000000",
+		'strokeOpacity': 0.49
+	};
+	
+	var agsSimpleLineSymbol = adapter.encodeAgsSymbol['SimpleLineSymbol'].apply(adapter, [olStyle]);
+	
+    t.ok(agsSimpleLineSymbol instanceof esri.symbol.SimpleLineSymbol, "...agsSimpleLineSymbol is an instance of esri.symbol.SimpleLineSymbol...");
+	t.eq(agsSimpleLineSymbol.style, "STYLE_DASHDOT", "...encodes strokeDashstyle to outline style correctly...");
+	t.eq(agsSimpleLineSymbol.color.toHex(), "#000000", "...encodes strokeColor to outline color correctly...");
+	t.eq(agsSimpleLineSymbol.color.toRgba()[3], 0.49, "...encodes strokeOpacity to outline transparency correctly...");
+	t.eq(agsSimpleLineSymbol.width, 2, "...encodes strokeWidth to outline width correctly...");
+	
+	var olStyle2 = null;
+	
+	try {
+		var agsSimpleLineSymbol2 = adapter.encodeAgsSymbol['SimpleLineSymbol'].apply(adapter, [olStyle2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid OpenLayers style...");
+	}
+	
+	tearDown();	
+}
+
+function test_Format_AgsJsAdapter_encodeAgsSymbol_SimpleFillSymbol(t) {
+	setUp();	
+	t.plan(8);
+	
+	var olStyle = {
+		'pointRadius': 8,
+		'fillColor': "#000000",
+		'fillOpacity': 0.75,
+		'graphicXOffset': 34,
+		'graphicYOffset': 49,
+		'strokeDashstyle': "dashdot",
+		'strokeWidth': 2,
+		'strokeColor': "#000000",
+		'strokeOpacity': 0.49
+	};
+	
+	var agsSimpleFillSymbol = adapter.encodeAgsSymbol['SimpleFillSymbol'].apply(adapter, [olStyle]);
+	
+    t.ok(agsSimpleFillSymbol instanceof esri.symbol.SimpleFillSymbol, "...agsSimpleFillSymbol is an instance of esri.symbol.SimpleFillSymbol...");
+	t.eq(agsSimpleFillSymbol.color.toHex(), "#000000", "...encodes fillColor to color correctly...");
+	t.eq(agsSimpleFillSymbol.color.toRgba()[3], 0.75, "...encodes fillOpacity to opacity correctly...");
+	t.eq(agsSimpleFillSymbol.outline.style, "STYLE_DASHDOT", "...encodes strokeDashstyle to outline style correctly...");
+	t.eq(agsSimpleFillSymbol.outline.color.toHex(), "#000000", "...encodes strokeColor to outline color correctly...");
+	t.eq(agsSimpleFillSymbol.outline.color.toRgba()[3], 0.49, "...encodes strokeOpacity to outline transparency correctly...");
+	t.eq(agsSimpleFillSymbol.outline.width, 2, "...encodes strokeWidth to outline width correctly...");
+	
+	var olStyle2 = null;
+	
+	try {
+		var agsSimpleFillSymbol2 = adapter.encodeAgsSymbol['SimpleFillSymbol'].apply(adapter, [olStyle2]);
+	} catch(e) {
+		t.ok(true, "...throws exception if input is invalid OpenLayers style...");
+	}
+	
+	tearDown();	
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGraphic(t) {
+	setUp();
+	t.plan(5);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var olSpatialReference = "EPSG:4326";
+	var attributes = {};
+	attributes['k1'] = "v1";
+	attributes['k2'] = "v2";
+	attributes['infoTemplateTitle'] = "title";
+	attributes['infoTemplateContent'] = "<html>content</html>";
+	
+	var olFeature = new OpenLayers.Feature.Vector(olPoint, attributes);
+	olFeature.style = OpenLayers.Feature.Vector.style['default'];
+	var agsGraphic = adapter.encodeAgsGraphic.apply(adapter, [olFeature, olSpatialReference]); 
+	
+	t.ok(agsGraphic instanceof esri.Graphic, "...agsGraphic is an instance of esri.Graphic...");
+	t.ok(agsGraphic.geometry instanceof esri.geometry.Point, "...encodes geometry of esri.Graphic correctly...");
+	
+	var isPass = true;
+	if(agsGraphic.attributes['k1'] !== "v1" || agsGraphic.attributes['k2'] !== "v2") {
+		isPass = false;
+	}
+	t.ok(isPass, "...encodes attributes of esri.Graphic...");
+	
+	isPass = true;
+	if(agsGraphic.infoTemplate.title !== "title" || agsGraphic.infoTemplate.content !== "<html>content</html>") {
+		isPass = false;
+	}
+	t.ok(isPass, "...encodes infoTemplate of esri.Graphic correctly...");
+	t.ok(agsGraphic.symbol instanceof esri.symbol.SimpleMarkerSymbol, "...eencodes symbol of esri.Graphic correctly...");
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsGraphics(t) {
+	setUp();
+	t.plan(3);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var olSpatialReference = "EPSG:4326";
+	var attributes = {};
+	attributes['k1'] = "v1";
+	attributes['k2'] = "v2";
+	attributes['infoTemplateTitle'] = "title";
+	attributes['infoTemplateContent'] = "<html>content</html>";
+	
+	var olFeature = new OpenLayers.Feature.Vector(olPoint, attributes);
+	
+	var olFeatures = [];
+	for(var i=0; i<5; i++) {
+		var newOlFeature = olFeature.clone();
+		olFeatures.push(newOlFeature);	
+	}
+	
+	var agsGraphics = adapter.encodeAgsGraphics.apply(adapter, [olFeatures, olSpatialReference]);
+	
+	t.ok(agsGraphics instanceof Array, "...returns an instance of array of esri.Graphic...");
+	
+	var isPass = true;
+	for(var i=0; i<5; i++) {
+		if(!(agsGraphics[i] instanceof esri.Graphic)) {
+			isPass = false;
+		}
+	}
+	t.ok(isPass, "...encodes every OpenLayers.Feature.Vector in the array...");
+
+	var olFeatures1 = {};
+	try {
+		var agsGraphics1 = adapter.encodeAgsGraphics.apply(adapter, [olFeatures1, olSpatialReference]);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is not an array of OpenLayers.Feature.Vector...");
+	}
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsFindParameters(t) {
+	setUp();	
+	t.plan(7);
+	
+	var findParameters = {
+		'contains': null,
+		'outSpatialReference': "EPSG:900913",
+		'returnGeometry': null,
+		'layerIds': [0,1,2],
+		'searchFields': ["NAME"],
+		'searchText': "August"
+	}
+	
+	var agsFindParameters = adapter.encodeAgsFindParameters(findParameters);
+	
+	t.ok(agsFindParameters instanceof esri.tasks.FindParameters, "...returns instance of esri.tasks.FindParameters...");
+	t.eq(agsFindParameters['contains'], false, "...encodes parameter 'contains'...");
+	t.eq(agsFindParameters['outSpatialReference'].wkid, "102113", "...encodes parameter 'outSpatialReference'...");
+	t.eq(agsFindParameters['returnGeometry'], true, "...encodes parameter 'returnGeometry'...");
+	t.eq(agsFindParameters['layerIds'], [0,1,2], "...encodes parameter 'layerIds'...");
+	t.eq(agsFindParameters['searchFields'], ["NAME"], "...encodes parameter 'searchFields'...");
+	t.eq(agsFindParameters['searchText'], "August", "...encodes parameter 'searchText'...");
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsIdentifyParameters(t) {
+	setUp();	
+	t.plan(17);
+	
+	var identifyParameters = {
+		'dpi': 90,
+		'geometry': new OpenLayers.Geometry.Point(34.49, 49.34),
+		'height': 480,
+		'layerIds': [0,1,2],
+		'layerOption': "visible",
+		'mapExtent': new OpenLayers.Bounds(-180, -90, 180, 90),
+		'returnGeometry': false,
+		'spatialReference': "EPSG:900913",
+		'tolerance': 1,
+		'width': 640
+	}
+	
+	var agsIdentifyParameters = adapter.encodeAgsIdentifyParameters(identifyParameters);
+	
+	t.ok(agsIdentifyParameters instanceof esri.tasks.IdentifyParameters, "...returns instance of esri.tasks.IdentifyParameters...");
+	t.eq(agsIdentifyParameters['dpi'], 90, "...encodes parameter 'dpi'...");
+	t.eq(agsIdentifyParameters['geometry'].x, 34.49, "...encodes parameter 'geometry' from OpenLayers.Geometry.Geometry...");
+	t.eq(agsIdentifyParameters['geometry'].y, 49.34, "...encodes parameter 'geometry' from OpenLayers.Geometry.Geometry...");
+	t.eq(agsIdentifyParameters['height'], 480, "...encodes parameter 'height'...");
+	t.eq(agsIdentifyParameters['layerIds'], [0,1,2], "...encodes parameter 'layerIds'...");
+	t.eq(agsIdentifyParameters['layerOption'], "visible", "...encodes parameter 'layerOption'...");
+	
+	t.ok(agsIdentifyParameters['mapExtent'] instanceof esri.geometry.Extent, "...encodes parameter 'mapExtent'...");
+	var isPass = false;
+	if(agsIdentifyParameters['mapExtent'].xmin === -180 && agsIdentifyParameters['mapExtent'].ymin === -90 && agsIdentifyParameters['mapExtent'].xmax === 180 && agsIdentifyParameters['mapExtent'].ymax === 90) {
+		isPass = true
+	}
+	t.ok(isPass, "...encodes parameter 'mapExtent'...");
+	t.eq(agsIdentifyParameters['returnGeometry'], false, "...encodes parameter 'returnGeometry'...");
+	t.eq(agsIdentifyParameters['spatialReference'].wkid, "102113", "...encodes parameter 'spatialReference'...");
+	t.eq(agsIdentifyParameters['tolerance'], 1, "...encodes parameter 'tolerance'...");
+	t.eq(agsIdentifyParameters['width'], 640, "...encodes parameter 'width'...");
+		
+	identifyParameters['geometry'] = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(34.49, 49.34));
+	identifyParameters['mapExtent'] = new esri.geometry.Extent(-180, -90, 180, 90, agsIdentifyParameters['spatialReference']);
+	identifyParameters['spatialReference'] = agsIdentifyParameters['spatialReference'];
+	
+	agsIdentifyParameters = adapter.encodeAgsIdentifyParameters(identifyParameters);
+	t.eq(agsIdentifyParameters['geometry'].x, 34.49, "...encodes parameter 'geometry' from OpenLayers.Feature.Vector...");
+	t.eq(agsIdentifyParameters['geometry'].y, 49.34, "...encodes parameter 'geometry' from OpenLayers.Feature.Vector...");
+	isPass = false;
+	if(agsIdentifyParameters['mapExtent'].xmin === -180 && agsIdentifyParameters['mapExtent'].ymin === -90 && agsIdentifyParameters['mapExtent'].xmax === 180 && agsIdentifyParameters['mapExtent'].ymax === 90) {
+		isPass = true
+	}
+	t.ok(isPass, "...encodes parameter 'mapExtent' from esri.geometry.Extent...");
+	t.eq(agsIdentifyParameters['spatialReference'].wkid, "102113", "...encodes parameter 'spatialReference' from esri.SpatialReference...");
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsBufferParameters(t) {
+	setUp();	
+	t.plan(12);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var olFeature = new OpenLayers.Feature.Vector(olPoint);
+	
+	var bufferParameters = {
+		'bufferSpatialReference': "EPSG:900913",
+		'distances': [49,50,51],
+		'features': [olPoint, olFeature], 
+		'outSpatialReference': "EPSG:900913",
+		'unionResults': true,
+		'unit': "UNIT_METER"
+	}
+	
+	var agsBufferParameters = adapter.encodeAgsBufferParameters(bufferParameters);
+	
+	t.ok(agsBufferParameters instanceof esri.tasks.BufferParameters, "...returns instance of esri.tasks.BufferParameters...");
+	t.ok(agsBufferParameters['bufferSpatialReference'] instanceof esri.SpatialReference, "...encodes parameter 'bufferSpatialReference'...");
+	t.eq(agsBufferParameters['bufferSpatialReference'].wkid, "102113", "...encodes parameter 'contains'...");
+	t.ok(agsBufferParameters['outSpatialReference'] instanceof esri.SpatialReference, "...encodes parameter 'outSpatialReference'...");
+	t.eq(agsBufferParameters['outSpatialReference'].wkid, "102113", "...encodes parameter 'outSpatialReference'...");
+	
+	t.ok(agsBufferParameters['features'][0] instanceof esri.Graphic, "...encodes parameter 'features'...");
+	t.ok(agsBufferParameters['features'][1] instanceof esri.Graphic, "...encodes parameter 'features'...");
+	
+	var isPass = false;
+	if(agsBufferParameters['features'][0].geometry.x === 34.49 && agsBufferParameters['features'][0].geometry.y === 49.34) {
+		isPass = true;
+	}
+	t.ok(isPass, "...encodes parameter 'features'...");
+	
+	isPass = false;
+	if(agsBufferParameters['features'][1].geometry.x === 34.49 && agsBufferParameters['features'][1].geometry.y === 49.34) {
+		isPass = true;
+	}
+	t.ok(isPass, "...encodes parameter 'features'...");
+	
+	t.eq(agsBufferParameters['distances'], [49,50,51], "...encodes parameter 'distances'...");
+	t.eq(agsBufferParameters['unionResults'], true, "...encodes parameter 'unionResults'...");
+	t.eq(agsBufferParameters['unit'], 9001, "...encodes parameter 'unit'...");
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsQuery(t) {
+	setUp();	
+	t.plan(8);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var olFeature = new OpenLayers.Feature.Vector(olPoint);
+	
+	var query = {
+		'geometry': olPoint,
+		'outFields': ["NAME", "TITLE"],
+		'outSpatialReference': "EPSG:900913",
+		'returnGeometry': false,
+		'text': "text",
+		'where': "where"
+	}
+	
+	var agsQuery = adapter.encodeAgsQuery(query);
+	
+	t.ok(agsQuery instanceof esri.tasks.Query, "...returns instance of esri.tasks.query...");
+	t.ok(agsQuery['geometry'] instanceof esri.geometry.Point, "...encodes parameter 'geometry'...");
+	t.eq(agsQuery['geometry'].x, 34.49, "...encodes parameter 'geometry'...");
+	t.eq(agsQuery['geometry'].y, 49.34, "...encodes parameter 'geometry'...");
+	
+	t.eq(agsQuery['outSpatialReference'].wkid, "102113", "...encodes parameter 'outSpatialReference'...");
+		
+	t.eq(agsQuery['returnGeometry'], false, "...encodes parameter 'returnGeometry'...");
+	t.eq(agsQuery['text'], "text", "...encodes parameter 'text'...");
+	t.eq(agsQuery['where'], "where", "...encodes parameter 'where'...");
+	
+	tearDown();
+}
+
+function test_Format_AgsJsAdapter_encodeAgsLocation(t) {
+	setUp();	
+	t.plan(3);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var olFeature = new OpenLayers.Feature.Vector(olPoint);
+	
+	var agsLocation1 = adapter.encodeAgsLocation(olPoint);
+	var agsLocation2 = adapter.encodeAgsLocation(olFeature);
+	
+	t.ok(agsLocation1 instanceof esri.geometry.Point, "...encodes OpenLayers.Geometry.Point to agsLocation correctly...");
+	t.ok(agsLocation2 instanceof esri.geometry.Point, "...encodes OpenLayers.Feature.Vector to agsLocation correctly...");
+	
+	try {
+		var agsLocation3 = adapter.encodeAgsLocation(null);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid...");
+	}
+	tearDown();	
+}
+
+function test_Format_AgsJsAdapter_encodeAgsFeatureSet(t){
+	setUp();	
+	t.plan(6);
+	
+	var olPoint = new OpenLayers.Geometry.Point(34.49, 49.34);
+	var olFeature1 = new OpenLayers.Feature.Vector(olPoint);
+	var olFeature2 = new OpenLayers.Feature.Vector(olPoint);
+	var olFeature3 = new OpenLayers.Feature.Vector(olPoint);
+	
+	var olFeatures = [olFeature1, olFeature2, olFeature3];
+	
+	var olSpatialReference = "EPSG:4326";
+	
+	var options = {
+		'displayFieldName': "field1,field2,field3",
+		'fieldAliases': {
+			'name1': "alias1",
+			'name2': "alias2",
+			'name3': "alias3"
+		},
+		'geometryType': "esri.geometry.Point",
+	}
+	
+	var agsFeatureSet = adapter.encodeAgsFeatureSet(olFeatures, olSpatialReference, options);
+	
+	t.ok(agsFeatureSet instanceof esri.tasks.FeatureSet, "...agsFeatureSet is an instance of esri.tasks.FeatureSet...");
+	t.ok(agsFeatureSet.spatialReference instanceof esri.SpatialReference, "...agsFeatureSet.spatialReference is an instance of esri.SpatialReference...");
+	t.eq(agsFeatureSet.geometryType, "esri.geometry.Point", "...encodes options.geometryType to FeatureSet.geometryType correctly...");
+	t.eq(agsFeatureSet.displayFieldName, "field1,field2,field3", "...encodes options.displayFieldName to FeatureSet.displayFieldName correctly...");
+	var isPass = false;
+	if(agsFeatureSet.fieldAliases['name1'] == "alias1" && agsFeatureSet.fieldAliases['name2'] == "alias2" && agsFeatureSet.fieldAliases['name3'] == "alias3") {
+		isPass = true;	
+	}
+	t.ok(isPass, "...encodes options.fieldAliases to FeatureSet.fieldAliases correctly...");
+	try{
+		adapter.encodeAgsFeatureSet(null);
+	} catch(e) {
+		t.ok(true, "...throws exception when input is invalid...");
+	}
+	
+	tearDown();
+}
+
+/*
+function test_Format_AgsJsAdapter_encodeAgsGeometrySpatialRelationship(t){
+
+}  
+*/
Index: tests/list-tests.html
===================================================================
--- tests/list-tests.html	(revision 9484)
+++ tests/list-tests.html	(working copy)
@@ -1,5 +1,6 @@
 <ul id="testlist">
-    <li>Ajax.html</li>
+    <!--
+	<li>Ajax.html</li>
     <li>BaseTypes.html</li>
     <li>BaseTypes/Bounds.html</li>
     <li>BaseTypes/Class.html</li>
@@ -167,4 +168,13 @@
     <li>Tile/WFS.html</li>
     <li>Tween.html</li>
     <li>Util.html</li>
+	-->
+	<li>Format/AgsJsAdapter.html</li>
+	<li>Control/AgsControl.html</li>
+    <li>Control/AgsFindTask.html</li>
+    <li>Control/AgsIdentifyTask.html</li>
+    <li>Control/AgsGeometryService.html</li>
+    <li>Control/AgsQueryTask.html</li>
+    <li>Control/AgsLocator.html</li>
+    <li>Control/AgsGeoprocessor.html</li>
 </ul>
